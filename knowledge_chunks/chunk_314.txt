p(A). 2. Promotion Promote the action stack(B, ?Y). Insert an ordering link (stack(B, ?Y) unstack(?X, A) into the partial plan. 3. Demotion Demote the action stack(B, ?Y) to happen after the causal link actions. That is, add an ordering link (pickup(A); stack(B, ?Y) to the set O in the partial plan. At any stage of planning, a refinement step can be applied to the partial plan, provided it does not introduce an inconsistency. For the ordering links to be consistent, there must be no cycles in the directed graph representing the ordering relations. In other words, the action must begin with Ap and move forward without turning back, ending with A... Ordering links are added (a) along with causal links and (b) during promotion or demotion of actions. Before each of these operations, a check must be made for consistency. Likewise, for the binding constraints to be consistent, all assignments to variables should be consistent with all the binding constraints. Whenever a new binding constraint is added, a check for consistency for the variables involved must be made . The causal links too must not have cycles, but a check is not required because whenever a causal link is added to the partial plan, a corresponding ordering link is added as well, and it suffices to check that the ordering links are consistent. The basic plan space algorithm described below (Figure 7.17) is adapted from (Ghallab et al., 2004). It is initially invoked with the empty plan Po as the argument. PSP (nm) 1 flaws OpenGoals(n) U Threats (nm) if Empty(flaws) then return II CHOOSE fe flaws resolvers Resolve(f, m) the set of resolvers for flaw f if Empty(resolvers) then return FAIL CHOOSE re resolvers w Refine(r, n) Q return PSP(r) FPoOMIAHewWYH Figure 7.17 The plan space planning (PSP) procedure selects a flaw in a given plan, and looks for a resolver that can remove the flaw. The Refine procedure applies the chosen resolver, and the algorithm PSP is called recursively. In Line 1, the set of flaws is 