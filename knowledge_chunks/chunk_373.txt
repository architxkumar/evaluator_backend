 nodes that will cover all strategies is like the one for constructing a strategy, only the choices are reversed. For MAX nodes, we select all choices, because we want to cover all strategies. For MIN nodes, we only choose one, since we are only constructing partial strategies that will be refined later. For the 4-ply binary game tree, four leaf nodes, each representing a cluster of two strategies, are selected as shown in Figure 8.29. The lone choice for each MIN node has uniformly been chosen as the leftmost one. A B c D FIGURE 8.29 Algorithm SSS begins by selecting a set of leaf nodes covering all strategies. All moves for MAX and one move for MIN is selected from the game tree. The four clusters are labelled A, B, C and D. The four clusters labelled A, B, C, and D are shown by the four shaded representative nodes. The upper bounds on the four clusters are 10, 7, 5 and 11 respectively, the values of the four nodes. The best value possible for MAX is 11 in cluster D. Algorithm SSS picks cluster D for refinement, and evaluates the next node in the cluster, as shown in Figure 8.30 below. Observe that in this example, SSS has already headed off in a direction that seems to be best. The new node evaluates to 12 as shown in the above figure. This does not change the upper bound of cluster D (remember 11 is also an upper bound). Cluster D is still the best and is again picked for refinement. The lowest MIN node in cluster D is fully evaluated, and the other refinement will have to come at the level of the next higher MIN node, by selecting the next child marked X in the above figure. Observe that the subtree below X is common to strategies C and D. Since D is better in the subtree where the two differ, D will always be better than C, and C will never be considered again. As shown in Figure 8.30 above, this is an a cutoff. The subtree below X will only be of interest if it evaluates to a value less that 11, the upper bound on strategy D. Otherwise, the MIN node above it 