main, so that every value in D, has a corresponding value in Dy. In practice, when a matching value is found in Dy the algorithm will exit that loop. A CSP is said to be arc consistent if every edge in its constraint graph is arc consistent. At first thought, it might appear that making a CSP arc consistent is simply a matter of looking at the domain of each variable with respect to every edge. However, deleting a value from a domain may have a cascading effect because that value might have been the supporting value for a value in another domain. Figure 9.7 extends the CSP of Figure 9.5 with two more variables, z and w. To achieve arc consistency on the four variables, Revise has to be called more than once for some pairs of variables. The matching diagram on the top depicts the original problem, and the diagram below it is the state after one round of calls to algorithm Revise left to right. As one can see, two values in Dy which had matching values in D, after (y, z) was made arc consistent, lost their supports after (z, w) was made arc consistent. ie : a ee - FT ae FIGURE 9.7 The domains of four variables x, y, z and w are shown on the top along with the relations Ryy, Ryz, and Rzy. After one round of are consistency with (x, y), (y, x), (Y, Z), (2, ); (Z, w) and (w, z), the matching diagram is shown below. As one can see, two values in Dy are unsupported at this stage. The reader is encouraged to continue applying the Revise algorithm to the four variables until the three edges in the constraint graph, (x, y), (y, Z) and (z, w) are arc consistent. We shall look at three well known algorithms to achieve arc consistency (Mackworth, 1977). The simplest algorithm AC-1 to achieve arc consistency repeats the complete cycle of calls to Revise, until no domain changes in a cycle. It is computationally the most expensive of the three. The algorithm is given in Figure 9.8. AC-1 (X, D, C) repeat for each xeXx for e ach yeX such that CyyE C D, Revise (D,, dD, Ryy) Dd, Revis