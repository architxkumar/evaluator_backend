 costs of each proposition in the goal. g (s, G) peg OS, P) The additive function is the function CostS shown in Figure 10.16. The additive function assumes that each goal proposition p is arrived at by an independent set of actions. This assumption of independence is however not always true, because some actions may generate more than one proposition. As a result, the estimated cost using the additive function may be more than the actual cost, and therefore the additive function is not guaranteed to be admissible (see Chapter 5 for a discussion on admissibility). The other commonly used function is g (s, G) which aggregates the value for the set by taking the maximum of the constituent costs. g (s, G) Maxp.g 9(S, P) The max heuristic can be thought of as making a complete dependence assumption, which assumes that the sequence of actions that achieves the costliest proposition also achieves the other propositions on the way. Obviously, even this assumption is not likely to hold, but the max heuristic has the property of being admissible because it never overestimates the cost. Consequently, if one has the task of finding the optimal (or shortest where costs are uniform) plan then one should use the max heuristic for aggregation. On the other hand, the additive heuristic is likely to be more informed because it looks at all the constituent propositions, leading to a more focused search. The original version of HSP used the additive heuristic with Hill Climbing (see Chapter 3). A later version HSP2 uses the weighted A algorithm (see Chapter 5), and can be made an admissible algorithm with an appropriate choice of heuristic function and the weights. HSP2 also used a variation on the heuristic function called h2(s). Instead of taking only the costliest proposition, as is done in h (s), the h2(s) function looks at the costliest pair of propositions that are achieved at the same time. Let us say that the two propositions are called p and q. Then the heuristic function h2(