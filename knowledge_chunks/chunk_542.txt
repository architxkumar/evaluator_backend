pplicable in S, and returns nix if there is no such action. where O(p) stands for the set of actions that have p in their add effects. Note that the function g is defined, both for a proposition as well as for a set of propositions. The function for a set is some kind of an aggregation over the individual components of that set. The algorithm used in HSP updates the values g(s, p) using a forward chaining procedure CostP described in Figure10.16. The algorithm initializes the cost of each proposition to 0 if it belongs to the state s, else it sets it to a very large value, . It then picks an action that is applicable, adds its effects to the state s, and re-computes cost for each added effect. When it terminates, CostP returns a cost value for each proposition. This cost is the estimated cost of reaching the proposition from the given state s. If the cost of a proposition remains , it means that the proposition is not reachable in the domain. The aggregation function CostS here computes the cost of a set of propositions (the preconditions of the action) as the sum of the costs of each member. Note that these costs are all finite, since they pertain to the preconditions which have been added to the state s at some time before the action becomes applicable. Other methods of aggregation, for example using the maximum value, could be used. Given a state s, the estimated cost h(s) of achieving the goal G from s is defined as, h(s) g(s, G) where g(s, G) is an aggregation of all g(s, p) such that peG. This aggregation function may be defined in different ways, but the two most commonly used aggregations are the additive and the max heuristic. We can call the corresponding heuristic functions as h (s) and h (s). The additive heuristic g (s, G) computes the value as a sum of the costs of each proposition in the goal. g (s, G) peg OS, P) The additive function is the function CostS shown in Figure 10.16. The additive function assumes that each goal proposition p is arrived at 