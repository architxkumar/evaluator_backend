as ten or more) conditions. Working memories typically contain hundreds of clauses as well. Consequently. exhaustive matching of all rules and their LUIS conditions against working-memory clauses may require tens of thousands of comparisons. This accounts for the claim made in the introductory paragraph that as much as 9017c of the computing time for such systems can be related to matching operations. To eliminate the need to perform thousands of matches per cycle, an efficient match algorithm called RETE has been developed (Forgy. 1982). It was initially developed as part of the OPS family of programming languages (Brownston, et al., 195) This algorithm uses several novel features, including methods to avoid repetitive matching on successive cycles. The main time-saving features of RETE are as follows. 1. In most expert systems, the contents of working memory change very little from cycle to cycle. There is a persistence in the data known as temporal redundancy. Sec. 10.7 The RETE Matching Algorithm 207 Changes to working memory >atcher Ct C IHS rsde Conditions Figure 10.8 Changes to working memor are mapped it) the conflict set This makes exhaustive matching on every cycle unnecessary. tnstead, by saving match information, it is only necessary to compare working memory changes on each cycle. In RETE. additions to, remoals from, and changes to working memory are translated directly into changes to the conflict set (Figure 10.8). Then, when a rule from the conflict set has been selected to fire, it is removed from the set and the remaining entries are saved for the next cycle Consequently. repetitive matching of all rules against Working Memory is asoided. Furthermore, by indexing rules with the condition terms appearing in their LHS (described below), only those rules which could match Working Memory changes need to be examined. This greatly reduces the number of comparisons required on each cycle. 2. Many rules in a knowledge base will have the same conditions occ