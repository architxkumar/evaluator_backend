tarting position can be described as an 8 x 8 array where each position contains a symbol standing for the appropriate piece in the official chess opening position. We can define as our goal any board position in which the opponent does not have a legal move and his or her king is under attack. The legal moves provide the way of getting from the initial state to a goal state. They can be described easily as a set of rules consisting of two parts: a left side that serves as a pattern to be matched against the current board position and a right side that yo 26 Artificial intelligence describes the change to be made to the board position to reflect the move. There are several ways in which uvese rules can be written. For example, we could write a rule such as that shown in Fig. 2.1. s(El|alalvlolalaln rlalalvle/alalz 7jalalalalalalala jafalalalalalaia 6 5 a 4 & 3 2(alalafalalalala alalalal [alata i[nlajalelolalala nlalaivl|e/slalo abcdefgih abcde fdgdih White White Fig. 2.1 One Legal Chess Move However, if we write rules like the one above, we have to write a very large number of them since there has to be a separate rule for each of the roughly 10!? possible board positions. Using so many rules poses two serious practical difficulties: No person could ever supply a complete set of such rules. It would take too long and could certainly not be done without mistakes. No program could easily handle all those rules. Although a hashing scheme could be used to find the relevant rules for each move fairly quickly, just storing that many rules poses serious difficulties. In order to minimize such problems, we should look for a way to write the rules describing the legal moves in as general a way as possible. To do this, it is useful to introduce some convenient notation for describing pattems and substitutions. For example, the rule described in Fig. 2.1, as well as many like it, could be written as shown in Fig. 2.2.! In general, the more succinctly we can describe the rules 