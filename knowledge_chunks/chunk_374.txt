 shown in Figure 8.30 above, this is an a cutoff. The subtree below X will only be of interest if it evaluates to a value less that 11, the upper bound on strategy D. Otherwise, the MIN node above it will not be influenced by its value. To refine the strategy D below node X, SSS recursively calls itself with an upper bound of 11. It will continue evaluating that subtree, only as long as it is below this value. The recursive call generates clusters again for the subtree below node X. In our example, there are two clusters D, and Dz as shown in Figure 8.31 below. lan ay maoooooe 7 A B c Con D FIGURE 8.30 SSS refines the best cluster D by evaluating another node that evaluates to 12. The upper bound on D remains 11. At this point, cluster C drops out of contention, and will never be looked at again. Cluster D is still the best and further refinement involves looking at another (the only one in this example) child of the parent Min node, marked X in the figure. pm mL D, 9 D 1 FIGURE 8.31 SSS further refines the best cluster D by recursively calling itself with an upper bound of 11. The two (new) clusters are D, and D2 with node values 9 and 7. It refines Dy by inspecting another node in it, and D, becomes fully refined with a value of 8, which becomes the new upper bound on cluster D. Observe that D is now fully refined, but cluster A could still be better. In the recursive call shown by the shaded envelope above, the clusters D, and D2 begin with bounds of 9 and 7 respectively. The reader would have noticed that these clusters contain only one strategy each, and have resulted by splitting the cluster D that had two strategies. The better cluster D, is refined ! by inspecting the remaining node in it, and evaluates to 8. D, is fully refined and higher than 7, the upper bound on Do. The recursive call terminates. If D,; had evaluated to a value higher than 11 (for example, if the three nodes in the recursive call had values 15, 14, 12) then too the recursive call would h