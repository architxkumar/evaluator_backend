nd MIN nodes as circles in the tree8, and MAX is at the root. A game starts at the root with MAX playing first and ends at a leaf node. OOD ARDWA . ? 2) ? ( QO) ji 5 O orc o 5 me yi IIA Ie he i IAAGACT 0 L D L D DIL FIGURE 8.5 A small game tree. Leaf nodes are labelled with W for win, D for draw, and L for loss for Max. 1, 0, and 1 would be equivalent labels. The leaves of the game tree are labelled with the outcome of the game and the game ends there. The task of each player is to choose the move when its turn comes. In the game tree, MAX chooses at MAX levels and MIN chooses at MIN levels. Thus, a game is a path from the root to some leaf node, chosen at alternating levels by the two players. For our zero sum game, the outcomes are defined by a set win, draw, loss and the values are as seen from the perspective of MAX, the player at the root. Thus, the value win means that MAX wins the game, and oss means that MAX loses or equivalently MIN wins. The leaves can also be labelled equivalently with numbers 1, 0, 1 . That is, it is a function that returns the outcome at a leaf node. value(leaf) 1 if MAX wins 0 if the game is a draw -1 if MIN wins One can now see the rationale of naming them MAX (the one who prefers the maximum valued outcome) and MIN (the one who prefers the minimum valued outcome). Given a game tree, it is possible to analyse the game and determine the outcome when both players play perfectly. We can do this by backing up values from the leaf nodes up to the root. The backup rule is as follows. Minimax rule e Ifthe node is a MLY node, back up the maximum of the values of its children. value(node) max value(c) is a child of node e Ifthe node is a ZN node, back up the minimum of the values of its children. value(node) min value(c) c is a child of node FIGURE 8.6 The minimax rule backs up values from the children of a node. For a MAX node, it backs up the maximum of the values of the children, and for a MIN node, the minimum. The rationale of the rules i