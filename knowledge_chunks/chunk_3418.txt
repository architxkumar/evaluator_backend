nd makes its selection based on the best among them all. Thus, at any point in the search process. hest-trt moves forward from the most promising of all the nodes generated so far. In so doing, it avoids the potential traps encountered in hill climbing. The best-first process as is illustrated in Figure 9.10 where numbers by the nodes may he regarded estimates of the distance or cost to reach the goal node. The algorithm we give for best first search differs from the previous blind search algorithms only in the way the nodes are saved and ordered on the queue. The algorithm reads as follows. BEST-FIRST SEARCH I. Place the starting node s on the queue. 2. If the queue is empty, return failure and stop. Sec. 9.5 Informed Search 181 Figure 9.10 Bestfirstsearch of a tree. 3. If the first element on the queue is a goal node g. return success and stop. Otherwise, 4. Remove the first element from the queue, expand it and compute the estimated goal distances for each child Place the children on the queue (at either end) and arrange all queue elements in ascending order corresponding to goal distance from the front of the queue. S. Return to step 2. Best-first searches will always , find good paths to a goal, even when local anomalies are encountered. All that is required is that a good measure of goal distance be used. Branch-and-Bound Search The branch-and-bound search strategy applies to problems having a graph search space where more than one alternative path may exist between two nodes. This strategy saves all path lengths (or costs) from a node to all generated nodes and chooses the shortest path for further expansion. It then compares the new path Ieigths with all old ones and again chooses the shortest path for expansion. In this way, any path to a goal node is certain to be a minimal length path. This process is illustrated in Figure 9.11. An algorithm for the branch-and-bound strategy which uses a queue data structure to hold partial paths developed during the sear