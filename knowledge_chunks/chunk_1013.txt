ram and trigram are special cases, have been used in various practical applications that need fast string matching. Despite being simple and easy to use, the n-gram approaches suffer from the limitation that they are overtly sensitive to insertions, deletions and substitutions. In the example above, the trigram similarity seems to underestimate the similarity between GONER and GONIR which differ by just one letter. Worse still, the trigram similarity between GONER and GOBER is 0. To overcome this limitation, commercial spellcheck tools that come with word-processing software use the notion of edit distance, which is explained below. Let us consider two strings: GREAT and GRATE. Let us attempt to transform GREAT to GRATE by using a combination of three primitive operations: letter insertions, deletions and substitutions. There are several ways in which a word can be transformed into another. For the current example, two such transformations are shown in Figure 16.3. A cost is assigned to each primitive operation, viz. insertion of letter, deletion of letter and substitution of letter. A total cost of transformation is computed as the sum of each of these primitive costs. Taking the costs to be 1 for each of the three primitive operations, the total costs for the two transformations shown in Figure 16.3 are 2 and 6 respectively. The edit distance is defined as the east cost of transforming one string to another. In the above example, the edit distance between GREAT and GRATE is 2. (a) (b) Figure 16.3 Two different ways of transforming one string to another. The process of enumerating all possible transformations from one string to another and choosing the least-cost transformation is computationally expensive. Fortunately, dynamic programming comes to the rescue by cleverly avoiding certain redundant computations. The details of this algorithm are presented in (Dasgupta et al., 2006). There is yet another interesting way of addressing the spell-check problem. Consider