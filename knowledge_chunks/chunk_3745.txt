 ), each element of which is a nine-element vector. The contents of this vector are chosen specifically to allow the algorithm to work. The Algorithm To make a move, do the following: 1. View the vector Board as a ternary (base three) number. Convert it to a decimal number. 2. Use the number computed in step 1 as an index into Movetable and access the vector stored there. 3. The vector selected in step 2 represents the way the board will look after the move that should be made. So set Board equal to that vector. Comments This program is very efficient in terms of time. And, in theory, it could play an optimal game of tic-tac-toe. But it has several disadvantages: What is Artificial Intelligence? 9 Pat beets ARLE I ION Seem RON Baa BI a I POTEET BR EPRI IAN BORER, @ It takes a lot of space to store the table that specifies the correct meve to make from evch boat odsition, = Someones will have to do abs of wort, spes tfyme allthe cries ve the movelhie @ Wis very unlikely that all the sequured moveiable entries can be determined and entesta vide CITOFs. @ If we want to extend the game, say to three dimensions, we would have to start from scratch, and in fact this technique would no longer work at all, since 3 board positions would have to be stored. thas overwhelming present computer memories. The technique embodied in this program does not appear to meet any of our requirements for a good AT technique. Let s see if we can do better. Data Structures Board Turn The Algorithm ( Program 2 | A nine-element vector representing the board, as described for Program 1. But instead of using the numbers 0,1. or 2 im each element. we store 2 (indicating blank). 3 (indicating Xo or 5 (indicating O). An integer indicating which move of the ganie is about to be played: | indivale: the fitsi move, 9 the last. The main algorithm uses three subprocedures: Make 2 Posswin(p) Got} Returns 5 if the center square of the board is blank, that is, if Board|S} = 2. Otherwese, this function retur