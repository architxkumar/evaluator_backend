e second argument, (a b C) the value, at the location accessed by the access function For example. if has been bound to x. the expression (self (car x) 'd) will replace the a in (a b c) Likewise, self can be used directly to assign or replace a property value. with d. ->(setf (get 'car 'color) 'pink) PINK .>(get 'car 'color) PINK see in later chapters, property lists provide us with a convenient As we shall' mechanism with which to represent knowledge. One such representation is the conceptual network where objects. their attributes, and relations to other objects are casil Sec.1. Property Lists an I krre$' 37 Ipprop 'bird 'fly 'locomotion) (pstprop 'sweaty 'bird 'li-i) (pttv'o P 'tweaty.'(winga tail) 'haapant) Figure 3.1 Representation of facts and )potprop 'sweaty 'yellow 'color) relations as a network. expressed. in Figure 3.1 some facts about Tweety, the famous Al bird, have been represented as a network using property lists. Arrays Singleor multiple-dimension arrays may be defined in LISP using the make-array function. The items stored in the array may be any LISP object. For example, to create an array with ten cells named myarray, vie bind the unquoted name to an array using setf (or setq) with the make-array function and a specification of the number of cells. ->(setf myarray (make-array '110))) #A(N)L NIL NIL NIL NIL NIL NIL NIL NIL NIL) Note that the function returns the pound sign (#) followed by an A and the array representation with its cells initially set to nil. To access the contents of cells, we use the function aref which takes two arguments, the name of the array and the index value. Since the cells are indexed starting at zero, an index value of 9 must be used to retrieve the contents of the tenth cell. ->(aref myarray 9) . . . . -. NIL To store items in the array, we use the function setf as we did above to store properties on a property list. So, to store the items 25, red, and (sam sue linda) in the first, second, and third cells of myarray,we