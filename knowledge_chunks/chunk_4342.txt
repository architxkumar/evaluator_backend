presented here is often more efficient than the structural approach taken by the second, But the second is more flexible and more extensible. Regardless of the way that classes are to be described, it is often difficult to construct, by hand, good class definitions. This is particularly true in domains that are not well understood or that change rapidly. Thus the idea of producing a classification program that can evolve its own class definitions is appealing. This task of constructing class definitions is called concept learning, or induction. The techniques used for this task must, ' of course, depend on the way that classes (concepts) are described. If classes are described by scoring functions, then concept learning can be done using the technique of coefficient adjustment described in Section 17.4.1. If, however, we want to define classes structurally, some other technique for learning class definitions is necessary. In this section, we present three such techniques. 17.5.1 Winston s Learning Program Winston [1975] describes an early structural concept Concept Near Miss learning program. This program operated in a simple blocks world domain. Its goal was to construct House Ad jd a representations of the definitions of concepts in the blocks domain. For example, it learned the concepts House, Tent, and Arch shown in Fig. 17.2. The figure also shows an Tent We ce example of a near miss for each concept. A near miss is | an object that is not an instance of the concept in question but that is very similar to such instances. Arch Tr ao The program started with a line drawing of a blocks world structure. It used procedures such as the one Fig. 17.2 Some Blocks World Concepts described in Section 14.3 to analyze the drawing and construct a semantic net representation of the structural description of the object(s) .This structural description was then provided as input to the learning program. An example of such a structural description for the House of Fig. 17.2 is s