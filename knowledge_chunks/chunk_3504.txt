ternatives in the bottom group of Figure 12. 10, including the symbol @ which is a terminal symbol placeholder for form. The function SETR causes the contents of the indicated registers to be set equal to the value of the corresponding form. This is done at the current level in the network, while SENDR causes it to be done by sending it to the next lower level of computation. L(FR returns information to the next higher level of computation. The function GETR returns the value of the indicated register. and GETF returns the value of a specified feature for the current input word. As noted before. the value of @ is usually an input word. The function BUILDQ takes lists from the indicated registers (which represent fragments of a parse tree with marked nodes) and builds the sentence structures. An ATN network similar to the RTN illustrated in Figure 12.9 is presented in Figure 12.11. Note that the arcs in this network have some of the tests described above. These tests will have the basic forms given in Figure 12.10, together with the indicated actions. The actions include building the final sentence structure which may contain more features than those considered thus far, as well as certain semantic features. Using the specification language, we can represent this particular network with the constituent abbreviations and functions described above in the form of a LISP program. For example, a partial description of the network is depicted in 252 Natural Language Processing Chap. 12 PUSH(NP) CATt Y) PUSH(NP) S S pop :2 PUSH(NP) c Alivi POP (a) lop lesel ATN CAT(ADJ PUSFBPPI N CAT(OET( NP Pop C R( Pop (bfr Noun phrase subnetwork CATi PREP) PUSH(NP) PP (c) Preposinona) phrase network Figure 12.11 Augmented transition network. Fig ure 12.12 (where T in the expressions is the equivalent of non-nil or true in LISP). From the language of Figure 12.12. it can be seen that the ATN begins building a sentence representation in which the first constituent is either type declarativ