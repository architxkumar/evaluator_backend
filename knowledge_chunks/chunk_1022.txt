belling each word in the input sentence with their POS tags. The number of such possible labellings (see Level 1 in Figure 16.8) is a function of the number of POS tags each word can potentially take. In the next step, the rules of the grammar are used to match the POS tags with the right hand side of the grammar rules. This results in the trees in Level 2. The process is continued with each level attempting to find rules whose right hand sides match the leaves of the trees in the earlier level. For a syntactically correct sentence, the process terminates when we have one or more trees rooted in S. The bottom-up parser is inefficient, in that it generates trees that can never lead to an S. In contrast, the top-down parser sometimes produces trees that have no hope of matching the POS tags of the words in the sentence. Taking cues from the analogy of packing bags, it makes sense to exploit the best of both approaches. An idea called bottom-up filtering does just that. The basic idea is to preprocess the grammar rules and list out the potential left corner POS tags for each nonterminal in the grammar. For example, given the grammar in Figure 16.6, for a string to be a Noun Phrase (NP), it needs to start with one of the following POS tags: Noun, DET or PRON. These define the left corner of NP. A topdown filter can exploit this information and filter out expansions that do not correspond with the POS tags of the input sentence. In the example in Figure 16.8, the expansions originating from S NP VP in Level 1 clearly have no chance of leading to valid parses and thus are eliminated using bottom-up filtering. Level 0 Fix the bugs. N DET N V DET N Level 1 Fix the bugs Fix the bugs NP NP vP NP b w aN Level 2 N DET N V DET N Fix the bugs Fix the bugs nr : : VP NP Final Parse V DET N bot Fix the bugs Figure 16.8 Bottom-up parsing. Statistical Parsing It is next to impossible to come up with a perfect grammar that accepts all English sentences that people find acceptable, and 