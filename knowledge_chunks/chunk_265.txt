rule that suggests a strategy in play, known as a Bath coup. The strategy is applicable only in certain situations. (p try-bath-coup card-ranx played leac player west suit suit rank 2 -(lead-trick cf suit solidity suit suit rankclass 1 cards 1 solidity suit suit rankclass 4 cards 1 sequence-is plays west after scuth ) card-ranx suit suit player south ranx 4 played ac) holding suit suit hre 1 length 2) (holding player south suit suit length 2 tricks leeway 1) (write tecorc ..let me try a bath ccup..) (make encourage suit ) (make lead-trick at suit:) (make Gucx rouncs 1 of suit )) tule-priority try-bath-ccup apporents sazc) The following rule takes over after all players have played a card, and decides the winner of the trick. p decicing-winne context fox playing) four cards over) f follew-suit te ( suit spades hearts ciamonds clits ciarrent-trick suit ( suit spades hearts ciamends clubs card card rank rank playes winner ) -(cturrent-trick suit suit rank rank ) trick number 2 ) -- make wirne of-trick n player winner card card suit suit ) write zecezdc (czlf (tabto 20) TRICK n WAS WON BY winnex cx 1f) tabte 20 WITH THE eard OF suit (crlf)) remove f )) rale-priority deciding-winner tzrick-acccunting) 6.6.5 Matching Rules with Data Let us now turn our attention to the most demanding task that the inference engine has to do. This constitutes constructing the Conflict Set from which the rule to be executed will be chosen. For the sake of completeness, it must pick all the matching rules with all matching permutations of data. Consider the rule with the following LHS: p some-rule card-tanz sank 1) some acticns) Then given a pack of 52 cards, it will match all cards that are not aces, that is, 48 of the 52 cards. Thus, 48 instances of this rule will find their way into the Conflict Set. Also, the matching algorithm will have tried this rule on all 52 cards and selected 48 out of them. If our algorithm is a simple brute force algorithm then in fact, the rule would have tried 