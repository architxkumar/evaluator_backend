 enough. But 100! is a much bigger number. The following output from a simple Lisp? program shows the number. (factorial 100) 9332621544394415768169923885626670049071596826438162146 8592963895217599993229915608941463976156518286253697920 827223758251185210916864000000000000000000000000 This number is larger than 10157 and clearly it is impossible to inspect all possible tours in a hundred-city problem. Thus, the general case of TSP is a prime candidate for applying stochastic (randomized) local search methods. While inspecting all candidates is not going to be an approach, (using techniques of dynamic programming, one can solve the problem exactly in time O(2")) the TSP problem has been shown to be NP-hard (Gary and Johnson, 1979). Exact solutions are hard to find for a given large problem, and thus it makes it difficult to evaluate one s algorithm. A library of TSP problems TSPLIB" (Reinelt, 2004) with exact solutions is available on the Web. An exact solution for 15, 112 German cities from TSPL B was found in 2001 using the cutting plane method proposed by George Dantzig, Ray Fulkerson and Selmer Johnson in 1954, based on linear programming (Dantzig, 1954). The computations were performed on a network of 110 processors. The total computation time was equivalent to 22.6 years on a single 500 MHz Alpha processor. In May 2004, the travelling salesman problem of visiting all 24,978 cities in Sweden was solved: a tour of approximately 72,500 kilometres was found and it was proven that no shorter tour exists. In March 2005, the travelling salesman problem of visiting all 33,810 points in a circuit board was solved using Concorde (Cook, 2006). A tour of length 66,048,945 units was found and it was proven that no shorter tour exists. The computation took approximately 15.7 CPU years" . Stochastic Local Search (SLS) methods (Hoos and Stutzle, 2005), on the other hand, can find very good solutions quite quickly. For example, for randomly generated problems of 25 million cit