red in the entry for ate would add the INGEST structure, and also the rules needed to find fillers for the slots in the structure with semantically matching concepts. Requests when nominals or PPs are read would be to add the appropriate structures to the C-list. For example while reading the sentence Amit ate an apple first the single request that would be activated is REQUEST - TEST: T ACTIONS: Add the structure (PP CLASS (HUMAN) NAME (Amit)) to the C-List This would get activated as soon as Amit is read, and the structure (PP CLASS (HUMAN) NAME (Amit)) would be added to the C-list. When the word ate is read next, the structure for INGEST would be added, and the two requests added to R- ist. The parser would then look for the human PP structure in the Clist andziriovedbito the ACTOR slot. The next word the parser would read is an . The following request stored with the word an is added to the Belistee. Eom REQUEST - TEST: Has a new structure been added to the end of the C-list? ACTIONS: Mark it as an indefinite reference. When it is added it does not find any structure in the C- ist and the parser goes on to read the word apple , REQUEST - TEST: T ACTIONS: Add the structure (PP CLASS (FOOD) NAME (apple)) to the C-List This now activates the rule for an which modifies the structure to (PP CLASS (FOOD) NAME (apple) REF (INDEF)) This modified structure is now taken up by the other request for INGEST that is looking for food type object, and it inserts it into the OBJECT slot of INGEST. The final conceptualization is, (INGEST ACTOR ((PP CLASS (HUMAN) NAME (Amit))) OBJECT ((PP CLASS (FOOD) NAME (apple) REF (INDEF))) TIME (PAST)) A simple algorithm to parse sentences is to read the words one by one, retrieve the set of rules associated with the word and add them to the R-list, and then apply the rules that are activated. An outline is depicted in Figure 13.8 where we have not considered multiple word senses. If multiple word senses are allowed more sophisticated process