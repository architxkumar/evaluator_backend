rogress of the AO algorithm. At each stage, the algorithm goes down the marked path and expands the node shown in bold. The backed-up values in the nodes are the best known cost estimates for that node, backed up after each expansion. After the last node in the above sequence is refined, the algorithm terminates with a solution as shown in Figure 6.12. The cost of the solution found is 8, but the heuristic functions in many places had much higher estimates. An overestimating heuristic function makes the search opinionated. It refuses to consider unseen alternatives because it estimates them to be worse. In the process, it may miss better solutions. For example, the AO graph has a better solution costing 7 units which the algorithm misses. Algorithm AO ( 1 uses a graph G instead of open and closed 2 the graph G is initialized to the start node stert 3 Ge stert 4 Compute A(start 5 while stert is not labeled SOLVED AND A(start) Futility do Facility is the maximum cost solution acceptable 7 Forward phase 8 race the marked path leading tc a set U cf unexpanded nodes a Select node n from U 10 chiidren successors cf a 11 if children is EMPTY 12 then k(n) Futility 13 else Checx for looping in members of children 16 Remove any looping members 15 for each s children 1 ao Acc s to G 17 if s is primitive 13 then Label s SOLVED 1s Compute A(s) could be zere s 20 Propagate Back 21 bet Mbe the set cf nodes that are modified 22 Meo 23 while Mis not EMPTY 24 do Select deepest node d from M, and remove it from M 25 Compute best cost of a from its children 26 Mark best cption at d as MARKED 27 if all nodes connected through marked arc are labeled SOLVED 23 then Label d as SOLVED 25 if has changed 30 then Add all parents of d to M 31 if star is maxked SOLVED 32 then return marked subgraph starting at start 33 else return FAILURE Figure 6.9 Algorithm AO . The way to ensure that the optimal solution is found is by making sure the heuristic function underestimates the cost of solving a no