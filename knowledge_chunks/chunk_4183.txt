d have other useful side effects and we found that one did. So we now pop ON(B, D) off the goal stack. We then do one last check of the combined goal ON(C, A) A ON (B, D) A ONTABLE(A) A ONTABLE(D) to make sure that all four parts still hold, which, of course, they do here. The problem solver can now halt and return as its answer the plan 1. UNSTACK(B.A) 2. STACK(B,D) 3. PICKUP(C) 4. STACK(C, A) In this simple example, we saw a way in which heuristic information can be applied to guide the search process, a way in which an unprofitable path could be detected, and a way in which considering some interaction among goals could help produce a good overall solution. But for problems more difficult than this one, these methods are not adequate. 260 Artificial Intelligence ee eed To see why this method may fail to find a good solution, we attempt to solve the problem shown in Fig. 13.5.? There are two ways that we could begin solving this problem, corresponding to the goal stacks ON(A, B) ONG@, C) ONG, C) ON(A, B) ON(A, B) A ONG, C) ON(A, B) A ON(B, C) 0) [2] A c [3] Al [3] c start: ON(C, A) A goal: ON(A, B)A ONTABLE(A) A ON(B, C) A ONTABLE(B) A ARMEMPTY Fig. 13.5 A Slightly Harder Blocks Problem Suppose that we choose alternative 1 and begin trying to get A on B. We will eventually produce the goal stack shown in Fig. 13.6. ON(C, A) CLEAR(C) ARMEMPTY ON(G, A) A CLEAR(C) A ARMEMPTY UNSTACK(C, A) ARMEMPTY CLEAR(A) \ ARMEMPTY PICKUP(A) CLEAR(B) A HOLDING(A) STACK(A, B) ON(B, C) ON(A, B) A ON(B, C) Fig. 13.6 A Goal Stack We can then pop off the stack goals that have already been satisfied, unti} we reach the ARMEMPTY precondition of PICKUP(A). To satisfy it, we need to PUTDOWN(C). Then we can continue popping until the goal stack is ONG, C} ON(A, B) A ON(B, C) Then the current state is ONTABLE(B) A ON(A, B) A A ONTABLE(C) A cl{s| ARMEMPTY *This problem is often called the Sussman Anomaly, because it was carefully studied in Sussman [1975}. Planning 261 The sequence of operator