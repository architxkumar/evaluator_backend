tate space methods described above, there is no restriction on the order in which actions are added to the plan. Since state space methods focus on the state, or on the goal which is a partial state description, the search methods look at ways to go to neighbouring states that are one move away. Thus, states are explored in a linear fashion, and the plans, which are themselves linear structures, grow linearly, being extended at one of the two ends. Plan space planning approaches work with plan structures, and have the ability, in principle, to modify or extend any part of a plan. That is why these methods are also known as nonlinear planning methods. Because of the fact that they can modify any part of a plan, the plan space planning approaches are not constrained to focus on any one subgoal continuously. They can shift attention midway, and in the process often solve problems, like the Sussman anomaly correctly as shown in Figure 7.13. The start node for search in plan space planning is the empty plan Mo. It is represented by two actions that we will call Ag and A... These two special actions will be part of every plan. The first, Ag, has no preconditions, and its effects are the predicates describing the start state. The second, A., has as its preconditions the goal predicates, and has no effects, as shown in Figure 7.14 (for the tiny planning problem from Figure 7.18). Thus, every planning problem will have a distinct start node that will capture both the start state and the goal description. RecursiveGSP(givenState, givenGoal, actions) 1 state givenState 2 goal givenGoal 3 plane () 4 while TRUE 5 do if Satisfies(state, goal) 6 then return plan 7 else Let R be set of relevant actions for goal 8 for each subgoal ge goal AND node 9 do 10 CHOOSE an action a in R- OR node ll if no such action exists 12 then return FAIL 13 subPlan RecursiveGSP(state, Preconditions(a), actions) 14 searches in the backward fashion 15 if subPlan FAIL 16 then return FAIL 17 else a determi