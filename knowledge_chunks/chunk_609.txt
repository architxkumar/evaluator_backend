d by the same representation. Both are constraint networks. They differ in the fact that the solution is a network that has no unsupported nodes. This is reminiscent of the Plan Space Planning (PSP) approach we studied in Chapter 7. The problem statement in PSP is an initial empty plan Ng made up of two actions that we will call Aj and A... There is a similarity in the planning process as well, which is driven by the resolution of flaws in the current plan. The input to the planning process need not be an empty plan, but could be an underspecified plan in which the planner has to remove some flaws. The operations for modifying plans that can be used for searching valid plans are of two types. Restrictions add new decisions to the plan or reduce the number of options remaining for existing decisions. If a compatibility rule requires an interval then one can (a) insert a new interval between two intervals of an attribute, along with implied ordering constraints, or (b) add constraints to an existing interval to satisfy the compatibility. In addition, one may insert an unsequenced interval on an attribute, or restrict the values that a variable can take. The inverse of these operations are relaxations. A major advantage of this uniform representation of actions, states, plans and goals is that plan repair becomes more feasible. Combined with the fact that the planner is required to produce a flexible plan instead of a rigid one, the prospect of executing the plan successfully in the real world, making small corrections where needed, become much more feasible. One introduces the notion of a sufficient plan to characterize the completeness requirements for the planning algorithm. The planning algorithm needs to build a plan only for a given planning horizon, for example, and may leave some variables to be instantiated at run time by the Executive. The interested reader is referred to the autonomy papers referred in this section for a detailed description of temporal plan