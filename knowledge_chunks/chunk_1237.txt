on (Training Set: T, Target Concept: C) 1S , , .., D 26 ?, ?, 2 ) 3 for each teT 4 if te Cc instance t is lebelled yes for class C 5 then for each geG 7 if g(t) no then remove g 8 for each seS 9 if s(t) no 10 then remove s 11 for each h H which has an ancestor in G 12 if parent(h,s) and h(t) yes 13 then S SU h 14 if there exist x, y in such that x ,y then remove y 15 else instance t is labelled no for class C 1 for each seS 17 if s(t) yes then remove s 18 for each geG 19 if g(t) yes 20 then remove g 21 for each h H which has a descendant in 22 if parent(g,h) and h(t) no 23 then Ge GU h 24 if there exist x, y in G such that x , y then remove x 25 return reconstructVS(G,S) FIGURE 18.9 The procedure Candidate-Elimination initializes the version space to the entire hypothesis space, represented by the general boundary G and the specific boundary S. Then, as it sees training instances, it moves both these boundaries closer to each other so that every hypothesis in the version space is consistent with the training set. The predicate parent(x, y) checks whether x is a parent of y in the more-general-than hierarchy depicted in Figure 18.7. The function reconstructVS interpolates between the two boundaries to construct the version space. Let us illustrate the algorithm with a few carefully chosen examples. The entire database from Table 15.3 is replicated in Table 18.3 with the numeric values of experience and salary replaced by the chosen nominal values. The algorithm begins by the initial boundary sets, Go ?, ?, ? and So O, B, The goal is to learn the hypothesis that described the concept VeryHigh, which is the set of employees with a very high salary. Table 18.3 The complete database from Table 15.3, converted to nominal values Abigail 1 Medium Bachelors No Low Abner M High Bachelors No High Acastus M High PhD No High Adoma ef Low Masters No Low Adria Ee Low PhD No Low Adrian M Medium PhD Yes VeryHigh Agatha F High Masters No High Agnar M Medium PhD Yes VeryHigh Aguidi F 