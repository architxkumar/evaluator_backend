 so far. Algorithm A does both. A uses an evaluation function f (node) to order its search. f (n) Estimated cost of a path from Start to Goal via node n. Let f (n) be the (actual but unknown) cost of an optimal path S n G as described above, of which f(n) is an estimate. The evaluation function has two components as shown in Figure 5.12 below. One, backward looking, g(n), inherited from B B, the known cost of the path found from S to n. The other, forward looking and goal seeking, h(n), inherited from Best First Search, is the estimated cost from n to G. f (n) g (n) h (n) f(n) g(n) h(n) FIGURE 5.10 Dijkstra s algorithm on the tiny search graph. e) 2 O O Best First only looks at the distance to the goal o O St art re) . Goal a e Figure 5.11 Best First chooses the node from OPEN closest to the goal. It may find a costlier path. where g (n) is the optimal cost from S to n, and h (n) is the optimal cost from n to G. Note that g (n) and h (n) may not be known. What are known are g(n) which can be thought of as an estimate of g (n) that the algorithm maintains, and h(n) the heuristic function that is an estimate of h (n). OPEN List FIGURE 5.12 For all nodes, the function f(n) is made up of two components, g(n) and h(n). In general, g (n) will be a lower than g(n), because the algorithm may not have found the optimal path to n yet. g(n) 2 g (n) The heuristic value h(n) is an estimate of the distance to the goal. In order for the algorithm to guarantee an optimal solution, it is necessary that the heuristic function underestimate the distance to the goal. That is, h(n) s h (n) We also say that h(n) is a lower bound on h (n). If the above condition is true then A is said to be admissible; that is, it is guaranteed to find the optimal path. We will look at a formal proof of the admissibility of algorithm A later in the chapter. Meanwhile, we illustrate with an example the intuition behind the condition that the heuristic function should underestimate the actual cost. Let an i