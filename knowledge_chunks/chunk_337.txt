nt, if a refinement contains no solution and try another subset. CA ( a, ) Figure 7.32 Refinement selects a subset of candidates. Subset A in the Venn diagram on the right contains the set of all solution plans, shown as a shaded subset. We say that a refinement step is progressive if the selected subset is a proper subset. In other words, a progressive refinement step always prunes the set of candidate plans. We say that the refinement is systematic, if no candidate is visited more than once in the process of backtracking. This implies that the refinement step induces a partition and selects one of the components. As we have seen during the study of search algorithms, a systematic search implies that the algorithm will be able to terminate reporting failure when a solution plan does not exist. Thus, one can think of the planner as successively selecting a subset of candidates, till it has only solution plans. For the sake of completeness, the planner should be able to backtrack and try other selections. We can see that the more knowledge the planner has access to, the more dramatic the pruning in the selected set of candidates, and the lower the need to backtrack. In the example of solving the Eight-puzzle with macros, the need to backtrack was totally eliminated. In a complete knowledge based system, a solution is simply reconstructed or retrieved from memory, in this case the macro-operator table. We shall look at the process of case based problem solving, which relies on storing and reusing experience, in more detail, later in Chapter 15. In practice, complete sets of solutions are rarely available, and case based systems have to contend with retrieving the best matching solutions available in the memory, and adapting them to the current problem. In some domains, it may be feasible to formulate heuristic rules to guide search, so that the chances of backtracking are minimized. The challenge, as a theme that we have been developing in this book, is to combine kno