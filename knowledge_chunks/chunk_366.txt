umns and diagonals available to MIN) We look at the progress of the search to understand the need to prune search, shown in Figure 8.22. The algorithm starts with MIN child A by placing a cross in a corner. The MIN node A looks at all children and evaluates to a value 1. Note that while there are seven successors of A, only the five distinct ones are shown in the figure. Now the root has a 1, which means that it will not go lower than 1. In the figure, this is expressed by the inequality a 1. It then turns to MIN child B. The first successor of B sends back a value 1, which becomes an upper bound on the value of B. Since this is an upper bound and the root is already getting a value 1, the root is not going to be influenced by B, and the rest of the tree below B can be pruned away. Note that even with k-ply search, where k is larger, the same pruning will happen as long as the backed-up values are as shown. It is also important to note that a node can be pruned only after it has been partially evaluated. We call the pruning shown in the above figure an a cutoff. An a cutoff occurs below a B node, when it is constrained to evaluate to a lower (or equal) value than the a value above it. Correspondingly, when an a node has a lower bound (a value) that is higher than the 6 value of an ancestor than the rest of the tree below, it is pruned. This is known as a B cutoff. In fact, this conflict between the bounds of two nodes need not be between a parent and child only. As described in (Pearl 1984), the Alpha node J in Figure 8.21 (with value aq) will influence the root, only if it is greater that all the a values in the (Alpha) ancestors, and smaller than all the B values in the (Beta) ancestors. That is, the value V(J) of a node J must satisfy, a VJ) B oA i Xs of 4 ar, ee ee an a I x I ID t ! 1 t 0 1O FIGURE 8.22 After evaluating the child A, the root node gets an a value of 1. When it starts on move B, it sees a B value of 1. Since this is an upper bound, the node B does