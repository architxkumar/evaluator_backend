an mgu exists such that two or more literals within a clause are unified, the clause remaining after deletion of all but one of the unified literals is called a 66 Formalized Symbolic Logics Chap. 4 Ju tar of the original clause ihus, given the clause C = P(.r) V Q(.v) V P(jl:)) the factor C' = (13 = P(f (:)) V Q)fl:l,v) is obtained where 3 = Let S be a set of expressions. We define the disagreement set of S as the set obtained by comparing each symbol of all expressions in S from left to right and extracting from S the subexpressions whose first symbols do not agree. For example, let S = P(J(.r),'lv).a), 1'J) i),:,al, !'l J(.r),b,h(u)). I-or the set S. the disagreement set is (i(v)a.h,:,hl u)} We call state a unification algorithm ss hieh returns the m2u for a given set of expressions S Unification algorithm: I. Set A = 0 and u e the empty set). 2. It the set Su is a singleton then stop: it, is an itigli ' S. ( )tlierwise find the disagreement set I) of Sir 3. If there is a variable i' and termi in D4 such that i' does not .'eclir iii t, put = (rl/ t}. set L k4 1. and return to step 2. Ohrss se stop. S is not unifiable. 4.7 THE RESOLUTION PRINCIPLE We are now ready to consider the resolution principle, a syntactic inference procedure which, when applied to a set of clauses, determines if the set is unsatisfiable. This procedure is similar to the process of obtaining a proof by contradiction. For example, suppose we have the set of clauses (axioms) Cl. C,, . . . , C. and we wish to deduce or prove the clause 0, that is. to show that 0 is a logical consequence of C1 & C & . . . & C,,. First, we negate 0 and add !) to the set of clauses Cl, C,, . . . . C_ Then, using resolution together with factoring, we can show that the set is unsatisfiable by deducing a contradiction. Such a proof is called a proof by refutation which, if successful. yields the empty clause denoted by 11.2 Resolution with factoring is eu,np/eu' in the sense that it will alssays generate the empty 