ication and determining the offending nodes. This is in contrast to the naive backtracking approach which would search a deduction tree sequentially, node-by-node until the contradictory node is reached. Backtracking directly to the node causing the contradiction is known as dependency-directed backtracking (DDB). This is clearly.a more efficient search strategy than chronological backtracking. This process is illustrated in Figure 5.4 where it is assumed that A and D are contradictory. -By backtracking directly to IN ou IN OUT IN IN IN Figure 5.3 Typical fragment of a belief network. 86 Dealing with Inconsistencies and Uncertainties Chap. 5 // \ / // ,I C ( \F) F F E F Figure 5.4 Dependency-dirccted backtracking in a TMS. the source of a contradiction (the dashed line from E to A), extra search time is avoided. CP justifications are used less frequently than the SLs. They justify a node as a type of valid hypothetical argument. The internal form of a CP justification is as follows: (CP <consequent> <inhypotheses><outhypotheses>) A CP is valid if the consequent node is IN whenever each node among the in-hypotheses is IN and each node among the out-hypotheses is OUT. Two separate lists of hypotheses are used, since nodes may be derived from both nodes that are IN and other nodes that are OUT. CPs correspond to conditional proofs typically found in deduction systems. The hypotheses used in such a conditional proof correspond to the in-hypotheses in the CP. Since the functions of the CP are somewhat complex, we clarify their main functions with an example. Suppose a system is being used to schedule aircraft and crews for commercial airline flights. The type of aircraft normally scheduled for a given flight is a 737, and the crew required is class A. The nodes and justifications for these facts might be n I IN type(aircraft) = 737 (SL () (n2)) n2 OUT type(aircraft) = L400 n3 IN class(crew) = A (SL (n8, n22) ) where the justifications for n is n2 (with OUT status) and fo