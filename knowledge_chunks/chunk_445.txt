iversal relation. One must keep in mind that these binary relations are all symmetric. The black nodes in the matching diagram are the ones that emerge as consistent triangles in this call. The dashed edges between D, and Dy in the figure on the left are the ones removed by the call Revise-3((x, y), z). Of the two surviving edges, between the domains of x and y, the dashed one in the figure on the right would get removed, if a subsequent call to Revise-3((x, y), W) were to be made. The first two edges were deleted because they did not have a corresponding value in Dz and the third one because there was no matching value in Dy. , D,. FIGURE 9.17 From the matching diagram on the left, a call to Revise-3((x, y), Z) removes the two edges shown in dashed lines. Of the remaining two edges between D, and Dy in the figure on the right, the dashed edge will get removed by a call to Revise((x, y), w). Note that neither diagram is arc consistent. The objective of path consistency is to arrive at a matching diagram of all variables, such that any edge between any two variables forms triangles with values in all other domains. The simple procedure to achieve path consistency PC-1 is analogous to the procedure AC-1. It makes calls to all possible combinations of variable pairs with all other variables, till no relation is pruned further. The algorithm is given in Figure 9.18. PC-1 (X, D, C) 1 repeat for each zeXx for each x X and each yeX s.t. x y z Ry Revise-3(Dy, Ryyr Rear Rey) until no domain is changed return (X, D, C) arg om wh FIGURE 9.18 The algorithm PC-1 takes as input a CSP and returns an equivalent CSP that is path consistent. It calls algorithm Revise-3 with all triplets in the constraint graph, till quiescence is reached. The output CSP contains pruned sets of relations. The algorithm PC-1 looks at all pairs of variables, irrespective of whether there is an explicit constraint between them or not. This is because the absence of a constraint is equivalent to a univers