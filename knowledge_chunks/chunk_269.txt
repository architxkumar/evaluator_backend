he notion of an alpha node. In this figure, there are three alpha nodes and two example tokens. token in class card-rank ve 4 (card-rank player north . Player south Player north Figure 6.20 Alpha nodes, shown in the tree structure, test for conditions of attributes. In the figure, the two tokens, shown in dashed boxes, will reside at the two nodes as shown. The first token (card-rank player east) satisfies the attribute test for class card-rank, but does not match the values of the attribute player for any of its children. It will thus stay here, and never match any rule in this network. The second token matches two tests in the discrimination tree. If some other attribute s value in this token matches some child, it will travel further down the tree. After the tokens have traversed across all alpha nodes, they encounter beta nodes in the lower part of the network. The lower part of the network is an assimilative network made up of nodes called beta nodes. Each beta node, shown as circles in Figure 6.21 below, pulls tokens from its two ancestors without performing any check. If there is more than one beta child of a node, each gets a copy of the token. However, it lets the token go forward only if it can pair up with a matching token from the other branch. The two tokens match if any variables shared by the two patterns are bound to the same values. For example, if the two tokens that arrive at node B, (as shown) are, t (cazd-rank player south) , and (turn of south) then the beta node B, packs the two into a larger token and allows it to pass, when the node By pulls the compound token, and waits for another token from the left branch. Meanwhile, even node B3 pulls a copy of the token (card-rank player south) from the parent alpha node, but it has to wait for a token to arrive from its other parent Bz. When a matching token does arrive then Bz would have assembled the complete matching LHS for rule RuleName. The rule can then be added to the Conflict Set. Each alpha 