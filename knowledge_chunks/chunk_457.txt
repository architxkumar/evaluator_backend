bserve that after a call to Revise-3(De, Rcp, Rce, Rep), the relation Rep is introduced into the constraint graph, and after a call to Revise3(De, Rep, Ree, Rep), the relation Rgp is introduced. Next, when algorithm DPC moves to process node D, it must be aware of these two new edges to be able to prune the relation Rgc if needed. ir b, g ir,b tr, b,g th, g ir Rac (r.7). (7, 6). (7.8) (b. ) (6, 8), (8, 89 von A Rep A(r. 6). (rg). (b, 6), (6. 8), (6). (8. 8) (A - B ) () ) E) Rap (1. 6), (7.8). (6, 6), (6. 8) N 7 ing b tb, g 4b, g tr Rec (b,b),(b,8) GE ay ; Rep (b. 8). (b.8). (8-6). .8) ) )-( )---( - E) Rep (6, 5), (6, g) : : - J FIGURE 9.24 Another map colouring problem with a chosen ordering and the domains shown on the top. The revised domains and relations after calls to DPC and DAC at node E are shown below. Note that while the original relations depicted by solid edges are the not-equal relation, the new one s shown with dashed edges allow certain combinations of colour including the same ones. The revised domains and relations after DPC and DAC are enforced and are shown below the arrow in the figure. The algorithm DPC described below includes the DAC step. DPC (X (x ,, g, 1 ,)- D, C) 1 initialize (i, 7) x., x3 is the scope of some relation 2 for k n downto 2 3 do for each i j k such that (i, j), (3, k) E 4 Ri; Revise-3(D,, Rizr Rix Ry) Ss ECeEY (i, 35) cecy ( i, 5 , Riz 7 do for each i xk s.t. ( i, kK , Ry) C 8 D, Revise(D:, Dy, Rix) 9 return (X, D, C) FIGURE 9.25 The algorithm DPC takes as input a CSP with an ordering on its variables and returns an equivalent CSP after enforcing directional path and arc consistency. It may add new edges to the constraint graph, and therefore new explicit constraints. The complexity of DPC is O(n k?), where n is the number of variables and k the size of each domain. For the last variable in the worst case, it has to look at (n 1) (n 2) or O(n?) pairs of variables. Each pair of variables may have at most k? edges, for each of 