n average, they improve the quality of the paths that are explored. Using good heuristics, we can hope to get good (though possibly nonoptimal) solutions to hard problems, such as the traveling salesman, in less than exponential time. There are some good general-purpose heuristics that are useful in a wide variety of problem domains. In addition, it is possible to construct special-purpose heuristics that exploit domain-specific knowledge to solve particular problems. One example of a good general-purpose heuristic that is useful for a variety of combinatorial problems is the nearest neighbor heuristic, which works by selecting the locally superior alternative at each step. Applying it to the traveling salesman problem, we produce the following procedure: 1. Arbitrarily select a starting city. 2. To select the next city, look at all cities not yet visited, and select the one closest to the current city. Go to it next, 3. Repeat step 2 until all cities have been visited. This procedure executes in time proportional to N?, a significant improvement over N , and it is possible to prove an upper bound on the error it incurs. For general-purpose heuristics, such as nearest neighbor, it is often possible to prove such error bounds, which provides reassurance that one is not paying too high a price in accuracy for speed. In many AI problems, however, it is not possible to produce such reassuring bounds. This is true for two reasons; For real world problems, it is otte hard to measure precisely the value of a particular solution. Although the length of a trip to several cities + a precise notion, the appropriateness of a particular response to such questions as Why has inflation sncreased? is much less so. For real world problems, it is often useful to introduce heuristics based on relatively unstructured knowledge. It is often impossible to define this knowledge in such a way that a mathematical analysis of its effect on the search process can be performed. There are many 