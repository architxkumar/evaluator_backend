so on. Rules in PROLOG are composed of a condition or "if' part, and a conclusion or "then" part separated by the symbol :- which is read as "if' (conclusion if conditions). Rules are used to represent general relations which hold when all of the conditions in the if part are satisfied. Rules may contain variables, which must begin with uppercase letters. For example to represent the general rule for grandfather. we write grandfather(X.Z) :- parent(X,V), parent(Y.Z). male(X) This rule has the following meaning: For all X, Y, and Z. X is the grandfather of Z Sec. 3.8 Prolog and Other Al Programming Languages 41 IF Xis the parent of Y. and Y is the parent of Z, and X is a male Note that separate conditions in the rule are separated by commas. The commas act as conjunctions, that is, like and statements where. all conditions in the righthand side must be satisfied for the rule to be true. Given a data base of facts and rules such as that above, we may make queries by typing af,er the query symbol -? statements such as 7 parent(X,ssm) X-ann ?- male(joe) yes ?-grandtather(X,Y) Xjoe, Ysam ?-female(jo ) no Note that responses to the queries are given by returning the value a variable can take to satisfy the query or simply with yes (true) or. no (false). Queries such as these set up a sequence of one or more goals that are to be satisfied. A goal is satisfied if it can be shown to logically follow from the facts and rules in the data base. This means that a proper match must be found between predicates in the query and the database and that all subgoals must be satisfied through consistent substitutions of constants and variables for variable arguments. To determine if a consistent match is possible. PROLOG searches the data base and tries to make substitutions until a permissible match is found or failure, occurs. For example, when the query ?.grandf ather(X sam) is given, a search is made until the grandfather predicate is found in the data base. In this case, it is the 