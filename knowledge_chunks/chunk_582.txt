er because its at-end condition will not be met, and neither can it schedule it at the latter time point because its at-start condition is not met. ceeeeeeerstrett Cooking-On Cooked SpreadGhee Cooking-On Cooking-On --- - Cooked---"" a Cooking-On ier Cooked Cooking-On Cooked FIGURE 10.25 The required concurrency for the two actions Chapati and SpreadGhee needs the SpreadGhee action to straddle the end of the Chapati action. Reasoning with snap actions facilitates the interleaving that is required. CRIKEY3, on the other hand, differs in its approach in two ways. It works with the snap actions separately and secondly, it defers the actual scheduling to a second stage. Because it works with the snap actions independently, it is able to find the correct sequence (C SG, C SG ) as shown in the lower part of the figure. And because it fixes the actual times later, it is not faced with the problem of when exactly to start the SpreadGhee action. The action durations will force the scheduler to schedule it at a time point (in the case 4.5 ) not accessible to a planner that selects and schedules actions at the same time. This behaviour is in fact reminiscent of the way plan space planning was able to find an optimal plan for the Sussman anomaly by not confining itself to one subgoal On(A, B) or On(B, C) before the other (see Figure 7.13). The algorithm PSP (Figure 7.17) was able to separate the concerns of selection and sequencing of actions. In fact, CRIKEY3 begins by abandoning the total order on actions created during the first phase and reconstructing a partial order based on maintaining causal links between actions including the ordering between start and end actions, and the need to protect conditions from being undone by some actions in a manner similar to plan space planning. The interested reader is referred to (Coles et al., 2009) for more details. A more explicit separation of the sequencing of actions from their selection is implemented in the system POPF (Coles et 