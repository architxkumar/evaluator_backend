ete. Distributed reasoning systems exploit a wide variety of synchronization techniques to guarantee this, ranging from simple ones (e.g., in which the printing process does not begin until all the spelling correctors are done and have so informed the master) to more sophisticated ones in which the slave processes communicate directly with each other (e.g., the spelling correctors each inform the printer when they have finished). These more sophisticated techniques require that each slave agent be told some information about the other slaves at the time that it is given its task. For relatively simple tasks, such as the one we just described, the various agents can communicate effectively with each other just by announcing when operations have been completed. For other kinds of tasks, though, it is not enough to know when an agent has completed its task. It may also be necessary to know what state the system is in during task execution. For example, suppose that there is a single resource that the various agents share, such as an input or output device. Then one agent may want to know whether any other is currently using the device. To support this kind of interaction, it is useful to introduce a state-based model, such as that Parallel and Distributed Al 339 described by Georgeff [1983; 1984]. In this kind of a model, each available action is characterized as a sequence of state changes that it effects. The various agents may share a single model, which they all update as necessary, or they may each have their own model, in which case they must also inform all other relevant agents whenever they make a change to their internal state that could be important externally. Planning and Negotiation: Contract Nets A slightly more distributed kind of reasoning occurs when a single agent performs the problem decomposition but then negotiates with the other agents to determine who will take on which subtasks. The contract net mechanism [Davis and Smith, 1983] supports this k