 Till the time stamp advances to the at-end effects, the action can be thought of as being executed . (start) State , SwitchOn(S3) 1 0 (lighted ,), 03) 1 0 (lighted 3), ) AdvanceTime SwitchOn(S)) AdvanceTime 2 pasts atinses ghted S,), 0.3 ) 4 0.3 P (lightes SwitchOn(S) penne Pe- (ighted 1) ) w KaliDal(S YY AdvaneeTime aliDal(S)) ieee (.) iY a (Qr (eooked Dal), 45.3 ) ) f 08 Pe (cookingOn , Dal) Chapati(S2), FIGURE 10.23 The search space explored by Sapa. The operator augments the concerned list. After making this move, Sapa is in a new node its search space. In this node, it is free to choose any move. If it selects a new action to be added then this new actions is in parallel with the one it selected earlier, since the time stamp is still the same. We illustrate this with the planning task depicted in Figure 10.19, along with the additional operator of switching on the stove with duration 0.3 minutes. In the figure, only relevant additions to the search state are depicted. As one can see, in the start state it has two possible moves, switch S, on or switch Sp on. Whichever it selects, it will modify the event queue Q by adding Lighted(S,) or Lighted(S,) as the case may be. Let us look at the right branch, in which it switches Sz on. In the new search node it has two options, either switch S, on or advance time (since Q is not empty). If it chooses the former, shown as the left branch, it reaches a state in which it can only advance time. Once it selects that move, both the stoves are lighted at the same time, 0.3 minutes after start. The two actions have been done in parallel. If it had chosen the latter (right branch) then it would have ended up lighting the two stoves sequentially (if the stove S, is lit at all). Having both stoves lit, it can now start the cooking actions, shown as the four options in the resulting node. The Figure shows a path in which kali dal is being cooked on stove S; and chapati on Sz, and the time stamp is 0.3. The lowermost node in the f