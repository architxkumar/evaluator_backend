based systems. 6.2 LOGIC PROGRAMMING Logic programming is a programming language paradigm in which logical assertions are viewed as programs, as described in the previous section. There are several logic programming systems in use today, the most popular of which is PROLOG [Clocksin and Mellish, 1984; Bratko, 1986]. Programming in PROLOG has been described in more detail in Chapter 25. A PROLOG program is described as a series of logical assertions, each of which is a Horn clause.! A Hom clause is a clause (as defined in Section 5.4.1) that has at most one positive literal. Thus p, =p \/ g, and p g are all Horn clauses. The last of these does not look like a clause vx: peti) A smaliixd > apartmentpet( Y x: catx) \/ dog(x) -> pet{x) Vx: poodle(x) + dag(x) \ smai K(x) poodle( ftujfy) A Representation In Logic apartmentpet (x X) :- pet{X), small(x). pet({X) :- cat(X). pet{X) :- dog(X). dog(X) :- poodle (X) small(x X) :- poodle(x). poodle (fluffy). A Representation in PROLOG Fig. 6.1. A Declarative and a Procedural Representation Programs written in pure PROLOG are composed only of Horn clauses. PROLOG, as an actual programming language, however, allows departures from Hom clauses. In the rest of this section, we limit our discussion to pure PROLOG. 132 Artificial Intelligence and it appears to have two positive literals. But recall from Section 5.4.1 that any logical expression can be converted to clause form. If we do that for this example, the resulting clause is =p \/ g, which is a well-formed Hom clause. As we will see below, when Horn clauses are written in PROLOG programs, they actually look more like the form we started with (an implication with at most one literal on the right of the implication sign) than the clause form we just produced. Some examples of PROLOG Horn clauses appear below. The fact that PROLOG programs are composed only of Horn clauses and not of arbitrary logical expressions has two important consequences. The first is that because of the unif