m that finds a tour of length at most (1 1 c) times the optimal for geometric instances of TSP, which is a more general case of an Euclidean TSP. Special cases of TSPs can be solved easily. For example, if all the cities are known to lie on the perimeter of a convex polygon, a simple greedy algorithm, TSP-Nearest-Neighbour shown below works. 4.4.1 Constructive Methods Several constructive methods construct tours from scratch. We look at a few of them starting with the most intuitive nearest neighbour construction (Figure 4.12). TSPNearestNeighbour () 1 currentCity some startCity 2 tour List(currentCity) 3 while an unvisited city exists do neighbour NearestAllowedNeighbour(currentCity) 5 tour Append(tour, List(neighbour) ) 6 currentCity neighbour 7 xeturn tour cy FIGURE 4.12 The Nearest Neighbour Tour construction algorithm moves to the nearest neighbour (that has not been visited) at each stage. Function NearestAllowedNeighbour picks the nearest neighbour from the unvisited cities. The last segment back to the startCity is implicit. The complexity of the algorithm is O(bn), where n is the number of cities and b is the maximum degree of nodes (which is n 1 for fully connected graph). We can observe that for most greedy algorithms for TSP, the complexity is O(n). For TSP problems that satisfy the triangle inequality 2, it has been shown that the tour found by the nearest neighbour algorithm is not more than (log.(n) 1)'2 times the optimal tour cost (Rosenkrantz et al., 1977). In practice, the algorithm yields fairly good tours where there may be a few long edges that are added in the final stages. The reader can verify this by trying out the method on the problem shown in Figure 4.13. Observe that if the two extreme cities were not there, the cities would have satisfied the condition of being on a convex polygon, and the algorithm would have found the optimal solution. 2 e) 0 O FIGURE 4.13 A near polygon arrangement of cities. The distances are the Euclidean distances