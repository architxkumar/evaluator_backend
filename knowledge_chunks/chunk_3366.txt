ntence "Every-car has an engine' from its conceptual graph representation given by [CAR:Vl '-.(PART) (ENGINE] to its equivalent FOPL representation. Using the rules outlined above, the equivalent FOPL representation derived is just 134 Structured Knowledge: Graphs. Frames, and Related Structures Chap. 7 Yx 3y (CAR(x) -.(ENGINE(y) & PART(x.y))) Mapping the other way, that is from FOPL statements to conteptual graphs. begins by putting the FOPL formula into prenex normal form, and converting all logical connectives to negation and conjunction. Next, every occurrence of universal quantification Yx is replaced with the equivalent form 3x (in graph notation this with the subsequent addition of balancing brackets I I to close off the is [ V[ expression). Every variable x and every occurrence of 3r is then replaced with the most general type concept denoted as T:*x1. And finally, every n-ary predicate symbol is replaced with an n-ary concept relation whose ith arc is attached to the concept in the ith argument place in the predicate. Implication in a conceptual graph can be represented with negation and conjunction. For example, the FOPL equivalent of P -. Q can be written as (P 1Q11 (recall that P - Q = (P V Q) = (P & 'Q)). In this expression. ( is read as if and the nested [ is read as then. More generally, we write the implication as *peq] where *p and *q are themselves any conceptual graph. Inference can be accomplished by modifying and combining graphs through the use of operatots and basic graph inference rules. Four useful graph formation operators are copy, restrict, join, and simplify. These operators are defined as follows. Copy. Produces a duplicate copy of a CG Restrict.. Modifies a graph by replacing a type labei of a concept with a subtype or a specialization from generic to individual by inserting a referrent ut the same concept type. Join. Combines two identical graphs C, and C by attaching all relation arcs from C, to C, and then erasing C2. Simp!ify. Elim