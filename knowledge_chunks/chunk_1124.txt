 the inconsistency observed in the TMS. Instead, the algorithm traces back the justifications from the contradiction node and suggests that one of the other two assumptions needs to be retracted. Let us say that the second assumption Spoke(Barkha, Kapil) is retracted. The TMS does this by marking the node OUT. It then explores all the consequences of this change, looking for nodes that have no justification after the retraction. All such nodes are also marked OUT. The resulting network for our example is depicted in Figure 17.20. The nodes that are OUT are shown in shaded containers. Any nodes pointed to by the dashed arrows from these nodes would need to get their justifications checked too. 17.4.1 Assumption Based Truth Maintenance System The TMS system, as constructed by Jon Doyle, keeps one consistent network in its memory. Any assumption whose addition would lead to a contradiction and nodes justified only by it, are marked as out. However, in many problems, the reasoner may have to work with different, and often contradictory, assumptions simultaneously. During the reasoning process, it may have to work with different sets of assumptions alternately. The following simple example illustrates the case where different sets of assumptions can be made. Consider the following facts. 1 voke(Barkha, Kapil) lt Si iD) eT Kavi Sac Culprit(Singh) In( Spoke(Vir, Vinod) Ss easy r ne 7x ) milex,Doc,Delhi) In(Do , Da oc Cx Doe, 1 , y Patna) 1 ay Cnidee: en 5 NSS y Sy sy S aa Figure 17.20 On discovering a contradiction, a relevant assumption is retracted and the change propagated in the network. The nodes marked OUT are shown as shaded nodes. On(a, table), On(6, table), Ax(On(x, table) A Colour(x, blue)), dx(On(x, table) A Colour(x, green)), Vx(Colour(x, blue) Colour(x, green)) The following is then entailed, BColour(a, blue) BColour(b, green), BColour(a, green) BColour(b, blue), As discussed in Section 17.1.4, this knowledge base has two extensions. One in which block a is bl