MAX procedure as a recursive function, we must also specify how it is to be called initially. It takes three parameters, a board position, the current depth of the search, and the player to move. So the initial call to compute the best move from the position CURRENT should be MINIMAX (CURRENT, 0, PLAYER~ONE) if PLAYER-ONE is to move, or MINIMAX (CURRENT, 0, PLAYER-TWO) if PLAYER-TWO is to move. 2 This may be a bit confusing, but it need not be. In all the examples in this chapter so far (including Fig. 12.2 and 12.3), we have assumed that all values of STATIC are from the point of view of the initial (maximizing) player. It turns out to be easier when defining the algorithm, though, to let STATIC alternate perspectives so that we do not need to write separate procedures for the two levels. It is easy to modify STATIC for this purpose; we merely compute the value of Position from PLAYER-ONE s perspective, then invert the value if STATIC s parameter is PLAYER-TWO. 236 Artificial Intelligence Algorithm: MINIMAX(Position, Depth, Player) 1, If DEEP-ENOUGH( Position, Depth), then return the structure VALUE = STATIC(Position, Player); PATH = nil This indicates that there is no path from this node and that its value is that determined by the static evaluation function. 2. Otherwise, generate one more ply of the tree by calling the function MOVE-GEN(Position Player) and setting SUCCESSORS to the list it returns. 3. If SUCCESSORS is empty, then there are no moves to be made, so return the same structure that would have been returned if DEEP-ENOUGH had returned true. 4. 1f SUCCESSORS is not empty, then examine each element in turn and keep track of the best one. This is done as follows. Jnitialize BEST-SCORE to the minimum value that STATIC can return. It will be updated to reflect the hest score that can be achieved by an element of SUCCESSORS. For each element SUCC of SUCCESSORS, do the following: (a) Set RESULT-SUCC to MINIMAX(SUCC, Depth + 1, OPPOSITE(Piayer)) This recursi