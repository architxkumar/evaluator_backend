ply because the two strings are of equal length. If we were to pad the second string with a blank at the end to make them equal length, the Hamming distance between the two strings would now be 14, and with string length going up to 17 the similarity is, simy(S'1,S2) 1 14 17 0.176 As one can see, the Hamming distance based similarity has plunged with the addition of the extra letter. This is because the inserted letter has disrupted the alignment between the two strings that was high initially. The trigram based similarity, on the other hand, is much more robust. We have used the common trigrams as a measure of similarity. We can also treat each trigram as a word or term of text, and use the cosine similarity for text described in the language processing chapter. Symbol Attributes When a string stands for a symbol then it must be treated as an atomic element. Symbol type attributes occur in many domains. We can treat names of colours like red , orange and blue as symbols. Other examples are the names of days of a week, months in a year, the codes assigned to products like cameras, printers, etc. Symbol type attributes can be further classified into three types: ordered, unordered and taxonomic. Ordered Symbols Ordered symbol types may derive a notion of similarity from the nearness (or distance) between two symbols in the order. For example, the month of May could be considered more similar to April than to October. Similarity for ordered symbol types can then be computed, based on the index of the values in the order. Let Ao be an ordered symbol type attribute that can take values from the ordered set as Vo given below, Vao (V4, Va... Vr) The similarity between two values V; and V;, is given by SiMordered( ViVK) 1 (Ik - il) 1 (T- 1) Unordered Symbols Unordered symbols types may be treated in two ways. The simpler approach is to rely on equality. That is, 7 TM Unosderd4 V,, V;) 1 iff V,, Vi, 0 otherwise. However, in some domains, the symbols may stand for some thing