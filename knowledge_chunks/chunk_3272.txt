t us to make generalized statements about classes of similar objects. These are serious limitations when reasoning about real world entities. For example. given the following statements, it should be possible to conclude that John must take the Pascal course. All students in Computer Science must take Pasca L John is a Computer Science major. As stated, it is not possible to conclude in FL that John must take Pascal since the second statement does not occur as part of the first one. To dra the desired conclusion with a valid inference rule, it would be necessary to rev, rite the sentences. is FOPL was developed by logicians to extend the expressiveness of PL. It a generalization of PL that permits reasoning about world objects as relational entitles as well as classes or subclasses of objects. This generalization comes from he 56 Formalized Symbolic Logics Chap. 4 introduction of predicates in place, of propositions, the use of functions and the use of variables together with variable quantifiers. These concepts are formalized below. The syntax for FOPL, like P1, is determined by the allowable symbols and rules of combination. The semantics of FOPL are determined by interpretations assigned to predicates, rather than propositions. This means that an interpretation must also assign values to other terms including constants, variables and functions, since predicates may have arguments consisting of any of these terms. Therefore, the arguments of a predicate must be assigned before an interpretation can be made. Syntax of FOPL The symbols and rules of combination permitted in FOPL are defined as follows. Connectives. There are five connective symbols: (not or negation), & (and or conjunction), V (or or inclusive disjunction, that is, A or B or both A and B), -. (implication), -* (equivalence or if and only if). Quantifiers. The two quantifier symbols are 3 (existential quantification) and V (universal quantification), where (3x) means for some x or there is an x and (Y