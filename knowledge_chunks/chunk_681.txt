. bstitution is a set of (variable term) pairs, that signifies the replacement of the variables nding terms. The term should not contain the variable that it is replacing. A substitution is usually de ym the Greek alphabet. An example of a substitution is, 6 ?x Aditi, ?y tennis a formula g the formula g denotes the sentence obtained by applying the substitution 6 to the fc nple, if g Likes(?x, ?y) then applying the above substitution gives us the sentence g Lil ier for two formulas a and B is a substitution that makes the two formulas identical. We say that a unr er unifies a set of formulas a1, az, ..., an if, a,0 aoO ... ayO 9 all the common reduced form as the factor. Given a formula a and a formula B 6 we can modus ponens rule as follows. If a and B have a unifier 6 then infer 68 from a and (B D 6) if a (Sport(tennis) A Likes(Aditi, tennis)) B D 0 (Sport(?y) A Likes(?x, ?y)) D Watches(?x, ?y) 1 unifies with B with the substitution 6 ?x Aditi, 2y tennis given above, and one can infer 60 Watches(?x, ?y) Watches(Aditi, tennis) times there is a choice between several unifiers. Consider, for example if we had the rule that if a n nan or equal to another, then the other is larger than or equal to the former. Assuming that in our d umbers everything is a number (and we don t need a category number) we could express it in sk ollows. SmallerOrEqualThan(?x, ?y) D GreaterOrEqualThan(?y, ?x) Jiven the following fact what are the inferences one can make? SmallerOrEqualThan(0, ?z) niild wee the cinhetititinn wo f9y - N Py - 7 27 71 tn infer CreatearOrEqialThan(7 N We rn In the following discussion predicate symbols, logical operators, function symbols are all tr s, in the sense that they must match exactly. A variable, on the other hand, is one that can be subs g else (a term). We assume a function ength is available to determing 4ae-tengtbraf a list. Two lists d if they have the same length. The following algorithm is along the lines of the version pres k and McDermott, 1985