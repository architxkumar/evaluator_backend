s were domain dependent and the user was expected to define them. More recently, the idea of doing some analysis in a domain independent fashion has emerged. The idea is that for problems which are intrinsically hard, one can relax some constraints and solve a simpler version of the problem to estimate the cost of solving the original problem. Then, in a state space search scenario, one can do this analysis for all the candidate nodes and in effect compute a heuristic value for each state in a domain independent fashion. As shown in Figure 10.15 below, this heuristic function can help guide the search process in selecting the nodes most likely to lead to the goal. Thus, heuristic search planning is also a two stage process in which one alternates between a node selection phase (by solving the simpler problem) and a node expansion phase which generates the candidates. The key thing is that the secondary search on the simpler problem should be significantly inexpensive, preferably being a low order polynomial in complexity. FIGURE 10.15 (Reproduced from Figure 2.2). The heuristic function estimates the distance to the goal. The simpler problem to solve is usually a transformation of the planning problem into another planning problem in which the operators do not have delete effects. Given the planning problem P defined as a triple (S, G, O) where, Sis set of facts completely describing the Given or Start state, Gis a set of facts required to be true in a goal state, and Ois the set of operators we can define a new planning problem P by replacing the set of operators O with a set O . The set O contains the corresponding operators as the set O, except that there are no delete effects in any operator. For example, the operator PickUp, (:action pickup cparameters (2x -block) cprecondition (and (onTable ?x) (armempty) (clear ?x)) ceffect(and (not (armempty)) (holding ?x) (not (onTable ?x)))) is replaced by the operator PickUp-R, (action pickup-r parameters (2x -block) prec