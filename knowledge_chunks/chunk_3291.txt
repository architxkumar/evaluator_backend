,banana S) this is.a resolvent of Band 15 17. 'getort(x.chair) V 'tall(chair) V this is a resolvent of 11 and 16 with close(x,bananas) substitution (chair/y} 18. ge LOn(x,chair) V close(x,bananas) resolvent of 4 and 17 19. get.on(monkey,Chair) resolvent of 1 and 9 20. close(monkey,bananas) a resolvent of 18 and 19 with substitution (monkey/x) 21; close(monkey.y) V can-reach a resolvent of 10 and 5 with substitution (monkey,y) (monkey/x} 22. reach(monkey,bananas) a resolvent of 20 and 21 with substitution {bananasly} 23. II a resolvent of 13 and 22 In performing the above proof, no particular strategy was followed. Clearly. however, good choices were made in selecting parent clauses for resolution. Otherwise, many unnecessary steps may have been taken before completing the proof. Different for!ns of resolution were completed in steps 14 through 23. One of the exercises requires that the types of resolutions used be identified. The Monkey-Banana Problem in PROLOG Prolog was introduced in the previous chapter. It is a logic programming language that is based on the resolution principle. The refutation proof strategy used in PROLOG is resolution by selective linear with definite clauses or SLD resolution. This is just a form of linear input resolution using definite Horn clauses (clauses with exactly one positive literal). In finding a resolution proof, PROLOG searches a data base of clauses in an exhaustive manner (guided by the SLD strategy) until a chain of unifications have been found to produce a proof. Next, we present a PROLOG program for the monkey-banana problem to illustrate the ease with which many logic programs may be formulated. % Constants: % )floor, chair, bananas, monkey) % Variables: % IX, V. Z Predicates: (can-reach(X,Y) X can reach V dexterous(X) X is a dexterous animal close(X,V) X is close to V 72 Formalized Symbolic Logics Chap. 4 % get-on(X.V) X can get on V % under(X.V) X is under V % tall(X) X is tall % in-room(X) X is in the room % can-move(X.