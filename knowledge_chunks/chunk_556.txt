aphs (CG) are designed to capture dependencies between variables (Williams and Nayak, 1997). Causal graphs capture relations between variables and are defined as follows. Let P be a planning problem with the set of state variables V. The causal graph CG(P) for the planning problem is a directed graph with the variables as vertices. An edge exists between two vertices (v, Vv) iff v v' and one of the following conditions holds, Transition Condition The domain transition graph of Vv has a transition labelled with some condition on v. Co-occurring effects The effects for some action a includes both v and v . An edge signifies the fact that changes in the target variable v are dependent on changes in the source variable v. The first condition allows us to trace the set of variables, ancestor(g) that could effect a goal variable g. This is called the achievability definition of causal graphs. However, if a planner focuses only on ancestor(g) it might be possible that some action in the plan may have an undesirable side effect on the goals. To cater to this possibility, the second condition introduces the separability definition in the causal graphs. If the causal graph is acyclic and the domain transition graph is strongly connected, then the following algorithm can be used to find a plan. First, we identify a variable v in the causal graph with no outgoing variables, a sink. We check whether a goal is defined for this variable. If no, we remove the sink v from the graph, and work on the smaller problem. If yes, we find a path from so(v) to s (v) in the domain-transition graph. This gives us a high level plan in an abstraction space which can be refined further by setting the variables of the predecessors of v in the causal graph to the values required for the transitions in the high level plan, and working on those after removing v. This process of planning is basically refinement planning in which an abstract plan is refined into a more concrete one. In practice, howeve