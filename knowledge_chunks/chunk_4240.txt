 part of our theoremproving discussion. Matching and structure building are operations that unification performs naturally. So an obvious candidate for representing grammars is some structure on which we can define a unification operator. Directed acyclic graphs (DAGs) can do exactly that. Each DAG represents a set of attribute-value pairs. For example, the graphs corresponding to the words the and file are: [CAT: DET [CAT: N LEX: the} LEX: file NUMBER: SING} Both words have a lexical category (CAT) and a lexical entry. In addition, the word file has a value (SING) for the NUMBER attribute. The result of combining these two words to form a simple NP can also be described as a graph: (NP: {[DET: the HEAD: file NUMBER: SING]] The rule that forms this new constituent can also be represented as a graph, but to do so we need to introduce a new notation. Until now, all our graphs have actually been trees. To describe graphs that are not trees, we need a way to label a piece of a graph and then point to that piece elsewhere in the graph. So let {n} for any value of n be a label, which is to be interpreted as a label for the next constituent following it in the graph, Sometimes, the constituent is empty (i.e., there is not yet any structure that is known to fill that piece of the graph). In that case, the label functions very much like a variable and will be weated like one by the unification operation. It is this degenerate kind of a label that we need in order to describe the NP rule: NP -> DETN We can write this rule as the following graph: Natural Language Processing 299 20: REA RR NHPC DORON [CONSTITUENTI: [CAT: DET LEX: {1}] CONSTITUENT?2: [CAT: N LEX: {2} NUMBER: (3}] BUILD: {NP:{DET: {1} HEAD: {2} NUMBER: (3}]/] This rule should be read as follows: Two constituents, described in the subgraphs labeled CONSTITUENT I and CONSTITUENT2, are to be combined. The first must be of CAT DET. We do not care what its lexical entry is, but whatever it is will be bound to the labe