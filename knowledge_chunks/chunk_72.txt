with shaded nodes and solid arrows. Before looking at the algorithms in detail, let us look at a couple of problem examples . While many real world problems can indeed be posed as search problems, we prefer simpler problems often posed as puzzles. Small, well defined problems are easy to visualize and easy to implement, and serve to illustrate the algorithms. Real problems on the other hand would be complex to represent, and divert from the understanding of search methods. Nevertheless, the reader is encouraged to pose real world problems as state space search problems. A few suggestions are given in the exercises. Common sorts of puzzles are river-crossing puzzles. In these puzzles, a group of entities need to cross the river, but all of them cannot cross at the same time due to the limited capacity of the boat or the bridge. In addition, there may be constraints that restrict the combination of entities that can stay in one place. One example of a river-crossing puzzle is the missionaries and cannibals problem stated as follows. There are three missionaries and three cannibals who want to cross the river. There is a boat with a capacity to seat two. The constraint is that if on any bank the cannibals outnumber the missionaries, they will eat them . How do all the six people get across safely? In the Text Box 2.1, we look at another rivercrossing problem, and also design the domain functions required. Box 2.1: The Man, Lion, Goat, Cabbage Problem A man (M) needs to transport a lion (L), a goat (G), and a cabbage (C) across a river. He has a boat (B) in which he can take only one of them at a time. It is only his presence that prevents the lion from eating the goat, and the goat from eating the cabbage. He can neither leave the goat alone with the lion, nor the cabbage with the goat. How can he take them all across the river? The state representation and move generation functions are interrelated. Let us say that we represent the state as a list of two lists, one fo