 include two aspects Dunk3 (p1, t):w7 and Dunk3-(p2, t):w1. These two actions would split the world w, into four worlds wy4, W142, W43 and wy4. In w44, the package p, would be dunked, the bomb would be diffused and the toilet clogged; in w12 the package p, would be dunked, the bomb would be diffused and the toilet would not be clogged; in w13, the package pz would be dunked, the bomb would be diffused and the toilet clogged; and in w14, the package po would be dunked, the bomb would not be diffused and the toilet would not be clogged. As one can see, there is going to be an explosion in the number of worlds the planner has to deal with. The solution extraction process, however, remains the same. For more details and for suggestions to keep the number of possible worlds in check, the interested reader is referred to (Smith and Weld, 1998). More recently, there have been approaches extending and exploiting the planning graph for planning with durative actions. We will explore durative actions later in the chapter. 10.2 Planning as Constraint Satisfaction The question one asks while extracting a plan from a planning graph is whether the goal propositions are supported by nonmutex actions. Since these actions need to have their preconditions true in the preceding layer, those preconditions become subgoals for which the same question has to be asked. The search process employed by Graphplan is similar to the Backtracking procedure of solving CSPs. The similarity of extracting plans from planning graphs to solving CSPs extends further. There have been attempts to use look forward approaches borrowed from CSP methods, and the memoization employed by Graphplan is similar to nogood learning methods (see (Dechter, 2003)) employed in solving CSPs. The mutex relations in planning layers are like arc consistency requirements in CSPs. In fact, it has been observed that if higher order mutual exclusions constraints (or nogoods) were maintained then the backward search process woul