Consequently, the definition of the ReconstructPath function will change. The revised definition is left as an exercise for the user. In the following example, the node labelled N is about to be expanded. The values shown in the nodes are the g values. The double lined boxes are in the set CLOSED and the single lined ones in OPEN. Each node, except the start node, has a parent pointer. The dotted arcs emanating from N show the successors of N, including a new node whose g value is yet to be computed. (Cell ner FIGURE 5.15 Node N is about to be expanded. Figure 5.16 shows the changes that are made after the node N is expanded. Cheaper paths were found for some of the nodes on OPEN. Likewise, for some nodes on CLOSED too, and in their case the improved g-values had to be passed on to their descendents as well. 5.6 Admissibility of A The algorithm A will always find an optimal solution, provided the following assumptions (A1 A3) are true. A1. The branching factor is finite. That is, there are only a finite number of choices at every node in the search space. A2. The cost of each move is greater than some arbitrarily small nonzero positive value e. That is, for all mm. n: KQn. n) (5.1) A3. The heuristic function underestimates the cost to the goal node. That is for all n: h(n) S A (n) (5.2) We prove the admissibility of algorithm A via a series of lemmas. We also prove that as the heuristic function becomes a better estimate of the optimal cost, the A search examines fewer nodes. The proofs are as given in (Nilsson, 1998). The proof is made up of a series of lemmas starting with L1 below. 1. Node N goes to CLOSED Ge 4. Better costs to nodes on CLOSED 3 2. New node: g-val 25 7 5. Improved g-values FIGURE 5.16 The graph after node N has been expanded. L1: The algorithm always terminates for finite graphs. Proof In every cycle of the main loop in A , the algorithm picks one node from OPEN and places it in CLOSED. Since there are only a finite number of nodes, the algorithm