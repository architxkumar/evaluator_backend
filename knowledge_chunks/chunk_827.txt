 related information and sum it up. Such a frame system could then serve as a kind of an active hierarchical spreadsheet-cum-calendar that could help one plan a party meticulously, and generate calendar reminders when needed. When invoked, the procedures would facilitate the construction of actual instances of the frames for a specific birthday party. The process could happen somewhat along the lines described below. We assume that instance frames of the people involved, food items, and so on exist in some database. Consider the task of organizing a party for Aditi on November 7. The moment we invoke the birthday-party organizer, it creates an instance of the Birthday-party frame, as follows, (birthday-party-4327 (:Instance-Of Birthday-party) and prompts us for the name of the child, by showing us a list of names in our database, or asking us to enter the data. It retrieves, or constructs, the instance frame for Aditi, and creates an instance of the B day-kid frame, (b day-kid-aditi (:Instance-Of B day-kid) (:Bircthday ncevember-7) The system would then create instances of the three event frames. For the instance of the Preparation frame, it would initiate the task of forming the guest list. Assuming that we have an existing database of people we know, the system can show us a list of friends of Aditi, and ask us to choose the guest list. As each guest is chosen, the system creates an instance of a Guest frame for example as follows, (guest-subun (:Instance-O Guest) (:Friend aditi) (:Name subun) It would create a calendar entry for inviting each guest, which would prompt the user at an appropriate time. A smart system may also retrieve food preferences of each guest if available and impose soft constraints on the party menu. It would then show you menu options, perhaps on the Web, and help you decide the food items, calculating quantities, costs, and if you insist, calories. It would show you the games menu and likewise help you decide the entertainment program, ini