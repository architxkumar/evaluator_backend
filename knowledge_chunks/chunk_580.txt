, in the total ordering, tmin is increased by max x .dmin-x, .tmax, and tmax by max x .dminX,.tmin, , and for every y, E that comes later than x, in the total ordering, tmin is incremented by e , and tmax is increased by max x .dmin x .tmax, . Then, for any new state generated in search, if for some event e, E it is the case that tmin dmax then that state can be pruned, because the durative action e clearly cannot happen because more time than its maximum duration has already passed. If search had continued till e, was added then at stage the STN would have had a (negative overall weight) cycle. This is illustrated in Figure 10.24 with the following example from (Coles at al., 2008). Let us say that we have two durative actions, a and b, with static durations, such that the duration of b is larger than that of a. Since durations are static, it means that for each action, the values dmin and dmax are the same value. Let the planner introduce two snap actions a. and b,, and is about to add action b , resulting in the temporal relations shown in the figure. At the point when action b, is added, the time elapsed a,.tmin since a is (b .dmin ). Since this is greater than its maximum possible duration, a .dmax CRIKEY3 can prune this state itself during search. If the search algorithm had gone on an added a , next then the STN made up of the four snap actions would have been inconsistent. Ignoring the two e duration constraints, the sum of the weights in the cycle shown in the figure would be negative. CRIKEY3 uses a forward state space search algorithm similar to FF. It uses a relaxed temporal planning graph to guide search, and like FF uses the notion of helpful actions. However, since the instantaneous snap actions are not independent, but come in pairs, it uses a modified relaxed temporal planning graph for estimating the heuristic value of a node. The end actions can only be applied after the corresponding start actions have been. This is achieved by adding a dummy pre