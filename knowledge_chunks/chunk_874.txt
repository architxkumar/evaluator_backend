llowing procedure adapted from (Brachman and Levesque, 2004). Classify (taxonomy, aNew) 1 d Desc (aNew) 2 s MostSpecificSubsumers (taxonomy, d) 3 g MostGeneralSubsumees (taxonomy, s, d) 3 if empty(s M g) 4 do remove every link from g to s s for everyne e g add an Is-A link in taxonomy from n to aNew 7 for everyne s 8 add an Is-A link in taxonomy from aNew to s return texonomy FIGURE 14.26 The procedure Classify to insert a node into the taxonomy. We assume a function Desc(node) that returns the description of a node. The functions MostSpecificSubsumers and MostGeneralSubsumees are described in Figures 14.27 and 14.29. After the sets G and S have been found, if they have a node in common that node already describes the input ajjew, and nothing needs to be done. Otherwise, we first remove any existing s-A links between G and S (line 4). This is because we want to link nodes only to their parents. Then for every node in G, we add an s-A link to aye, and a link from anew to every node in S. The set S of most specific subsumers of a concept d in a taxonomy T is constructed as follows. We start at the root, the node for Thing that subsumes everything, and traverse downwards along its descendants that subsume the concept description d. We assume a function Desc(node) that returns the description associated with a node, and a function Subsumes(N,M) that returns true if MON. The algorithm works with two sets. One called P that contains possible ancestors of the most specific subsumers. The other set S is the set of most specific subsumers we are constructing. For every node in the set P that subsumes d, the algorithm transfers it to S, only if it has no child that subsumes d. Otherwise it replaces it with all its children in P23. The algorithm is given in Figure 14.27. MostSpecificSubsumers (taxonomy,d) BP (root (taxonomy) while not empty (p) do for every node n in p Bone Ss Remove n from p iff Subsumes(Desc(n), d) 7 then if there exists a child of n such that Subsumes (Desc