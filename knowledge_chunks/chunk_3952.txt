 in the limited amount of time that is available. There are two ways to approach achieving this computational goal. The first is to search for good heuristics that can inform a theorem-proving program. Current theorem-proving research attempts to do this. The other approach is to change not the program but the data given to the program. In this approach, we recognize that a knowledge base that is just a list of logical assertions possesses no structure. Suppose an information-bearing structure could be imposed on such a knowledge base. Then that additional information could be used to guide the program that uses the knowledge. Such a program majuiot look a lot like a theorem prover, although it will still be a knowledge-based problem solver. We discuss this idea further in Chapter 9. A second difficulty with the use of theorem proving in AI systems is that there are some kinds of information that are not easily represented in predicate logic. Consider the following examples: e Tt is very hot today. How can relative degrees of heat be represented? Blond-haired people often have blue eyes. How can the amount of certainty be represented? If there is no evidence to the contrary, assume that any adult you meet knows how to read. How can we represent that one fact should be inferred from the absence of another? e It s better to have more pieces on the board than the opponent has. How can we represent this kind of heuristic information? e I know Bill thinks the Giants will win, but I think they are going to lose. How can several different 126 Artificial Intelligence ccnp RECN CNRS NE belief systems be represented at once? These examples suggest issues in knowledge representation that we have not yet satisfactorily addressed. They deal primarily with the need to make do with a knowledge base that is incomplete, although other problems also exist, such as the difficulty of representing continuous phenomena in a discrete system. Some solutions to these problems are presented 