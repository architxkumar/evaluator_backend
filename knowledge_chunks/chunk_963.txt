espond to the leaves in the kd-tree in Figure 15.15. The kd-tree is built by a recursive algorithm in a top down manner. It begins with a single node at the root representing the entire case base. It then partitions the set of cases represented by the node, based on some attribute, and recursively calls itself to build the subtrees. The process halts on some termination criteria, which could be the size of the bucket or a threshold average intra-bucket similarity. The algorithm for building the kd-tree is described in Figure 15.17 below. The structure of the nodes is, Node (attribute-name, : the attribute to be tested attribute-value, : the value of the attribute pointer-to-bucket, : bucket has the cases pointer-to-left-child, : cases with smaller attribute values pointer-to-right-child, : cases with larger attribute values pointer-to-parent, : pointer to parent node count). : number of times visited during search Build-kdcree (CB : case bass, A: attribute list, b : buckst size, parent : perent nede) if Size(CB) sb B 2 then Sub: 3 4 5 ISubtres, rSubtree, parent, 0) 6 else r A, CB) 7 Val ChocseVal(testAter, CB) a largerCB LargerThan CB, testVal) 9 smallerCB CB 10 not a bucket 11 12 testVel, b, 13 Build-kdtres(smallerCB, A, b, p , 14 Build-kdtree(largerCB, A, b, p), pNed , ) FIGURE 15.17 The algorithm Build-kdtree returns a pointer P to a node of the type (attributename, attribute-value, pointer-to-bucket, pointer-to-left-child, pointer-to-right-child, pointer-toparent count). The last element count is used in the retrieval phase. Function Size counts the number of cases in CB. Function ChooseAttr selects and returns the attribute to be used for test at that node. Function ChooseVal selects and returns the test value for the chosen attribute. The function LargerThan selects the subset of CB that has cases with the value of the chosen attribute larger than the chosen value 7. Function MakeBucket creates a bucket of cases and returns a pointer to the bucket. The functio