 Each node or vertex in the graph corresponds to a problem state, and arcs between nodes correspond to transformations or mappings between the states. The immediate successors of a node are referred to as children, siblings, or offspring, and predecessor nodes are ancestors. An immediate ancestor to a node is a parent. A tree is a graph in which each node has at most one parent. One node, the root or starting node, has no parent. Leaf or terminal nodes are nodes without children. The number of successors emanating from a node is called the branching degree of that node (denoted as b). A path is a sequence of nodes it where each n, is a successor of n_1 for i = I .... . k. 0. It is always possible to convert a directed graph into a tree with multiple labeled nodes. This can be done by opening up all but one of the several alternate paths connecting two nodes and creating duplicate copies of the end, node, one for each different path from the parent. We will find it more convenient, however, to use both types of representations in the following discussion. An And-Or graph or tree is a special type of representation for problems which can be reduced to a set of subproblems, all of which must be solved. The requirement for the solution of all subproblems is depicted as an And node, a node with all arcs emanating from it connected by a curved line. Or nodes have no line connecting its arcs to signify that any emanating path may be taken for a solution. For example, if a robot is given the task of painting a table, it may complete the task by scraping, sanding, and painting the table, or it may choose the simpler solution and send it to a paintshop (Figure 9.1). In what follows, we assume simple Or graphs or trees as the problem space 170 Search and Control Strategies Chap. 9 Task node and node/ Send to piuhop Scrape Sand P,o FIgure 9.1 Example of an and-or graph. representation unless noted otherwise. And-Or graph searches are covered in Section 9.6. Graph and Search Tre