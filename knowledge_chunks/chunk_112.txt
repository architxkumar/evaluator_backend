e. The first function h(n) simply checks whether each block is on the correct block, with respect to the final configuration. We add one for every block that is on the block it is supposed to be on, and subtract one for every one that is on a wrong one. The value of the goal node will be 6. Observe that the heuristic function is not an estimate of the distance to the goal, but a measure of how much of the goal has been achieved. With such a function we are looking for higher values of the heuristic function. That is, the algorithm is performing steepest gradient ascent. For the five states, S (start) and its successors P, Q, R, and T, the values are hy(S) (-1) 14141 (-1) 1 2 hy(P) (-1) 1 14 1 (-1) 1 2 h(Q) 1 1 1414(-1) 1 4 h4(R) (-1) 14 1414 (-1) 1 2 hy(T) (-1) 141414 (-1) 1 2 where, h,(n) val, valg Valo Valp vale vale Clearly h, thinks that moving to state Q is the best idea, because in that state, block A is on block E. The second heuristic function looks at the entire pile that the block is resting on. If the configuration of the pile is correct, with respect to the goal, it adds one for every block in the pile, or else it subtracts one for every block in that pile. The values for the six nodes we have seen are nS) (-3) 2 1 0 (-1) 0 -1 h(G) 4 2 1 0 3 0 10 ho(P) 0 2 1 0 (-1) 0 2 ho(Q) (-2) 2 1 0 (-1) 0 0h(R) (-3) 24 14 0 (-4) 0 -4 ho(T) (-3) 2 1 0 0 0 0 The first thing to notice is that the heuristic function ho(n) is much more discriminating. Its evaluation for almost all nodes is different. The second is that its choice of the move is different. It thinks that moving to state (node) P is the best. It is not tempted into putting block A onto block E. The reader will agree that the second function s choice is better. C alal A B fel Start N D F E i State T E aA Bl al F E D F c fz D FI A State Q State P FIGURE 3.11 The first moves possible. A move consists of moving one topmost block to another place. In both cases, since there is a successor with a better heuristic