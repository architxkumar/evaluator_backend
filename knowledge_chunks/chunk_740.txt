e it, like one might in RDF, as, Colour(Ball22, red) Now we are saying Colour is a property (or predicate) that describes the subject Ball22 and its value is a literal named red . This is a little better since we do tend to think of colour as a property of a (physical) object, and the statement reflects that relation. In the above statement we have modeled red as an (reified) object in the domain. We could have also used Colour as a function to assert, Colour(Ball22) red We could even relate it to other colours by functions like, Similarity(red, orange) 0.78 We could also define a category called Colour class of which red is an instance, expressed by the statement Co our class(red) or Instance(Colour class, red) being true. Weight and length are properties we tend to use both quantitatively (5 kg, 3 km) and with fuzzy linguistic descriptors (light, short). Quantitative descriptions themselves tend to employ different measures, and one needs to find mechanisms to reason with different measures, for example, 26 miles 385 yards 42.195 km. Let us say we want to talk about the length of an object Pencil41. Now if we can think of a reified object that represents, or that is, the length of Pencil41, we could point to that object of type length by using a function called length as length(Pencil41). Let us say that the pencil is five inches long. We could think of anotherfundtioaminches that takes an argument of the type ength and returns a number, in this case 5 (as described in (Brachman and Levesque, 004). Likewise we could define a function cms that returns the value 12.7 in centimetres. That is, inches(length(Pencil41)) 5 cms(length(Pencil41)) 12.7 We could also write conversion equations like, inches(length(Object)) 2.54 cms(length(Object)) We could now define the notion of longer than by defining an ordering on the objects of type length as follows. (length(O,) length(O2)) (cms(length(O,)) cms(length(O2))) assuming we have an ordering on numbers. But now what is a num