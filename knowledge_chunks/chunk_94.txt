xponential to linear. The above discussion shows that as search algorithms have to search deeper and deeper then at every level they have to do much more work than at all the previous levels combined. This is the ferocious nature of the monster CombEx that problem solving finds itself up against. Nevertheless, the fact remains that all the three search algorithms explore an exponentially growing number of states, as they go deeper into the search space. This would mean that these approaches will not be suitable as the problem size becomes larger, and the corresponding search space grows. The DFS and DFID algorithms need only a linear amount of space to store OPEN. They still need exponential space to store CLOSED whose size is correlated with time complexity. We will need to do better than that. There are basically two approaches to improve our problem solving algorithms. One is to try and reduce the space in which the algorithm has to search for solutions. This is what is done in Constraint Propagation. The other is to guide the search problem solving method to the solution. Knowledge based methods tend to exploit knowledge acquired earlier to solve a current problem. These methods range from fishing out complete solutions from the problem solver s memory, to providing domain insights to a search-based first principles approach. Observe that the search methods seen so far are completely oblivious of the goal, except for testing for termination. Irrespective of what the goal is or where the goal is in the solution space, each search method described in this chapter explores the space in one single order, which they blindly follow. They can be called blind or uninformed search methods. In later chapters, we will find the weapon to fight CombEx, our adversary that confounds our algorithms with unimaginably large numbers. Our weapon will be Knowledge. Knowledge will enable our algorithms to cut through the otherwise intractable search spaces to arrive at solutions in t