until two paths meet somewhere in between. This strategy is called bidirectional search. It seems appealing if the number of nodes at each step grows exponentially with the number of steps that have been taken. Empirical results [Pohl, 1971] suggest that for blind search, this divide-and-conquer strategy is indeed effective. Unfortunately, other results [Poh], 1971; de Champeaux and Sint, 1977] suggest that for informed, heuristic search it is much less likely to be so. Figure 6.3 shows why bidirectional search may be ineffective. The two searches may pass each other, resulting in more work than it would have taken for one of them, on its own, Backward search to have finished. However, if individual forward and start States explored here Goal States backward steps are performed as specified by a program that has been carefully constructed to exploit Fig. 6.3 A Bad Use of Heuristic Bidirectional Search each in exactly those situations where it can be the most profitable, the results can be more encouraging. In fact, many successful AI applications have been written using a combination of forward and backward reasoning, and most AI programming environments provide explicit support for such hybrid reasoning. Although in principle the same set of rules can be used for both forward and backward reasoning, in practice it has proved useful to define two classes of rules, each of which encodes a particular kind of knowledge. Forward rules, which encode knowledge about how to respond to certain input configurations. Backward rules, which encode knowledge about how to achieve particular goals. ? One exception to this is the means-ends analysis technique, described in Section 3.6, which proceeds not by making successive steps in a single direction but by reducing differences between the current and the goal states, and, as a result, sometimes reasoning backward and sometimes forward. i | i i Representing Knowledge Using Rules 137 senna snsann At AS ASS By separating rules into