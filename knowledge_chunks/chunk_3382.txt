ven though the structure of the wiper or its mode of operation may have changed. Because there is more than one wiper, each with similar attributes and operations. some savings in memory and procedures can be realized by creating a generic class which has all the characteristics which are common to the left. right. and rear wipers. The three instances retain some characteristics unique to themselves. but they inherit common attributes and operations from the more general wiper class. The object paradigm described above seems to model real-world systems more closely than the procedural programming models where objects (data) and procedures are separated. In object-oriented systems. objects become individual, self-contained units that exhibit a certain behavior of their own and interact with other objects only through the passing of messages. Tasks get performed when a message is sent to an object that can-perform the task. All the details of the task are rightfully hidden from other objects. For example, when your car needs repairing, you send a message to the repair shop. The repair shop, in turn. may need parts from one or more manufacturers for which they must send messages. When the car has been repaired, the repair shop sends you a message informing you of that fact. In having the shop repair your car, you probably are not interested in all the details related to the repair, the fact that messages were sent to other organizations for pans that they were obtained by Federal Express, and that certain detailed procedures were taken to complete the repair process. Your primary concern is that the repair operation was properly completed and your car returned in working order. The need to model operational behavior such as this has prompted the development of object-oriented systems. 2 OVERVIEW OF OBJECT-ORIENTED SYSTEMS The basic idea behind an OOS is the notion of classes of objects interacting with each other to accomplish some set of tasks. The objects have well-d