the true utilities U, for which
i
BU U. Thenweobtaintheinequality BU U U U .
i i
So,ifweview U U astheerrorintheestimate U ,weseethattheerrorisreducedbya
i i
factorofatleast oneachiteration. Thismeansthatvalueiteration converges exponentially
fast. We can calculate the number of iterations required to reach a specified error bound (cid:2)
as follows: First, recall from Equation (17.1) that the utilities of all states are bounded by R (1 ). This means that the maximum initial error U U 2R (1 ).
max 0 max
Suppose we run for N iterations to reach an error of at most (cid:2). Then, because the error is
reducedbyatleast eachtime,werequire N 2R (1 ) (cid:2). Takinglogs,wefind
max
N (log(2R (cid:2)(1 )) log(1 ))
max
iterations suffice. Figure17.5(b)showshow N varieswith ,fordifferent valuesoftheratio
(cid:2) R . The good news is that, because of the exponentially fast convergence, N does not
max
dependmuchontheratio(cid:2) R . Thebadnewsisthat N growsrapidlyas becomesclose
max
to 1. We can get fast convergence if we make small, but this effectively gives the agent a
shorthorizonandcouldmissthelong-term effectsoftheagent s actions.
The error bound in the preceding paragraph gives some idea of the factors influencing
the run time of the algorithm, but is sometimes overly conservative as a method of deciding
when to stop the iteration. For the latter purpose, we can use a bound relating the error
to the size of the Bellman update on any given iteration. From the contraction property
(Equation(17.7)),itcanbeshownthatiftheupdateissmall(i.e.,nostate sutilitychangesby
much),thentheerror,comparedwiththetrueutilityfunction, alsoissmall. Moreprecisely,
if U U (cid:2)(1 ) then U U (cid:2). (17.8)
i 1 i i 1
Thisistheterminationcondition usedinthe VALUE-ITERATION algorithm of Figure17.4.
Sofar, wehaveanalyzed theerrorintheutility function returned bythevalueiteration
algorithm. What the agent really cares about, however, is how well it will do if it makes its
decisionsonthebasisofthisu