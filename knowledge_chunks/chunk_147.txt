s in the population, producing offspring that inherit components (genes) from both parents. The new population thus contains a totally different set of solutions. In order to preserve the best candidates, sometime elitism is followed, that allows the best few candidates to have cloned copies in the new generation. 3. Mutation Once in a while in the real world, a mistake happens and a child gets a mutated copy of a gene from the parent. Most of the time this happens, it is disastrous for the individual, but on a rare occasion the mutated gene is beneficial, giving rise to a more successful individual. GAs incorporate mutations to allow for the possibility of making good random moves. As a result, even when the population does not contain a good gene, there is a chance that it may arise out of a random mutation. A typical framework of a Genetic Algorithm is given below. The most commonly used operator to recombine the genes from the two parents is known as the crossover operator. A single point crossover simply cuts the two parents at a randomly chosen point and recombines them to form two new solution strings. For example, if the solution has eight components then given the two parents: P, SS xX XoX3X4XsXeX7Xg Po SS Y; YoY3Y4Y5Y6Y7Y8 If we choose a crossover point between components 5 and 6, we get the two children as follows, Cy a Y1Y2Y3Y4Y5X6X7Xg, Cz X4XoX3X4XsVeY7Ys A two point crossover would be equivalent to doing the above operation twice. One can define many crossover operators which will take components from the parents and mix them up. Care has to be taken that the resulting strings are valid candidates. This is easy when dealing with problems like SAT, where the bit is a value of the i variable, but for most problems, the crossover point should be at a component level. Some problems like the TSP will not work with the crossover depicted above. We will look at TSP separately since it is a problem of considerable interest. The algorithm GA is described at a h