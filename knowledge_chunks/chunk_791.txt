ocedure could then relax the semantic matching criteria for activating the pending requests. SimpleSemanticParser (sentence) 1 rList () 2 cList () 3 while not Null (sentence) 4 do nextWord Head(sentence) 5) requests RetrieveFromDictionary (nextWord) 6 rList Append(requests, rList) 7 cList ApplyRequests(cList, rList) 8 return cList ApplyRequests(cList, rList) l while not Null (rList) 2 if RequestTest (Head(rList)) TRUE 3 then return ApplyRequests (Apply (Head(rList), cList), Rest (rList)) 4 else return ApplyRequests(cList, Rest(rList)) FIGURE 13.18 A simple semantic parser retrieves rules associated with words and applies them to partial conceptualizations stored in the cList. We assume the function RetrieveFromDictionary that retrieves the relevant rules nondeterministically. We also assume a function Apply that applies a request to the cList. Many languages in the Indian subcontinent on the other hand employ explicit case markers. Many of these languages are based on the grammar given by Panini around the 4" century B.C. (Vasu, 1962) and recent work in linguistics has drawn upon it (Bharati and Sangal, 1990), (Bharati et al, 2004), (Huet et al, 2009). The Paninian framework is interesting because it addresses the semantic issues as well. The grammar explicitly focuses on actions, the actor, and other objects in relation to the action. In the Panini grammar syntactic constructs called the vibhaktis are used to explicitly mark the semantic role of each constituent via karakas or semantic role indicators. These karakas manifest themselves as morphological inflexions on the base word in some languages, including Sanskrit, while they occur as separate markers in others like Hindi. Panini specified six ways in which constituents of a sentence can relate to the verb. These are the following (Vaidya et al, 2009), k1: karta: central to the action of the verb k2: karma: the one most desired by the karta k3: karana: instrument which is essential for the action to take place k