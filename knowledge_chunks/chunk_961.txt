ize the attribute level distances to the range 0,1 and define the global distance function appropriately. This is left as an exercise for the reader. Ordered symbol type attributes where the values are assumed to be spaced equally apart can also be treated as having a distance value. We can even extend the idea to Boolean attributes, with the distance between two values being limited to the set 0,1 . 15.2.4 KD Trees When the case base becomes very large, there is a need to apply some techniques to selectively inspect a subset of promising cases. The reader must be familiar with binary search trees and B-trees (Cormen et al., 2001). We look at a tree called kd-tree that was first devised by Bentley (1975). The kd-tree is different from binary search trees in two ways. One is that binary search trees search on one-dimensional data, while kd-trees search over multi-dimensional data. Two, kd-trees are designed for similarity searching, as opposed to the equality based searching in binary search trees. However, both operate on numeric spaces. When cases can be seen as points in N-dimensional space, one can imagine the query as another point in the same space. The task then is to retrieve the cases that are closest to the query. If one can partition this space into regions that can be accessed by hierarchical index structures, then one could satisfy the retrieval criteria by inspecting only a few regions. Each region would contain cases similar to each other, and hence roughly equally similar to the query. This is the basic idea behind many retrieval algorithms in metric spaces (see for example (Frakes and Baeza-Yates, 1992), (Nene and Nayar, 1996), (Kleinberg, 1997), (Kushilevitz et al., 1998), (Van Berendonck and Jacobs, 2003)). A kad-tree is a multidimensional binary search tree. Each internal node in the kd-tree has a test for the value of some attribute, like in a binary search tree. Each internal node represents a set of cases, and the two arcs below it point to two