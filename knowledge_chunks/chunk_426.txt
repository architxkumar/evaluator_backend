or we could specify them as extensions, Ry2 1, 2 , 1, 3 , 2, 3 and Rog 1, 2 , 1, 3 , 2, 3 Observe that if the domains of the variables had been infinite, we could have still used the intensional form of the relation, but not the extensional form. There has been the development of a considerable number of techniques for solving constraint satisfaction problems dealing with numbers in specialized domains of mathematics, for example solving sets of linear equations. We will, however, focus on the general approach to solving CSP problems with finite domains in which the relations are expressed as extensions. A CSP can be depicted by a constraint graph. Each node in a constraint graph represents a variable, and an edge connects two variables if they participate in a constraint. The absence of an edge between two nodes means that all combinations of their values are allowed. One must be careful to understand that this means that ocally, there is no constraint between the two variables, or that there is no explicit constraint between the two variables. Globally, there might only be certain combinations of values that participate in solutions. Figure 9.1 depicts the constraint graph for the problem CSP7. One can observe that there is an implicit constraint that x, (x3 - 1) which does not find a place in the constraint graph because it is not explicit. But the relation will hold in any solution of the CSP. We shall further restrict our focus on methods to solve binary CSPs. Binary CSPs are those CSPs where the constraints have scopes of sizes 1 or 2 only. For a binary CSP, the edges in the constraint graph in fact represent constraints. It has been observed that any nonbinary CSP can be converted to a binary CSP (see for example (Rossi et al., 1990), (Tsang, 1993), and (Mamoulis and Stergiou, 2001)). One way to do this is by introducing extra variables. Consider a variation of the above CSP containing a relation over all three variables. FIGURE 9.1 The constraint graph for t