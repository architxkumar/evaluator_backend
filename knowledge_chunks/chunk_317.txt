d as t,, f2 and tg in the figure. E onBC clearB - stackAB onAB clearB sg onAB ontableB send Mais Figure 7.19 A partial plan with four actions added in the order stackAB, putdownB, pickupA, unstackBC. After the last action, there are no open conditions, but three threats t,, t, and fs appear. Threat t, is that if stack(A, B) is done before unstack(B, C) it will disrupt (or clobber) the precondition clear(B) of the latter. This can be resolved by demoting action stack(A, B) to happen after unstack(B, C). This is done by adding an ordering link (unstack(B, C) stack(A, B)) into the plan. Threat t2 and threat t3 are symmetrical in nature. Let us assume that the planner correctly resolves tf, by likewise demoting action pickup(A) by adding the link (unstack(B, C) pickup(A)). Notice now that the threat t; has become definite, in the sense that we know that the AE condition for pickup(A) is going to be clobbered by unstack(B, C). The corresponding causal link is broken, and we have the open condition AE for pickup(A). We cannot demote unstack(B, C) without making the ordering links inconsistent. Instead, the planner looks for an action to achieve AE again. It finds it within the plan itself. Action putdown(B) can produce AE for pickup(A) to consume. Thus, declobbering, as it was first described in a system called TWEAK (Chapman, 1987), is done by inserting ordering link (putdown(B) pickup(A)) and causal link (putdown(B), AE, pickup(A)) between the two actions. The resulting plan with no threats or open conditions is shown in Figure 7.20. Only the necessary subset of ordering links is shown for clarity, like in a Hasse diagram. nil w clea .- ontableA holdingB putdownB EE ontableB s Ordering link nil Figure 7.20 The final plan after threats t,, t) and tz are resolved. There are no open conditions or threats, and hence this is a solution plan. The reader would have observed that the resulting plan is a linear plan. This is inevitable in the blocks world domain, because the one