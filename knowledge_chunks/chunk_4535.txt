rchange them KH again [ T17 ik) I 8 f il 2 ieae Fe Child 2 Fig. 23.5(c) Crossover with Interchange Mutation While in the previous problems we assumed that mutation need not take place, in this real world scenario it becomes imperative for us to effect the same. One possible way of realizing mutation in the present case is by swapping the employee Ids of different projects within the same chromosome. This can be done by the following two steps: {. Generate two random numbers from | to P, where P is the number of projects. These numbers serve as the project Ids. 2. Swap the respective employees allocated to these projects. The process is depicted in the Fig. 23.6. Interchange +]3 E44 i|5 +)a-+2/7-S2Te ' 1/7 1/5 1 | 14 2|3 2| 8 Fig. 23.6 Mutation - 468 Artificial Intelligence New generation The individuals with better fitness values are selected from the parent and the child population to form the next generation. Note that there could be many ways of carrying out crossover, mutation and reproduction to evolve the new generation. Interpreting Results Having understood the manner of representation of the problem to suit a GA, we now look at some of the results obtained and try to interpret them. The results have been divided into several cases and are based on the following inputs. Total Number of available Employees, V = 20, Total Requirement of employees (by all the projects), T= 16 and Number of Projects, P = 4. . Feeling the Search Space It is important to ascertain whether one has hit the possible global optimum. Though we can never be cent percent sure of this, it is essential that the GA be moved in every possible way to best ensure this. The following graphs reveal a few pertinent points. Figure 23.7 depicts a plot between the fitness values and the number of generations. It can be seen that the fitness saturates after a certain number of generations and shows no change after that. This means that for a particular set-up (which in the current case is - a populat