 Can a program get better without the aid of a teacher? It can, by generalizing from its own experiences. 17.4.1 Learning by Parameter Adjustment Many programs rely on an evaluation procedure that combines information from several sources into a single summary statistic. Game-playing programs do this in their static evaluation functions, in which a variety of factors, such as piece advantage and mobility, are combined into a single score reflecting the desirability of a particular board position. Pattern classification programs often combine several features to determine the correct category into which a given stimulus should be placed. In designing such programs, it is often difficult to know a priori how much weight should be attached to each feature being used. One way of finding the correct weights is to begin with some estimate of the correct settings and then to let the program modify the settings on the basis of its experience. Features that appear to be good predictors of overall success will have their weights increased, while those that do not will have their weights decreased, perhaps even to the point of being dropped entirely. Samuel s checkers program [Samuel, 1963] exploited this kind of leaning in addition to the rote learning described above, and it provides a good example of its use. As its static evaluation function, the program used a polynomial of the form Cyt) + Coby +... + Crelig The tf terms are the values of the sixteen features that contribute to the evaluation. The c terms are the coefficients (weights) that are attached to each of these values. As learning progresses, the c values will change. The most important question in the design of a learning program based on parameter adjustment is When should the value of a coefficient be increased and when should it be decreased? The second question to be answered is then By how much should the value be changed? The simple answer to the first question is that the coefficients of terms that predic