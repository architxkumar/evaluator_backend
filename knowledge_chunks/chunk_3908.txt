l not change from one state to another, yet each fact will be represented once at every node, and we will quickly run out of memory. Furthermore, we will spend the majority of our time creating these nodes and copying these facts most of which do not change often from one node to another. For example, in the robot world, we could spend a lot of time recording above(Ceiling, Floor) at every node. All of this is, of course, in addition to the real problem of figuring out which facts should be different at each node. This whole problem of representing the facts that change as well as those that do not is known as the frame problem (Mc Carthy and Hayes, 1969]. In some domains, the only hard part is representing all the facts. In others, though, figuring out which ones change is nontrivial. For example, in the robot world, there might be a table with a plant on it under the window. Suppose we move the table to the center of the room. We must also infer that the plant is now in the center of the room too but that the window is not. To support this kind of reasoning, some systems make use of an explicit set of axioms called frame axioms, which describe all the things that do not change when a particular operator is applied in state n to produce state n + 1. (The things that do change must be mentioned as part of the operator itself.) Thus, in the robot domain, we might write axioms such as color(x,y, 5;) A move(x, 5,8) > color(x,y, Sz) Knowledge Representation Issues 97 which can be read as, If x has color y in state s, and the operation of moving x is applied in state s, to produce state s3, then the color of x in s, is still y. Unfortunately, in any complex domain, a huge number of these axioms becomes necessary. An alternative approach is to make the assumption that the only things that change are the things that must. By must here we mean that the change is either required explicitly by the axioms that describe the operator or that it follows logically from some change