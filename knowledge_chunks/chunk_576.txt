on heuristic that counts the number of actions in the relaxed plan, and the sum-duration heuristic that sums of their durations. However, both these heuristic functions are not admissible. When one is planning in a domain with metric resources then often actions that augment these resources have to be added in a plan. For example, a fuelling action is meant solely to increase the fuel level of a vehicle to some desirable level. However, since relaxation ignores reductions in metric resources, the heuristic function may also ignore such actions leading to a less informed heuristic. While it is difficult to account for resource augmenting actions accurately since they depend upon actual values of resources in given states, Sapa does an adjustment, described below, of the heuristic value based on possible resource consumption. First, the problem specifications are pre-processed to find actions Ar that increase the amount of resource R maximally by Dp. Let a cost C(Ar) be associated with action Ap, and let nit(R) be level of the resource in the given state S. Given the relaxed plan extracted from the RTG, let Con(R) and Pro(R) be the total production and consumption of resource R by the original versions of all the actions in the relaxed plan. If Con(R) Init(R) Pro(R) then an appropriate number of actions Ap are added to make up for the difference. Let this number be N. Adding N to the count gives us an adjusted sum-action heuristic, and adding N C(Ar) gives us an adjusted sum-duration heuristic. For some more improvements to the heuristic function, the reader is referred to (Do and Kambhampati, 2002). However, this approach to temporal planning has a fundamental limitation. For Sapa, time moves from one event to the next (in the event queue), and those are the only time points available to Sapa for inserting new actions. It can only place actions in the plan at these time points, and cannot start new actions at other times. The example of required parallelism illustrat