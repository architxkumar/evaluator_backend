he condition of being on a convex polygon, and the algorithm would have found the optimal solution. 2 e) 0 O FIGURE 4.13 A near polygon arrangement of cities. The distances are the Euclidean distances in the figure. We can improve upon the above algorithm slightly by extending the partial tour at the either end, choosing the one that has the nearest neighbour. The above algorithms work by adding nodes (cities) to the partial tours. The new node to be added is the one that is nearest to either end of the partial tour and extends the partial tour. Another heuristic method also adds nodes to the partial path, but selects the node to be added as the one that is nearest to any node in the partial tour. The new node is inserted into the partial tour by connecting it to the nearest node and splicing the new node. This is known as the nearest insertion heuristic, and it has been shown that the resulting tour costs are at most twice the optimal tour costs (Rosenkrantz et al., 1977). The reader is encouraged to try the heuristic on the problem in Figure 4.13. We now look at constructive methods that add edges instead of nodes. The idea is that one adds edges making up the tour in some order, eventually stringing together the entire tour. In an algorithm known as the Greedy Heuristic, one starts off by sorting the edges in order of their costs (or weights or distances). The algorithm begins with the graph G containing all the nodes and no edges. One then keeps adding the cheapest edges to a partial tour being constructed in the graph G, such that no node ever has a degree more than two, and no cycles except the final tour exists. Another method known as the Savings Heuristic starts off by constructing (n 1) tours of length two, all originating from a base node np. At the start, the i tour looks like (np, nj, Ny). The algorithm then performs (n 2) merges, at each stage removing two edges from two cycles to npand adding an edge to connect the two hanging nodes. Of the four combi