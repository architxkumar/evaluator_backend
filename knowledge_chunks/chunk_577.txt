ints available to Sapa for inserting new actions. It can only place actions in the plan at these time points, and cannot start new actions at other times. The example of required parallelism illustrated in Figure 10.21 cannot be solved by Sapa, because it has to start the SpreadGhee action a little before the end of the Chapati action, and the earliest it can think of after the start of the Chapati action is when the Chapati action ends. 10.5.3 CRIKEY3 CRIKEY3 (Coles et al., 2008) is built upon CRIKEY (Coles et al., 2009) which splits the durative action into two instantaneous actions, called snap actions. One snap action happens at the start of the durative action, and the other at the end. Given an action a, the two snap actions are denoted by a, and a.,. The start effects of the action (which is the same as the effects of the start action) happen after an infinitesimal duration e, and likewise the end effects. CRIKEY searches like FF using a relaxed planning graph heuristic. CRIKEY used a notion of envelopes that kept track of interactions that a started durative action may have with other actions. An envelope is defined by the start action associated with each durative action when it is added, and identifies the corresponding end action. Actions which interact with any existing actions in the envelope are added to the envelope, and in the process may extend the duration and end point of the envelope. A Simple Temporal Network (STN) is associated with each envelope recording temporal relationships. All such STNs have to be temporally consistent in a valid plan. Given an action represented by its snap actions a, to a,, the STN has a positive edge from a, to a, with weight equal to its maximum duration and a negative edge from a, to a,, with the weight being the minimum duration of the action. The other temporal constraints are introduced by the planning process, based on preconditions and effects, and the mutex relations. A STN is consistent, if there is no cycle 