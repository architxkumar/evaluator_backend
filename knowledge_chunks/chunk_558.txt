compute). The basic idea behind computing the causal graph heuristic is understood by viewing it as a bottom up process, with the lowest level variables being considered first. Conceptually, the task is to compute the cost for each transition in the DTG. These costs of the form cost(d, a ) are then used to estimate the cost of solving the goal. In practice, not all such costs need to be computed and the algorithm in Fast Downward takes a top down view of this process . The bottom view is as follows. We first compute the costs for the lowest variables in the ordering, and use these costs to compute the costs for higher variables. 1. Ifa variable v has no causal predecessors (is at the bottom of the causal ordering), then cost,(d, a ) is the length of the shortest path from d to a in DTG(V). In fact, the costs from each d to all, d can be computed by Dijkstra s single-source shortest path algorithm (see (Cormen et al., 2001)). 2. Let V, be the set consisting of v and all its predecessors in the pruned causal graph CG (p). Let Ny be the planning task induced by V, in which the initial value of v is set to d and the goal value set to d . 3. cost(d, d ) m, where 7, is the plan found for MN, (by the algorithm for acyclic causal graphs outlined above). This cost includes the cost of the low level actions needed by the high level plan. The total cost of achieving the goal state from a given state s is defined as the sum of cost (s(v), s (v)) over all variables v for which the goal s is defined. In practice, the algorithm implemented computes costs in a top down fashion, making recursive calls to compute the edge costs that it needs. As described in (Helmert, 2006), the algorithm to compute the cost (d, d') is basically Dijkstra s algorithm with embedded recursive calls, made in the top down fashion. The cost of traversing each arc in the DTG(v) is the base cost (1 for fluents and 0 for derived variables) plus the cost of achieving the conditions associated with the transiti