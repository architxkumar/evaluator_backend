 node generation operators have inverses, bidirectional search can be used. (This is the case with 13178 Search and Control Strategies. Chap. 9 the eight puzzle described above, for example). Bidirectional search is performed by searching forward from the initial node and backward from the goal node simultaneously. To do so, the program must store the nodes generated on both search frontiers until a common node is found. With some modifications, all three of the blind search methods described above may be used to perform bidirectional search. For example, to perform bidirectional depth-first iterative deepening search to a depth of k, the search is made from one direction and the nodes at depth k are stored. At the same time, a search to a depth of k and k + I is made from the other direction and all nodes generated are matched against the nodes stored from the other side. These nodes need not, be stored, but a search of the two depths is needed to account for odd-length paths. This process is repeated for lengths k = 0 to d12 from both directions. The time and space complexities for bidirectional depth-first iterative deepening search are both 0(b"2) when the node matching is done in constant time per node. Since the number of nodes to be searched using the blind search methods described above increase as fr' with depth d, such problems become intractable for large depths. It, therefore, behooves us to consider alternative methods. Such method.. depend on some knowledge to limit the number of problem states visited. We turn to these methods now in the next Section. 9.5 INFORMED SEARCH When more information than the initial state, the operators, and the goal test is available, the size of the search space can usually be constrained. When this is the case, the better the information available, the more efficient the search process will be. Such methods are known as informed search methods. They often depend on the use of heuristic information. In this section, we exa