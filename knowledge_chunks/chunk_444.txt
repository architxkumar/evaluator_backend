ment of path consistency results in tightening of all relations, removing pairs that are not path consistent. In the process, a new explicit relation may be inferred. Arc consistency ensures that for every value in the domain of a variable, there is a supporting value in a related domain. It ensures that every node participates in an edge in the matching diagram. Path consistency ensures that for every edge between a pair of values, there is a value in every other domain such that the end points of the edge participate in edges to the new value. It thus ensures that every edge participates in a triangle. This implies that a partial solution made up of the two values at the end points of the edge can be extended to any other variable. Recall that the complete solution is made up by consistent values for all the variables. The procedure Revise-3 given in Figure 9.16 below is analogous to the procedure Revise, except that it removes edges from the binary relation that cannot be extended to a triangle. Revise-3(D,, Ruy, Rese Rey) 1 for each (a, b)ER,, delete true for each ce D, if (a, c) ER, and (c, b) ER,, then delete false if delete true then remove (a, b) from Rxy return Ry oO InN bm wh FIGURE 9.16 The algorithm Revise-3 takes as input the binary relations between three variables x, y, and z and the domain D,. It ensures that every pair (a, 6) in has pairs in R,, and Rzy. If not, it removes the pair (a, b) from Ryy. The complexity of Revise-3 is O(k ) because there are O(k2) edges in Ryy in the worst case, and for each edge, the entire domain D, has to be inspected in the worst case. Figure 9.17 shows what happens after a call to Revise-3((x, y), Z), given four variables w, x, y and z. We assume the Ryy, Ryz, Ryw, Ryz, and Ryw are defined explicitly, and that Ryz is a universal relation. One must keep in mind that these binary relations are all symmetric. The black nodes in the matching diagram are the ones that emerge as consistent triangles in this call. The dashed