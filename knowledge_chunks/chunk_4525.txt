fy and redefine the problem to suit our needs. We assume that there are three manufacturing units M,, M, and M,, each of which is capable of manufacturing a different product. A manufacturing schedule Genetic Algorithms: Copying Nature s Approaches 459 could be a set of numbers e.g. 20, 35, 15, wherein each number indicates the quantity of the concerned product manufactured by M,, M, and M, respectively. This schedule could yield a certain profit (say 40) computed by some equation. In other words we could attribute the profit of the schedule {20, 35, 15} as 40. It is this value that we wish to optimize (maximize). In GA terminology, the function used to compute the profit is called the fitness function. The set {20, 35, 15} forms the chromosome while its members form the genes. Alleles are the values that these genes can assume. We further simplify the problem to maintain clarity by discarding the amount of products generated by a unit. Instead we assume that a unit is either ON (manufacturing) or OFF (not manufacturing). The simplification in terms of binary numbers yields chromosomes of the type {1, 0, 1} indicating that M,, and M, are manufacturing while M, is non productive in this schedule. We also simplify the fitness function by assuming that the profit of a schedule is measured by the binary number formed by the individual genes (Qs and 1s) in the chromosome. Thus the schedule {1, 0, 1} would have a fitness of (101), or 5. Our problem now boils down to finding the best schedule to maximize the value of the number formed by the genes comprising the chromosome. The problem appears trivial since the best solution {1, 1, 1} can be found in the first glance, but our objective here is to see how the GA arrives at this. So far what we have done is to tailor our problem into a GA compatible one by defining the structure of the chromosome (solutions like {1, 0, 1}, {1, 1, 0}, etc.) and also identifying a suitable fitness function to help us evaluate how good each of 