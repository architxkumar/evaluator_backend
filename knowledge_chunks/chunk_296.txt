 works while regression does not, is that the operators are not symmetrical. They are designed to represent actions. An action converts a given state into a successor state. The applicability of the action is predicated only on the given state. If the given state satisfies the preconditions of the actions, it can be applied. Operators (or actions) have an in-built arrow of time, and the FSSP algorithm is aligned with it. Actions have preconditions on the given state which determine their applicability. The preconditions are necessary and sufficient for applicability. Once an action is applied to a given state, it produces a new state by adding some facts and deleting some facts. The point is that after progressing over an action, we necessarily land up in a state. One can say that the progression operation is closed over the state space. Regression is done over sets of goal predicates. A goal represents facts that one wants true in some future state . The relevance of an action to a goal simply means that it looks like that the action could achieve some part of the goal. But it does not mean that the action may be applicable in the preceding state. For example, for the goal in the above problem (Figure 7.6), the action stack(B, C) satisfies our definition of being relevant. But it obviously cannot be applied as a last action in a plan, because one can only move one block at a time, and block A needs to be on block B. The backward search algorithm being discussed could easily have found another invalid plan with stack(B, C) as the last action. While the goal description presumably applies to a state, one can observe that the regression operator is not closed over the state space. One may start with a (subset of a) state but end up with a set of predicates that is not the subset of any state. For example, the description holding(A) clear(B) A holding(B) A clear(C) in the figure cannot describe a state, because our robot has only one arm and cannot hold two blocks. re 