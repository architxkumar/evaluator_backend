re must explore. Figure 10.8 shows two possible ways in which the given goal set p4, Ps, p7 can be regressed to a set of subgoals at the preceding layer. Let G, be the goal set at the kK" layer. Let G1, 1, G,4, G3, 4, ... be the different possible goal sets that G, can regress to. Then the ExtractPlan procedure will have to investigate all possible subgoals sets via which a plan may exist. In the above figure, G, p4, Ps5, P7 and we have two subgoal sets G1, 1 p4, Po, P4, Pe and G , 1 p4, Ps, Pe - The reader is encouraged to find more subgoal sets. The algorithm GraphPlan does a depth-first search in which it regresses the goal sets to subgoal sets. The procedure is like the Backward State Space Search of Figure 7.8, except that only those relevant actions are considered that are in the planning graph. Another difference is that the ExtractPlan procedure used by Graphplan allows sets of nonmutex actions to be considered simultaneously in a layer. The space explored by the backward search ExtractPlan is depicted in Figure 10.9. P7 8 3 Po Ps 8 2 Pa Oo Pa 81 BO ) Ps P2 oO ) Pr AO Pi Po A, Pi o0G Prey A P, FIGURE 10.8 Given the goal propositions p4, ps, p7 at level k, two possible subgoal sets at level (k - 1) are p1, P2, P3, P4, Pe Shown in shaded nodes, and p4, Ps, Ps shown with thick edges. KY 2 O ) Xx r WY Pa 81 ! , BO XX ) P3 a O x 7 ae 1 O D A Ne Po Le Pes Pra Pey Ag PE FIGURE 10.9 Graphplan does a depth first search, starting from the goal set on the right. A move in the backward search is a regression of the entire goal set to a subgoal set at the preceding layer. The backward search call (at any recursive level) can terminate either by reaching the level Pp with success or result in failure. If it is the former then a plan has been found and algorithm Graphplan can terminate. If it is the latter, the ExtractPlan memoizes the failed goal set. This is a kind of nogood learning that can be exploited in future (backward) searches. If a failed goal set is regressed t