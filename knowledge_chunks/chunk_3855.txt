ust also use D, for a total cost of 9 (C + D + 2) compared to the cost of 6 that we get by going through B. The problem is that the choice of which node to expand next must depend not only on (9) (5) (3) (4) (5) (#0) (3) (4) (45) (10) (a) (b) Fig. 3.7 AND-OR Graphs Heuristic Search Techniques 65 the f value of that node but also on whether that node is part of the current best path from the initial node. The tree shown in Fig. 3.7(b) makes this even clearer. The most promising single node is G with an f value of 3. It is even part of the most promising arc G-H, with a total cost of 9, But that arc is not part of the current best path since to use it we must also use the arc I-J, with a cost of 27. The path from A, through B, to E and F is better, with a total cost of 18. So we should not expand G next; rather we should examine either E or F. In order to describe an algorithm for searching an AND-OR graph, we need to exploit a value that we call FUTILITY. If the estimated cost of a solution becomes greater than the value of FUTILITY, then we abandon the search. FUTILITY should be chosen to correspond to a threshold such that any solution with a cosflibove it is too expensive to be practical, even if it could ever be found, Now we can state the algorithm. Algorithm: Problem Reduction 1. Initialize the graph to the starting node. 2. Loop until the starting node is labeled SOLVED ox until its cost goes above FUTILITY: (a) Traverse the graph, starting at the initial node and following the current best path, and accumulate the set of nodes that are on that path and have not yet been expanded or labeled as solved. (b) Pick one of these unexpanded nodes and expand it. If there are no successors, assign FUTILITY as the value of this node. Otherwise, add its successors to the graph and for each of them compute f (use only h and ignore g, for reasons we discuss below). If of any node is 0, mark that node as SOLVED. (c) Change the f estimate of the newly expanded node to reflec