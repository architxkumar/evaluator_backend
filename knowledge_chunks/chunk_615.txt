utes to walk across the bridge. Being suspicious of each other, the countries would like Black and White to walk across at the same time. Pose the above problem as a temporal planning problem. Given instance of the two durative actions ThrowLeft(x) and ThrowRight(x) (from (Coles et al., 2009) shown in the Figure 10.33, show how the plan of a robot juggling three balls would look like. Planning operators in the PDDL family of languages are expressed using preconditions and effects. Take an example operator and show how it can be represented in the Compatibility formalism defined in CAIP. 1 They can, however, be encoded as new positive propositions. For example, the fluent clear(x) in the blocks world domain is equivalent to the condition UA y(on(y, x)). The fact that actions explicitly add and delete this fluent makes it unnecessary to verify the equivalent form logically. 2 We have adopted shorter names for some predicates to facilitate drawing planning graphs. Here, Hold(A) is a shortened form of Holding(A). 3 Occam's razor. See http: en.wikipedia.org wiki Occam 27s razor 4 Comparing the sizes is sufficient. The two sets will be equal as well, but checking for set equality is more expensive. 5 A mandatory check in most Indian cities. 8 As of writing, this PDDL does not cater to nondeterminism in effects. 7 Which is equivalent to 7 Hold,(C) PkUp(C)A Hold,(A) UnSt(A, B) or (Hold,(C) PkUp(C)) V 7 (Hold,(A) UnSt(A, B)) 8 Numbered in the same manner as the planning graph. 9 As opposed to classical predicates in FOL that are either true or false, once and for all. 10 We will stick to our planning graph based numbering. The numbering adopted by Kautz and Selman in the original papers was different. 11 ArmEmpty, the proposition used in STRIPS, can be thought of being equivalent to Holding(nil). 12 Again, we stick to Graphplan styled numbering of layers. 13 We can use the sum of the costs of actions, if actions have costs associated with actions. 14 The weighted A algorithm