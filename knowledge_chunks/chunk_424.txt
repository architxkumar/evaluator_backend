of making a sequence of moves from a given Start state ending in a desired Goal state. We assume that the moves themselves are generated by a move generating function moveGen. But states have to be represented in some language, and the moveGen function operates upon that representation. Often it makes sense to focus directly on those representations rather than view the problems at the abstract level of state space search. However, we have to be careful that our formulations are general enough to allow for the design of domain independent algorithms. In Chapter 7, we looked at the formulation of planning problems in which the moveGen function was replaced by its constituent operators. In this chapter, we look at an alternate formulation of problems in which we describe the constraints that the solution must satisfy. The Constraint Satisfaction Problem (CSP) is a problem that specifies these constraints. The CSP is described as a set of variables, a set of domains for the variables where each domain contains allowable values for the variable, and a set of constraints that must be satisfied in any solution. A CSP, or a constraint network, is a triple (X, D, C) in which, Xis a finite set of variables x,, Xo, ..., Xn , Dis a set of domains D,, Dz, ..., Dp with each domain D; containing values that the corresponding variables can take, and Cis a set of constraints Cy, C2, ..., Cy on some subsets of X. Each C; is a relation Rj on a subset S; X of a variable called the scope of C;. The constraint C; can be viewed as a pair S;, Rj . The relation R; may be expressed as an intension, for example x; X,, or if the domains are finite, it could be expressed as an extension. Without any loss of generality, we assume that there is at most one constraint for a given scope. If there are more than one constraints, one can always combine them by the logical AND operation, which in the extension form will manifest as set intersection. The solution of a CSP is an assignment x;, vix x; X,