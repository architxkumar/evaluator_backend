more than one constraints, one can always combine them by the logical AND operation, which in the extension form will manifest as set intersection. The solution of a CSP is an assignment x;, vix x; X, Vix Dj for all variables of X such that every constraint in C is satisfied. Observe that while the solution constitutes of a consistent assignment of values of al variables, the constraints themselves are often local, each being over a few variables. If there are n variables in the CSP and the domain of each has k values, then a brute force algorithm would have to look k combinations in the worst case. We would like to better than that, and as we shall see in the chapter, algorithms that work locally on a smaller set of variables can be employed to reduce the search space. The task of solving CSPs is approached with a two pronged strategy. The first is to prune the search space by a process of constraint propagation. The second is to search in an efficient manner. We look at both these strategies in this chapter. The following is an example of a CSP with finite domains, Problem CSP1 X X4, Xo, X3 D Dj, Do, D3 where D, Do D3 1, 2, 3 C Cy2, Co3 where S12 x1, Xg and So3 X2, X3 and R42 and Ro3 are defined below. The constraint C1 has scope S72 x1, X2 . We will use a shortcut to represent this fact. That is, the indices of Sj will implicitly identify the variables x; and x; as the variables that form the scope. The corresponding relation Ryz D, Dz is a relation on the variables x, and X2. We use the notation x, y to stand for the pair of allowable values, x D, and y Dz for the two corresponding variables, in this case xX, and Xo, and likewise for the other constraint C23. We may specify the relations as an intension, Ri2 x, y x Dy, y Do, and x y and Roa x, y x Do, y D3, and x y or we could specify them as extensions, Ry2 1, 2 , 1, 3 , 2, 3 and Rog 1, 2 , 1, 3 , 2, 3 Observe that if the domains of the variables had been infinite, we could have still used the intensional form 