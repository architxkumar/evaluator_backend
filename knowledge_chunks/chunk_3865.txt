ter 14, is a version\of this constraint satisfaction algorithm with the guessing step eliminated. In general, the more powerful the rules for propagating constraints, the less need there is for guessing. To see how this algorithm works, consider the cryptarithmetic problem shown in Fig. 3.13. The goal state is a problem state in which ail letters have been assigned a digit in such a way that all the initial constraints are satisfied. Problem: SEND + MORE Initial State: No two letters have the same value. The sums of the digits must be as shown in the problem. Fig. 3.13 A Cryptarithmetic Problem The solution process proceeds in cycles. At each cycle, two significant things are done (corresponding to steps I] and 4 of this algorithm): I. Constraints are propagated by using rules that correspond to the properties of arithmetic. 2. A value is guessed for some letter whose value is not yet determined. In the first step, it does not usually matter a great deal what order the propagation is done in, since all available propagations will be performed before the step ends. In the second step, though, the order in which guesses are tried may have a substantial impact on the degree of search that is necessary. A few useful heuristics can help to select the best guess to try first. For example, if there is a Jetter that has only two possible values and another with six possible values, there is a better chance of guessing right on the first than on the second. Another useful heuristic is that if there is a letter that participates in many constraints then it is a good idea to prefer it to a letter that participates in a few. A guess on such a highly constrained letter will usually lead quickly either to a contradiction (if it is wrong) or to the generation of many additional constraints (if it is right), A guess on a less constrained letter, on the other hand, provides less information. The result of the first few cycles of processing this example is shown in Fig. 3.14. Since c