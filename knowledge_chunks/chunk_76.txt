 the simplest loop would be when a tile is moved back and forth endlessly. For the tiny search problem of Figure 2.10, a possible trace of the search algorithm is shown below in Figure 2.11, in which the same nodes are visited again and again. Mazes are a very good example where infinite loops lurk dangerously. They also illustrate the nature of difficulty in the search. See the accompanying FIGURE 2.11 Simple search may go into loops. One possible evolvement of OPEN is shown above. The node picked at each stage is underlined. Box 2.3: The Problem of Visibility in Search Anyone who has gone trekking in the mountains would have experienced the following. You are at a peak looking down towards a village in the valley. You can clearly chart a path through the woods on the way down, past those set of boulders, back into the woods, and then following a path along the sunflower fields. But when you start descending and enter the woods, the perspective and clarity you had from the top curiously vanishes. A similar problem is faced by people navigating a network of roads. It is all very clear when you are poring over a map. But down at the next intersection, it becomes a problem which road to take. The search algorithms we are trying to devise do not have the benefit of perspective and global viewpoints. They can only see a node in the search space, and the options available at that node. The situation is like when you are in a maze. You can see a number of options at every junction, but you do not have a clue about the choice to make. This is illustrated in Figure 2.12. In the next chapter, we will investigate methods to take advantage of clues obtained from the domain. If for example, one of the paths in the maze has a little more light than the others, it could be leading to an exit. FIGURE 2.12 In a maze, one can only see the immediate options. Only when you choose one of them do the further options reveal themselves. Box 2.3 for a note on the limited visibility in sear