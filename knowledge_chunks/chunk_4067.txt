 formally, it indexes binary predicates [such as team|{ Three-Finger-Brown, Chicago-Cubs) by their first argument. As a result, retrieving the value for an attribute of an entity is fast. It makes it easy to describe properties of relations. To do this in a purely logical system requires some higher-order mechanisms. [tis a form of object-oriented programming and has the advantages that such systems normally have, including modularity and ease of viewing by people. We describe two views of this kind of structure: semantic nets and frames. We talk about the representations themselves and about techniques for reasoning with them. We do not say much, though, about the specific knowledge that the structures should contain. We call these knowledge-poor structures weak, by analogy with the weak methods for problem solving that we discussed in Chapter 3. In the next chapter, we expand this discussion to include strong slot-and-filler structures, in which specific commitments to the content of the representation are made. 9.1 SEMANTIC NETS The main idea behind semantic nets is that the meaning of a concept comes from the wavs in which it is connected to other concepts. In a semantic net, information is represented as a set of nodes connected to each Weak Slot-and-Filler Structures 189 Oooo other by a set of labeled arcs, which represent relationships among the nodes. A fragment of a typical semantic net is shown in Fig. 9.1. Mammal f isa Person | has-part | Nose uniform- { instance Blue |. _Solor | Pee-Wee-Reese | feam Brooklyn-Dodgers Fig. 9.1 A Semantic Network This network contains examples of both the isa and instance relations, as well as some other, more domainspecific relations like team and uniform-color. In this network, we could use inheritance to derive the additional relation has-part (Pee-Wee-Reese, Nose) 9.1.1 Intersection Search One of the early ways that semantic nets were used was to find relationships among objects by spreading activation out from each of 