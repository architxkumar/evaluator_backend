ribed by Blum and Furst, works in the STRIPS domain. An action is applicable in a state if its preconditions are true in the state. Negative preconditions cannot be handled . The action may have both negative and positive effects. Negative effects delete propositions from the state, and positive effects add propositions. Figure 10.1 shows the basic difference between the state space for a planning problem and the corresponding planning graph. State space search applies an action to a given state and generates a successor state, as shown on the left. For each action that is applicable, it generates a separate candidate state, which will be a starting point for further exploration. In the figure, we assume two actions a, and apthat are applicable, with the preconditions linked by edges. The planning graph is a structure, as shown on the right, which merges the states produced by the different actions that are applicable. The resulting set of propositions forms a layer, as does the set of actions that resulted in this layer. The planning graph is a layered graph made up of such alternating sets of action layers and proposition layers. This is in contrast to the search tree of states that state space search generates. g i A P2 nO . Pa bs y PO Pr p71 Q Pr, O N 2T ) S a 2 (ee ) FIGURE 10.1 The planning graph merges the resultant states of all actions that are individually applicable in a given state. How do we interpret the set of propositions in the proposition layer? Is the union of two (or more) states a state? And what is the semantics of the action layer? Does it mean that the actions in each layer can be executed together? Let us look at a concrete example from the blocks world domain (see Chapter 7). The figure below depicts the action layer and the fact layer for a state containing three blocks. One can see that there are propositions in the new layer that cannot hold together. For example, On(A, B) and Hold(A)? cannot be true at the same time, and therefore canno