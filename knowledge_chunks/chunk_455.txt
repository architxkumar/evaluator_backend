 removed from the domain of a given variable x; then it can only affect arc consistency for a variable x; if i j. Therefore, if we enforce arc consistency from the last variable to the first, only one call to Revise needs to be made for every pair of related variables. The algorithm DAC is given in Figure 9.23 below. DAC (X (x., Xz, -. X,), D, C) 1 for j n downto 2 2 do for each i j s.t. ( i, j , Rij) C 3 D: Revise(D,, Ds, Ry;) 4 return (X, D, C) FIGURE 9.23 The algorithm DAC takes as input a CSP with an ordering on the variables and returns an equivalent CSP that is arc consistent with respect to that ordering. The algorithm inspects O(n?) pairs of variables, but makes exactly e calls to Revise, where e is the number of constraints. In each call, it does O(k2) amount of work where k is the size of each domain. The complexity of DAC is therefore O(ek?). Consider the following CSP with the same constraint graph as in Figure 9.22, but with different domains and constraints. Da r, b, v , Dg g, b, Vv , Dc r, b, m , Dp m, v, b , De r, b, m and the new relations as, A B,B E,C EandD E The reader should verify that after full arc consistency is enforced, the new domains are, Dg Dg De Dp De b However, when we do directional arc consistency with respect to the order EDCBA, we get the domains as, De b , Dp m, v, b , Dc r, b, m , Dg b, v , Da r, b, Vv Observe that the only value in Dg is b. The equality relation allows only the assignment of value b to the rest of the variables, which is indeed present in all domains. Thus, we have backtrack free search. If we had chosen the other ordering ABCDE, we would have got the domains as follows, Da b , Dg b , Dc fr, b, m , Dp m, b , De tr, m, b Now if we choose the assignments A b, B b and C r, which is allowed because C is not related to either A or B, we are at a dead end, and will have to backtrack. This is consistent with what happened in the map colouring example. The ordering EDCBA makes the graph of width 1, and induced width41,