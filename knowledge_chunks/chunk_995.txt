blems, a CBR system can still learn those solutions and reuse them in the future. This can be a basis for knowledge management in an organizational setting, where the decisions of experienced personnel are captured, and applied even when they have left. Derivational adaptation has been seen mostly in planning tasks. First introduced by Carbonell (1986), it was employed in various planning systems. Prodigy Analogy (Carbonell and Veloso, 1988) (Veloso and Carbonell, 1993) and Priar (Kambhampati and Hendler, 1992) were some of the first systems that used derivational adaptation in a domain independent fashion. The basic idea behind these approaches is that cases are represented at various levels in a hierarchy of abstractions (Cox et al., 2006). When a new problem arrives, a case at an appropriate level is retrieved and refined into a plan using derivational adaptation. DerSNLP (Ihrig and Kambhampati, 1997) and CAPlan CbC (Mujfioz-Avila and Weberskirch, 1996) applied derivational adaptation to partial order planning. Constructive adaptation is a variation on derivational adaptation that uses heuristic search to construct the solution, and uses the retrieved cases to guide the search process (Plaza and Arcos, 2002). We have not discussed the situation when cases are made up of free form text, which is so in many situations where people jot down problems in the form of tickets and some experts solve them and jot the solution down. In textual cases, the vocabulary is the words of a natural language. Unlike the structural representation, words are not associated with values from a domain. The case is just a collection of sentences. While words do have a meaning for us, most textual CBR systems do not tend to use meaning or semantics for similarity computation. Instead, we borrow techniques from Information Retrieval. Document Retrieval is probably a more apt term since the output is usually a matching document. In the vector space model, we do assign a value or weight to e