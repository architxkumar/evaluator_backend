ed by EHC. Observe that having picked up A, FF needs to do something with it. If it were using the helpful actions heuristics, it would have pruned away the PutDown(A) action, and would then get stuck holding block A. One way of avoiding this kind of a deadlock is to try and do some pre-processing to determine a goal ordering in advance, and then have the EHC algorithm operate on the goals incrementally in the given order. This would need some heuristics to decide upon the goal ordering. To cater to some of the cases where FF misses out on the desired actions and commits to a wrong set of actions, it has a built-in restart facility. In the breadth first mode, if the number of successors who are not better exceeds a threshold, the search aborts and restarts. Given the memory of closed nodes that it keeps, the new explorations will be in a different direction. 10.4.3 Fast Downward The algorithm Fast Downward by Malte Helmert combines the forward search of FF with a new heuristic based on causal graph analysis, and is described briefly below. For more details, the interested reader is referred to (Helmert, 2004; 2006; 2008). The Fast Downward program also extends the richness of domain a planner can handle. Like metric FF (Hoffmann, 2003), it could also handle metric resources and conditional effects. Metric resources are fluents that can take numerical value, for example temperature, capacity in a parking lot, or amount of fuel in the tank. Handling metric resources involves handling arithmetic expressions, comparing quantities (for example fuel 10), and assigning new values in the effects of the action (for example fuel fuel - distance rate). Extending to metric resources is natural for Fast Downward because the representation it uses is the state-variable representation, referred to as multi-valued planning tasks (MPT) in the associated literature. The program also handles derived predicates and conditional effects, both in a similar manner. Derived predicates are p