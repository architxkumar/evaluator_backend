 constraints. Let us say the goal (again) is simply that A should be on C, and C should be on the table. Assuming that we are looking for a plan of maximum k steps, we expect the following sequence of states to occur Sp, Sy, ..., S,. Also we expect the final state to satisfy the goal constraints, On(A, S,) C, OnT(C) 1 The state transitions are produced by instances of operators. The operators can be defined as before, using the preconditions and effects. For example, we use UnSt(x, y) to represent the Unstack action as used by STRIPS in the blocks world. UnSt(x, y) preconditions: On(x) y, Holding(arm) nil, Clear(x) 1 effects: Holding(arm) x, Clear(y) 1 and likewise, the Stack action as, Stack(x, y) preconditions: Holding(arm) x, Clear(y) 1 effects: On(x) y, Holding(arm) nil, Clear(y) 0 The PkUp and PtDn (putdown) action can be similarly defined, and are left as an exercise. Given the start state and the goal state, the task of planning is to find a sequence of actions that will result in the goal states. Let us assume that the plan is a linear plan of bounded length k. This means we are looking for a sequence of actions (a1, ag, ..., a,x). Each element of this sequence is an action variable. The domain of action variables contains the names of actions that are possible, including the No-op. Thus, for every action a, the domain D, is defined as follows: Dg UnSt(A, B), UnSt(A, C), UnSt(C, B), UnSt(C, B), UnStB, A), UnSt(B, C), Stack(A, B), Stack(A, C), Stack(C, B), Stack(C, B), Stack(B, A), Stack(B, C), PkUp(A), PkUp(B), PkUp(C), PtDn(A), PtDn(B), PtDn(C), No-op The No-op action is needed in cases where the plan found has a length smaller than k. In the CSP, the task is to find an appropriate value from the above domain for each of the action variables a;, 1 is k. The values for the action variables are determined by, 1. The start state 2. The goal constraints 3. The relation between actions and their preconditions 4. The relation between actions and their effects The