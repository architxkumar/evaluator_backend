space requirements. This will enable us to work on complex problems with large search spaces. The cost we may have to pay is in terms of completeness. While Best First Search is complete for finite spaces, it becomes impractical if the search spaces are too large. There is still a market for heuristic algorithms to search these spaces, even though they may not always find the solution. 3.3 Hill Climbing If our heuristic function is good then perhaps we can rely on it to drive the search to the goal. We modify the way OPEN is updated in Best First Search. Instead of, OPEN append (sort, (NEW, tail(OPEN))) we can try using OPEN sort, (NEW), where, NEW is the list of new successors of the nodes just expanded. Observe that in doing so we have jettisoned the nodes that were added to OPEN earlier. We have burned our bridges as we move forward. A direct consequence of this will be that the new algorithm may not be complete. But having done this, we might as well not maintain an OPEN list, since only the best node from the successors will be visited. The revised algorithm is given in Figure 3.7. Hiliciimbing() node start newNode Head(Sort, (MoveGen (node) )) while hA(newNode) h(node) B Wd b? do node newNode ow newNode Head(Sort, (MoveGen (node) )) return newNode FIGURE 3.7 Algorithm Hill Climbing. Observe that this algorithm has modified our problem solving strategy considerably. In the search algorithms we saw till now, the termination criterion was finding the goal node. In Hill Climbing, the termination criterion is when no successor of the node has a better heuristic value. Searching for the goal has been replaced with optimizing the heuristic value. The problem has been transformed into an optimization problem, in which we seek the node with the lowest heuristic value, rather than one that satisfies the goalTest function. This is consistent with the notion that the goal state has the lowest heuristic value, since the distance to the goal is zero. We will also intermitte