 would have to commit to a set of actions. Conformant planning aims at building plans that can cater to different situations but in which sensing of the state is not allowed. The uncertainty may be in knowing the facts (state) or in the effects of actions (resulting state). David Smith and Daniel Weld show how Graphplan can be extended to perform conformant planning in a system call Conformant Graphplan (CGP) (Smith and Weld, 1998). CGP represents uncertain knowledge by a disjunction of propositions, or using the exclusive-or. For example, a technician may not be sure whether an instrument has been calibrated or not before using it. Then a conformant plan could be to calibrate it anyway before using it. Smith and Weld approach such uncertainty by constructing planning graphs for each of the possible worlds in which a component of the disjunction (or XOR) might be true, and then finding solutions in each of them. We illustrate how CGP tackles the bomb disposal problem, first posed by McDermott (McDermott, 1987) as described in (Smith and Weld, 1998). Consider a planning problem in which you have two packages and exactly one of them contains a bomb. This fact is represented by (In(bomb, packagel) In(bomb, package2)). The exclusive-or entails that there are two possible worlds, one w, in which the bomb is in package, and the other wz in which it is in package2. Let there be exactly one toilet that you have access to and an action called Dunk defined as follows, which can diffuse the bomb. (:action dunk iparameters (?p - package ?t -toilet) precondition :effect (when (in bomb ?p) (diffused bomb) )) The action says that if you dunk a package in the toilet then if the package contains the bomb, the bomb will be diffused. This action has only one aspect with non-empty effects, (:action dunk :parameters (2p - package ?t -tcilet) :precondition (in bomb ?p) :effect (diffused bemb) ))) The action Dunk will have two instances Dunk (p1, t) and Dunk (p2, t). Each instance will be