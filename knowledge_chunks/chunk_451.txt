iables. Problem CSP7 (X, D, C) ( x4, Xa, Xa , fr b , fr, b , fr, BY , (X4, Xa , x1 X2), ( X2, Xa , X2 X3) Enforcing path consistency implies creating a new relation R13 with scope Xx4, X3 , Ris (r, 1), (b, b) Often, specially when enforcing higher order consistency, one may represent the complement of a relation rather than the relation because the complement is explicitly known and usually smaller. The complement of the relation is known as a nogood, and captures those tuples that are not allowed. The nogood inferred for the above problem would be, Ri3 (r, 8), (6, r) Enforcing i-consistency may introduce nogoods, or equivalently relations, of arity (i- 1). This means that some tuples from the relation of arity (i 1) may be removed. If that happens then the CSP may lose (i 1)-consistency, even if it was (i 1)-consistent earlier. The example in Figure 9.21 shows a case when enforcing path consistency on a three variable binary, CSP disrupts arc consistency that was there earlier. Remember that algorithm PC-2 removes only relations or edges, and the corresponding nodes still remain in the domains. De a a FIGURE 9.21 Enforcing path consistency on an arc consistent network may disrupt arc consistency. The matching diagram on the left is arc consistent but not path consistent. Applying the algorithm PC-1 or PC-2 gives us the diagram on the right that is path consistent but not arc consistent. We leave the reader with the following question. If one wants to achieve strong k-consistency then will the enforcement of decreasing orders of consistency do the job? Achieving more and more consistency reduces the amount of effort a search algorithm will have to put in. If the constraint network has n variables, achieving strong n-consistency will obviate the need for search altogether. This is because at every stage after having chosen a set of (i 1) consistent values for the first (i- 1) variables, the procedure will not reach a dead end because -consistency ensures that a consi