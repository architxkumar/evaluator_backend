ved and also a representation of the moves or decisions that the agent has to choose from to solve the problem. Our endeavour will be to write the algorithms in a domain-independent manner. Then the algorithms will be general purpose in nature and could be adapted to solve problems in different domains as depicted in Figure 2.2. A user would only have to implement the domain description and call the domain specific functions from the general program. Domain-independent problem-solving algorithms Domain-independent algorithm-1 Domain-independent Domain-independent algorithm-2 algorithm-3 ie Domain functions Domain functions Domain functions for domain-1 for domain-2 for domain-3 Domain descriptions FIGURE 2.2 The goal is to develop general problem solving algorithms in a domainindependent form. When a problem is to be solved in a domain then the user needs to create a domain description and plug it in a suitable problem solving algorithm. We model the problem solving process as traversing a state space. The state space is a space in which each element is a state. A state is a description of the world in which the problem solver operates. The given situation is described by a state called the START state. The desired or the goal situation is described by one or more GOAL states. In any given state, an action or a decision by the agent changes something and the agent makes a move to a new state. The task is to make a sequence of moves, such that the agent ends up being in a goal state. The set of choices available to us implicitly define the space in which the decision making process operates. We do not assume that the entire state space is represented in some data structures. Instead, only the states actually generated by the agent exist explicitly. The unseen states are only implicit. In this implicit space, we visualize the problem as follows. Initially, we are in some given state, or the START state. We desire to be in some state that we will call the GOAL state, a