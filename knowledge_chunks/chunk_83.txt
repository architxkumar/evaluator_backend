 BFS, on the other hand, looks at all the nodes at one level before proceeding to the next level. When examining its fifth node, it has started with level two. How do the two search methods compare? At this point, we introduce the basis for comparison of search methods. The search algorithm is evaluated on the following criteria: Completeness: Does the algorithm always find a solution when there exists one? We also call a complete search method systematic. By this we mean that the algorithm explores the entire search space before reporting failure. If a search is not systematic then it is unsystematic, and therefore incomplete. Time Complexity: How much time does the algorithm run for before finding a solution? In our case, we will get a measure of time complexity by the number of nodes the algorithm picks up before it finds the solution. Space Complexity: How much space does the algorithm need? We will use the number of nodes in the OPEN list as a measure of space complexity. Of course, our algorithm also needs to store CLOSED, and it does grow quite rapidly; but we will ignore that for the time being. There are two reasons for ignoring CLOSED. Firstly, it turns out that on the average it is similar for most search methods. Secondly, we also look at search methods which do not maintain the list of seen nodes. Quality of Solution: If some solutions are better than others, what kind of solution does the algorithm find? A simple criterion for quality might be the length of the path found from the start node to the goal node. We will also look at other criteria in later chapters. 2.5 Comparison of BFS and DFS How do Depth First Search and Breadth First Search compare? Let us look at each of the criteria described above. 2.5.1 Completeness Both Depth First Search and Breadth First Search are complete for finite state spaces. Both are systematic. They will explore the entire search space before reporting failure. This is because the termination criterion for both is the 