e a ruler? Answering these questions involves finding a known statement that matches the terms given in the question and then responding with another piece of that same statement that fills the slot dcuanded by the question. For example, to answer the question When did Marcus die? we need a statement of the form died(Marcus, 7) with ?? actually filled in by some particular year. So, since we can prove the statement died(Marcus, 79) we can respond with the answer 79. It turns out that the resolution procedure provides an easy way of locating just the statement we need and finding a proof for it. Let s continue with the example question Prove: Ax: hate(Marcus,x) /\ rulerx} (negate): ndx : hate(Marcus,x) \ ruler(x) {clausify): ahate(Marcus,x) \/ 7ruler(x) hate(Marcus, x) \/ ~ruler(x) hate (Marcus, Paulus) Pautus/x -aruler(Paulus) (a) shate(Marcus, x) \/ sruler(x) _shate(Marcus, Julian) Julian |x tuler( Julian) (b) hate (Marcus, x) \/ ruler(x} hate(Marcus, Caesar) Caesar/x ruler (Caesar) ruler (Caesar) {) Fig. 5.13 Trying Several Substitutions When did Marcus die? In order to be able to answer this question, it must first be true that Marcus died. Thus it must be the case that dr: died(Marcus,t) A reasonable first step then might be to try to prove this. To do so using resolution, we attempt to show that -dr: died(Marcus, i) produces a contradiction. What does it mean for that statement to produce a contradiction? Either it conflicts with a statement of the form Vr. died(Marcus, t) Using Predicate Logic 123 where is a variable, in which case we can either answer the question by reporting that there are many times at which Marcus died, or we can simply pick one such time and respond with it. The other possibility is that we produce a contradiction with one or more specific statements of the form died(Marcus, date) for some specific value of date. Whatever value of date we use in producing that contradiction is the answer we want. The value that proves that there is a val