hroughout this example. 1. 2. 3. Step Addition Creating new steps for a plan. Promotion Constraining one step to come before another in a final plan. Deciobbering Piacing one (possibly new) step s, between two old steps s, and s,, such that s, reasseris some Precondition of s, that was negated (or clobbered ) by s,. Simple Establishment Assigning a value to a variable, in order to ensure the preconditions of some step. Separation Preventing the assignment of certain values to a variable. Fig. 13.8 Heuristics for Planning Using Constraint Posting (TWEAK) 264 Artificial Intelligence To achieve the preconditions of the two steps above, we can use step addition again: * CLEAR(A) * CLEAR(B) ONTABLE(A) ONTABLE(B) * ARMEMPTY * ARMEMPTY PICKUP(A) PICKUP(B) + ONTABLE(A) 7 ONTABLE(B) = ARMEMPTY 3 ARMEMPTY HOLDING(A) HOLDING() Adding these PICKUP steps is not enough to satisfy the *HOLDING preconditions of the STACK steps. This is because there are no ordering constraints present among the steps. If, in the eventual plan, the PICKUP steps were to follow the STACK steps, then the *HOLDING preconditions would need to be satisfied by some other set of steps. We solve this problem by introducing ordering constraints whenever we employ step addition. In this case, we want to say that each PICKUP step should precede its corresponding STACK step?: PICKUP(A) STACK(A, B) PICKUP(B) ~ STACK(B, C) We now have four (partially ordered) steps in our plan and four unachieved preconditions. CLEAR(A) is unachieved because block A is not clear in the initial state. *CLEAR(B) is unachieved because although B is clear in the initial state, there exists a step STACK(A, B) with postcondition -CLEAR(B), and that step might precede the step with *CLEAR(B) as a precondition. To achieve precondition CLEAR(B), we use a second heuristic known as promotion. Promotion, first used by Sussman in his HACKER program [Sussman, 1975], amounts to posting a constraint that one step must precede another in the event