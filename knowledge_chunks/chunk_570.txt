ng two approaches. The program Sapa adapts the algorithm A to search with durative actions and metric resources directly. The program CRIKEY3 splits each durative action into two instantaneous ones and deploys an FF like approach for forward state-space search. Both algorithms use a variation of a relaxed temporal planning graph to guide search, which becomes a critical feature given that the spaces they explore are much larger than the ones encountered by planning in the STRIPS domain. 10.5.2 Sapa Sapa (Do and Kambhampati, 2001a; 2003) is a forward state space search metric temporal planner that can handle deadlines on goal achievement. The search space defined by Sapa is made up of nodes of the following kind. Each node is a tuple S (P, M, 1, Q, t) where, tis the time stamp of the current state, P p,, t t is a set of logical fluents p; true at time , and t; is the time at which t; was last made true, Mis the set of values for all metric fluents at time t, mis a set of overall conditions that need to be preserved at time , and Q ( m, q;, t t is an event queue of all events scheduled to happen after time t, along with the times they are scheduled to occur. m is the mode stating what kind of change is to happen. These events are the at-end effects? of actions that have been selected, and the overall conditions that need no longer be protected and can be removed from P. In addition, one needs a structure to store the plan being synthesized. The search algorithm in Sapa has two kinds of moves. The first kind selects and adds a new action to the partial plan, and the second kind advances the time to the next event in the event queue. The latter is applicable when the event queue is not empty. Both kinds of moves modify the state S. An action a is applicable in a node S (P, M,N, Q, t), if the following conditions hold. All logical preconditions of the action are satisfied in P. All metric preconditions are satisfied in M. No effect of the action interferes with any persi