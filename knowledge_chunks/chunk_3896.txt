llmore, 1968} and its use in natura] language understanding in Section 15.3.2. For the moment, you can safely assume that the cases mean what their names suggest. 90 Artificial Intelligence P D John< > PROPEL ~# fist ~ Poss-by ft Poss-by Joh John > fist =>Physcontact Yon Mary John | Mary A ! John < > MOVE Poss-by| 0 John > ret John punched Mary. Y (a) Mary P o D Mary< > PROPEL ~ fist < t Poss-by[} Poss-by Mary Mary > fist <=> Physcontact Johan Mary | John | Mary < > MOVE A Poss-by|o Mary > Fist A D Mary punched John. [ (b) John Fig. 4.10 Redundant Representations There are several arguments against the use of low-level primitives. One is that simple high-level facts may require a lot of storage when broken down into primitives. Much of that storage is really wasted since the low-level rendition of a particular highlevel concept will appear many times, once for each time the highlevel concept is referenced. For example, suppose that actions are being represented as combinations of a small set of primitive actions. Then the fact that John punched Mary might be represented as shown in Fig. 4.10(a). The representation says that there was physical contact between John s fist and Mary. The contact was caused by John propelling his fist toward Mary, and in order to do that John first went to where Mary was. But suppose we also know that Mary punched John. Then we must also store the structure shown in Fig. 4.10(b). If, however, punching were represented simply as punching, then most of the detail of both structures could be omitted from the structures themselves. It could instead be stored just once in a common representation of the concept of punching. A second but related problem is that if knowledge is initially presented to the system in a relatively highlevel form, such as English, then substantial work must be done to reduce the knowledge into primitive form. ? The representation shown in this example is called conceptual dependency and is discussed in detail in Sect