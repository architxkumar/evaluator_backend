lause must be the negated goal, because that is what leads to the contradiction. All other clauses or definite. A definite clause with only a positive literal is a fact, and a definite clause with negative rule. The set of clauses in the Alice problem described in Section 12.3.2 are Horn clauses, and henc 1 is possible. The following figure shows an SLD variation of the derivation from Figure 12.10. O -0vS P SPR 57 24 27 yo .18 An SLD derivation for the problem from Figure 12.10. and V' -V. If one had a negative goal for example 7U it could be proved trivially but Prolog does section. rve that the clauses 7U and 7V are not definite clauses and cannot take part in a derivation for a def goal clauses. Instead, Prolog implements a feature called negation as failure. We shall look at that 1egation as negative). Such negative facts can be handled by converting them to clauses like U' and able using SLD resolution, resolution is not complete in general. For example, one cannot show that the following set of c VQ Vv 3Q VQ 2 V 73Q jure 12.17. Obse: has been shown to be complete for Horn clauses, and hence for whatever knowledge bases one ca i ic program is a set of definite clauses. Each negative clause represents a possible goal, shown as h yal invokes a arin RBA ise form there exists the possibility of constraining search to find proofs faster. i disjunctive goal would result in a set of negative clauses. Each call to the liom made sequence of inferences. In that sense a logic programming language al language. The programmer does not have to specify what to do next. She has to only specify the thea differant ctatamante in tarme nf rijslac and farte Cambhinad with the fact that ana ran aytrarct th, y kazirhut. om B 7 moat a c O) 5 lo) LJ .19 The tree structures for the lists A B , A B C D , and A B C respectively. The circular node is also known as the dotted pair it child points to the head of the list and the right child to a list that is the tail of the given list. iter