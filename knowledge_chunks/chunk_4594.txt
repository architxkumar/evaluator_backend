Y L = [4,5,6] The first clause succeeds here binding L_ for the last recursive call thus triggering the unwinding. Vv X=2 Li={} 12 = [45,6] L3 = [4,5,6] L3 is bound { X=] L1 = [2] L2 = [4,56] L3 = [2.4,5,6] L3 = [1,2,4,5,6} O = [1,2,3,4,6] The member predicate can also be used in different ways. For instance it can be used to find the former elements of a list as in | ?- append(A,[4,5.6],[1,2,3,4,5,6]). A=[1.2,3] or the latter portion as in 512 Artificial Intelligence Ce ad 1 2append(11,2,3].Z.[1,2,3,4,5,6)). Z=[4.5,6] It can be used to verify whether two known lists append to form another known list. { ?- append([ 1.2.3}, [4,5,6],[1.2,3,4,5,6]). yes Length of a list The following program finds the length of a list. tength({],0). length({_\Tail],Len):- length(Tail,Len!), Len is Leni+1. The first clause which finally terminates the recursion, states An empty list has zero length. The second clause makes a recursive call to find the length of the tail of the list. The last suabgoal computes the length of the list by incrementing Len while the recursion unwinds. The predicate can also be used to venfy the length of a known list. N member of a List Given the index of an element, the following program can retrieve the associated element in a known list. nthmember( 1,{Head\_], Head}:-!. nthmember(N,{_\Tail], Item)-- Ni ts N-1, nthmember(N1,Tail,ltem). The first clause states If the index requested was i then the desired element is the Head of the list. The second decrements the index N and recursively calls the predicate till the index is 1 so as to return the Head of the current Tail as the N member. As in the previous case this predicate too can be used to verify whether a known element is placed at the indexed location in the list. The reader is urged to investigate list based programs for finding the index of an element in a list, replacing an element and inserting and deleting of elements within. 25.13 DYNAMIC DATABASES PROLOG provides a nove] way of inserting, modif