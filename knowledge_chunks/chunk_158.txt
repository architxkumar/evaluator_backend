ing. For example, one can visualise the 2-edge-exchange undoing a crossed path ina tour (if the move shown in the figure were reversed). It also allows for using a heuristic like selecting longer edges to be removed from a given tour. In general, using a higher k-exchange operator gives a denser neighbourhood. In the case where k n, the entire search space comes in the neighbourhood, as perturbations are no longer local. The graph is fully connected as all permutations become neighbours. We have seen that a deterministic search method like Variable Neighbourhood Descent (Chapter 3) can exploit increasingly denser neighbourhood functions. The TSP problem, like the SAT problem, allows for a number of neighbourhood functions of increasing density, and one can implement algorithms that work within the capacity of a given set of resources. 4.4.3 GAs for TSP Instead of perturbing a given solution, GAs generate new candidates by inheritance and recombination of solution components from two parents selected, based on their fitness. The idea is to serendipitously combine good components that occur in the two parents. In the TSP problem, the components are the individual segments in a tour, and also subtours made up a sequence of segments. For GAs to work well, one must be able to devise crossover operators that allow for such recombination. This is a somewhat difficult task, and different crossovers, and even alternate representations, have been tried. We look at a few of them here. Path Representation In path representation, the simple one point or multipoint crossovers defined in this chapter earlier do not work because the resulting sequences are not likely to be valid tours. For example, given two parent tours P, (2,4, 7, 1,5, 9, 8, 3.6), and P (4, 5, 7, 2, 6, 8 1, 9, 3) if we do a crossover after four segments, we get the two offspring: C; (2,4, 7, 1, 6, 8, 1,9, 3), and Cy (4, 5, 7, 2, 5, 9, 8, 3.6) Neither of the two offspring is a valid tour because cities repeat in t