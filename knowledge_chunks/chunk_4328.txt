 quickly. In Samuel s program, this was done by indexing board positions by a few important characteristics, such as the number of pieces, But as the complexity of the stored information increases, more sophisticated techniques are necessary. Generalization The number of distinct objects that might potentially be stored can be very large. To keep the number of stored objects down to a manageable level, some kind of generalization is necessary. In Samuel s program, for example, the number of distinct objects that could be stored was equal to the number of different board positions that can arise in a game. Only a few simple forms of generalization were used in Samuel s program to cut down that number. All positions are stored as though White is to move. This cuts the number of stored positions in half. When possible, rotations along the diagonal are also combined. Again, though, as the complexity of the learning process increases, so too does the need for generalization. At this point, we have begun to see one way in which learning is similar to other kinds of problem solving. Its success depends on a good organizational structure for its knowledge base. 17.3. LEARNING BY TAKING ADVICE A computer can do very little without a program for it to run. When a programmer writes a series of instructions jnto a computer, a rudimentary kind of learning is taking place: The programmer is a sort of teacher, and the computer is a sort of student. After being programmed, the computer is now able to do something it previously could not. Executing the program may not be such a simple matter, however. Suppose the program is written 350 Artificial Intelligence in a high-level language like LISP. Some interpreter or compiler must intervene to change the teacher s instructions into code that the machine can execute directly. People process advice in an analogous way. In chess, the advice fight for control of the center of the board is useless unless the player can translate the advice 