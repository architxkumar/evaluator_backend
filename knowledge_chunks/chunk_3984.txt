roach can be thought of as a conflict resolution strategy, it is usually implemented as a search contro} technique that operates on top of the states generated by rule applications. The drawback to this design is that LISP-coded search control knowledge is procedural and therefore difficult to modify. Many AI search programs, especially ones that learn from their experience, represent their control strategies declaratively. The next section describes some methods for capturing knowledge about control using rules. 6.5 CONTROL KNOWLEDGE A major theme of this book is that while intelligent programs require search, search is computationally intractable unless it is constrained by knowledge about the world, In large knowledge bases that contain thousands of tules, the intractability of search is an overriding concern. When there are many possible paths of reasoning, it is critical that Representing Knowledge Using Rules 143 Under conditions A and B, Rules that do {not} mention X {at all, in their teft-hand side, in their right-hand side} will {definitely be useless, Probably be useless Probably be especially useful definitely be especially useful} Fig. 6.8 Syntax for a Control Rule {Davis, 1980] fruitless ones not be pursued. Knowledge about which paths are most likely to lead quickly to a goal state is often called search control knowledge. It can take many forms: 1. Knowledge about which states are more preferable to others. 2. Knowledge about which rule to apply in a given situation. 3. Knowledge about the order in which to pursue subgoals. 4. Knowledge about useful sequences of mules to apply. In Chapter 3, we saw how the first type of knowledge could be represented with heuristic evaluation functions. There are many ways of representing the other types of control knowledge. For example, rules can be labeled and partitioned. A medical diagnosis system might have one set of rules for reasoning about bacteriological diseases and another set for immunological diseases. 