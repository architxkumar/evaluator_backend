anguages Chap. 3 nil (for logical false). Nil is also the same as the empty list 0. It is the only object in LISP that is both an atom and a list. Since these elements return their own value, the following are valid expressions. ->6 6 ->1 T .> NIL NIL 3.2 BASIC LIST MANIPULATION FUNCTIONS IN LISP Sometimes we wish to take atoms or lists literally and not have them evaluated or treated as function calls as, for example, when the list represents data. To accomplish this, we precede the atom or the list with a single quotation mark, as in 'man or as in '(a b c d). The quotation mark informs the interpreter that the atom or list should not be evaluated, but should be taken literally as an atom or list. Variables in LISP are symbolic (nonnumeric) atoms. They may be assigned values, that is, bound to values with the function setq. Setq takes two arguments, the first of which must be a variable. It is never evaluated and should not be in quotation marks. The second argument is evaluated (unless in quotation marks) and the result is bound to the first argument. The variable retains this value until a new assignment is made. When variables are evaluated, they return the last value bound to them. Trying to evaluate an undefined variable (One not previously bound to a value) results in an error. Some examples of the use of setq are as follows note that comments in LISP code may be placed anywhere after a semicolon). ->(setq x 10) ;the number 10 evaluates to itself 10 Js bound to x and 10 is returned ;the variable x is evaluated to 10 ;return the value it is bound to -'(etq x (*35)) xis reset to the value ( 35) 8 ;and that value returned ->(setq x '( * 3 5)) ;x is reset to the literal value (* 3 5) ;) * 3 5), quota inhibits evaluation the variable y was not previously Unbound variable V ;bound to a value, causing an error Some basic symbol processing functions are car, cdr, cons, and list. Examples these functions, are given in Table 32. Car takes one argument, which must be ki