ased programs for finding the index of an element in a list, replacing an element and inserting and deleting of elements within. 25.13 DYNAMIC DATABASES PROLOG provides a nove] way of inserting, modifying and deleting facts during runtime. It is thus possible to assert a statement, retract or modify it changing the behavior of the program in run time. Let us take the example of creating a simple database of names to form a dynamic database. The program below also uses some other predicates which will be explained to clarify other issues of PROLOG. PROLOG ~ The Natural Language of Artificial Intelligence 513 TN :+ dynamic name_db/1l. /*Deciare name_db as a predicate that has just one argument, as a dynamic one*/ enter_name;- write(-Enter name to be added correctly: *}, add_name([]). enter_name: - nl, write( Name could not be entered; Possible Error!>). discard_name:- write( Enter name to be deleted correctly: *), delete_name({}). discard_name:- nl, write(-Name could not be discarded; the entry does not exist!*). add_name(Tmp List):- geth(Char), Char =\=13,string_chars(Str,[Char]), write(Str),add_name({Char\Tmp List]). add_name(Out List):- nl,reverse_list(Out List, [ }, List), string_chars(String, List), assert(name_db(String)), write( Added ~), write(String), write( to database ), nl. delete_name(Tmp List):- getb(Char),Char =\=13,string_chars(Str,{Char]}), write(Str),delete_name({Char|Tmp List]). delete_name(Out List):- nl reverse_list(Out List,{], List), Sstring_chars(String, List), retract(name_db(String)), write( Deleted ), write(String), write( from database>), nil. reverse_list({ ], Out List, Out List). reverse_list({Head\Tail}], Tmp List, Out List):- reverse_list(Tail,{Head|Tmp List], Out List). The first statement informs the compiler that name_db/I is declared to be a dynamic predicate. Clauses for this predicate can now be added or deleted during run time. enter_name/0 uses add_name/] to get the input name string to be added to the database. Since getb/] rea