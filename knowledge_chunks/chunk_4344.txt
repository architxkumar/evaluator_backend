interleaved. Steps 2 and 3 of this procedure rely heavily on a comparison process by which similarities and differences between structures can be detected. This process must function in much the same way as does any other matching process, such as one to determine whether a given production rule can be applied to a particular problem state. Because differences as well as similarities must be found, the procedure must perform not just literal but also approximate matching. The output of the comparison procedure is a skeleton structure describing the commonalities between the two input structures. It is annotated with a set of comparison notes that describe specific similarities and differences between the inputs. To see how this approach works, we trace it through the process of learning what an arch is. Suppose that the arch description of Fig. 17.3(b) is presented first. It then becomes the definition of the concept Arch. Then suppose that the arch description of Fig. 17.3(c) is presented. The comparison routine will return a structure similar to the two input structures except that it will note that the objects represented by the nodes labeled C are not identical. This structure is shown as Fig. 17.4. The c-note link from node C describes isa] Bre Brick A Sl> a8 " c fs) 3 %, 8 \e is % Y , > ey 2 S, oon $ AY &,/ Oe J & isa-merge o isa Brick Wedge left-o F +p right-of lisa does-not-mari Y Brick Fig. 17.4 The Comparison of Two Arches 358 Artificial Intelligence emcee te eneeamatiaatleniaiintiiciaald the difference found by the comparison routine. It notes that the A difference occurred in the isa link, and that in the first structure ols the isa link pointed to Brick, and in the second it pointed to Wedge. a So NS, It also notes that if we were to follow isa links from Brick and WP oy C s a Wedge, these links would eventually merge. At this point, a new oto a fy description of the concept Arch can be generated. This description uo Y <2 could say simply that node C mu