he reader should verify that the CNF version of the above formula has only one clause with 4 literals. F (-a V -c V -d V -8 ) SAT is one of the earliest problems to be proven NP-complete (Cook, 1971). Solving the SAT problem by brute force can be unviable when the number of variables is large. A formula with 100 variables will have 21 or about 10 candidate assignments. Even if we could inspect a million candidates per second, we would need 3 x 1014 centuries or so. Clearly, that is in the realm of the impossible. Further, it is believed that NP-complete problems do not have algorithms whose worst- case running time is better than exponential in the input size. One often looks at specialised classes of SAT formulas labelled as k-SAT, in which each clause as k literals. It has been shown that 3-SAT is NP-complete. On the other hand, 2-SAT is solvable in polynomial time. For k-SAT, complexity is measured in terms of the size of the formula, which in turn is at most polynomial in the number of variables. Consider the SAT problem. It involves finding assignments to the set of variables to satisfy a given formula. For example, the following formula has five variables (a, b, c, d, e) and six clauses. (b V ac) a ( V -d) A (Ab) A (Fa V me) A ( V a0) A (-0 V md) The candidate solutions can be represented as five-bit strings, one bit for the truth value of each variable. For example, 01010 represents the candidate solution a 0, b 1, c 0, d 1, e 0 . In solution space search, we define moves as making some perturbation in a given candidate. For the SAT problem, the perturbation could mean changing some k bits. For the above example, choosing k 1 will yield five new candidates. They are 11010, 00010, 01110, 01000 and 01011. These five then become the neighbours of 01010 in the search space. If we had chosen k 2 then each candidate would have ten new neighbours (we can choose two bits in 5C2 ways). For 01010, they are: 10010, 11110, 11000, 11011, 00110, 00000, 00011, 01100, 01110,