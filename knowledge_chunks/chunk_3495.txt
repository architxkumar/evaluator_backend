a look-ahead feature which checks the categories of one or more subsequent words in the input sentence before deciding in which category to place the current word. Some researchers prefer to use deterministic parsing since they feel it more closely models the way humans parse input sentences. Nondeterministic parsers permit different arcs to be labeled with the same test. Consequently, the next test from any given state may not be uniquely determined by the state and the current input word. The parser must guess at the proper constituent and then backtrack if the guess is later proven to be wrong. This will require saving more than one potential Structure during parts of the network traversal. Examples of both deterministic and nondeterministic parsers are presented in Figure 12.8. Suppose the following sentence is given to a deterministic parser with the grammar given by the network of Figure 12.8(a): "The strong bear the loads." If the parser chose to recognize strong as an adjective and bear as a noun, the parse would fail, since There is no verb following bear. A nondeterministic parser, on the other hand, would simply recover by backtracking when failure was detected and then taking another arc which accepted strong as a noun. Example of a Simple Parser in Prolog The reader may have noticed the close similarity between rewrite rules and Horn clauses, especially when the Horn clauses are written in the form of PROLOG Sec. 12.4 Basic Parsing Techniques 245 adjective article noon verb article noon NI N2 N3 N5 N6 N 7 aux verb verb (a) A determ-stic network article - noun verb N2 N5 INS S_ noun verb Ib) A nondeterrppnjsjic netw-,rk Figure 12.8 Determiniviic and nondeterministic networks. rules. This similarity makes it a straightforward task to write parsers in a language like PROLOG. For example, the grammar rule that states that S is a sentence if it is a noun phrase followed by a verb phrase (S - NP VP) may be written in PROLOG as sentence(AC) - noun Phrase)A,B),