 a system called Extensible Universal Remote Operations Planning Architecture (EUROPA), the latest at the time of writing being EUROPA2.1 developed in 2007. The most important difference between the STRIPS based systems and the attribute based systems is that the latter allow for explicit reasoning about predicates and actions, whereas the former did so implicitly. Consider for example the STRIPS action Stack(A, B) and the resulting fluent On(A, B). The basic search algorithms for planning use actions to generate the search space to explore and the state is represented as a collection of fluents which are true. Graphplan and its derivatives introduce the notion of layers, and we can then talk about the layer in which an action occurs or a fluent becomes true or false. Planning as satisfiability or as a CSP extended the action and fluent representations by adding another parameter called time. The approach used in CA P on the other hand, follows the Event Calculus (see Chapter 13) like representation, in which both actions and fluent appear as reified arguments in higher level predicates. For example, the happening2 of a stack action may be represented as, Holds(Arm,, 10, 10, Stacking(A, B)) or Holds(Arm,, 10, 12, Stacking(A, B)) if stacking is a durative action. The statement asserts that during the specified duration, the arm is in a state of stacking block A on block B. In this example, Arm, is the attribute, and amongst other values, it can take the fluent Stack(A, B) as a value. Other kinds of values it could take are for example dle, or Tuckedin (if it is required to be tucked in while the robot moves). Likewise, Holds(Block(A), 13, 30, On(B)) could be a description of the fact that the value of the attribute Block(A) during time points 13 and 30 is On(B), an interval during which the block A is on block B. As we saw that in the description of the Remote Agent, both states and actions become values of the corresponding attributes. Thus, Arm, can be doing the ac