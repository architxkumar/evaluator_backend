licability in the planning algorithms discussed here. 7.2 Forward State Space Planning Given a state, and given a set of operators, one can determine the actions (or moves) that can be applied in the state to generate successor states. This corresponds to the implementation of the moveGen function described in Chapter 2. Forward State Space Planning (FSSP) then refers to the search algorithms that start with the given state as the start state, generate the set of successor states, and search through them generating more successors till they find a state that satisfies the goal conditions. Box 7.2: A Blocks World Problem in PDDL Figure 7.3 below depicts a planning problem from the blocks world domain. A description of the planning problem in PDDL follows. Observe that the domain field refers to the domain description named Blocks. Armempty Start state Goal On(A, B) A On(B, C) Figure 7.3 A three block planning problem. The description in PDDL. (define (problem blocksProblem1) (:domain Blocks) (:objects A - block B - block Cc - block ) (:init (onTable A) (onTable B) (on C A) (clear B) (clear C) (armempty) ) (:goal (and (on A B) (on B C))) Let effects(a) denote all the effects of action a. Let effects (a) denote the set of positive effects of action a. This is the same as the add list in the STRIPS notation. Corresponding to the delete list, we have a similar set denoted by effects"(a). Then given a state S in which the action a is applicable, the state S' after action a is applied is given by, S' S - effects"(a) U effects (a) That is, from the sets of facts representing S, we delete the facts that are not true after the action, and add the facts that become true, resulting in the new state S . We say that the state has progressed through the action a. Let us define a function progress(A, S) that returns the successor state when action A is applied to state S. Given the progress(A, S) function, the search algorithms in Chapter 2 can easily be used. They will, however, s