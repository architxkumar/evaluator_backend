arity with 7,. The next case to be picked for similarity computation is marked by the precision line. q. FIGURE 15.28 For threshold-based retrieval, termination happens when no case has bounds that contain the threshold value. The cases inspected are listed on the top. Observe that their similarity values are known completely and they are shown as points. The algorithm for Fish and Shrink retrieval is given in Figure 15.29 below. The version given here is for the case where the task is to retrieve all cases above a threshold T. The algorithm takes as input the following, Aquery Q Acase base CB - A pre-computed N N similarity matrix SIM. An entry SIM(i, ) stores the similarity between case; and case; A threshold value T The algorithm uses an array lower(N) to store the lower bounds on similarity of cases with the query Q, and an array upper(N) to store the upper bounds. We assume a similarity function Sim(case, query) is available to compute the similarity value. The variable Test stores the index of the case for which the similarity is to be computed. Observe that in the first iteration of the While loop, the first case will always be the one chosen for comparison. We assume a function GetCase(case base, i) that fetches the 4 case from the case base. The algorithm does not rank the retrieved cases. That is left as an exercise for the reader. The array simA(N,N) stores the precomputed similarities between the N cases. Fish-and-Shrink-T(qg : query, CB : case base, simA(n, n), T : threshold) 1 for ie lton 2 do Initialize 3 lower(i) 0 4 upper(i) 1 S done FALSE test 0 7 while not done 8 do done TRUE 9 pLine 0 10 for ie lton 11 do if lower(i) T 12 then if upper(i) T 13 then done FALSE 14 if upper(i) pLine 15 then pline upper(i) 16 test i 17 Ss Sim(GetCase(CB, test), q) fish 18 upper(test) s 19 lower(test) s 20 for i lton 21 do if upper(i) lower (i) 2 then shrink 23 dower(i) Max(lower(i), (s simA(test, i) - 1)) 24 upper(i) Min(upper(i), (s - simA(test, i) 1)) 25 Re 26 for 