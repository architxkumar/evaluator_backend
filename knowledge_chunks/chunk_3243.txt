return a. else return h. Note the t in the second clause preceding h. This forces the last clause to be evaluated when the first clause is not. ->(rnaximurn2 234 320) 320 a A slightly more challenging use of cond finds the maximum of three numbers in the function maximum3. .defun naxirnum3 a b C) (cond ((> P b) (cond (( a c) a) (I do I)> b c) b) (I c OO ->MAX(MUM3 28 LISP and Other Al Programming Languages Chap. 3 Trying maxinium3 we have ->(ma,iimum3 2030 25) 30 Common LISP also provides a form o' the more conventional if. then, else conditional. It has the form (if test --then-action .-:Cise-actiori For this form, test is first evaluated. It it evaluates to non iii) the ': thenaction> is evaluated and the result returned>)therwise the else-action> is evaluated and its value returned. The <else-action> is optional. It omitted, then when test evaluates to nil, the if functn returns nil. Logical Functions Like predicates, logical functions may also be used for flow of control. The basic logical operations are and, or, and not. Not is the simplest. It takes one argument and returns t if the argument evaluates to nil, it returns nil if its argument evaluates to non-nil. The functions and and or both take any number of arguments. For both, the argumehts are evaluated front to right, . In the case of and, if all arguments evaluate to non-nil, the value of the last argument is returned; otherwise nil is returned. The argumints of or are evaluated until one evaluates to non-nil, in which case it returns the argument value; otherwise it returns nil. Some examples of the operators and, or and not in expressions are ->(setq x (a b co (A B C) ->(not (atom x)) T ->)not (listp a)) NIL -(Or (member e x) (member b x)) c B c ->(or (equal 'c (Car x)) (equal 'b (car xfl) NIL -s(and lhstp a) (equal 'c (caddr x))) C ->tor (and (atom x) (equal a xl) (and (not (atom x)) (atom (Car x)))) T Sec. 3,4 Input, Output, and Local Variables 29 3.4 INPUT, OUTPUT, AND LOCAL VARIABLES Without knowin