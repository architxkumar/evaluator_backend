at a set of differences Choose the most significant difference and look for a plan to reduce that difference recursively Apply the operators chosen and look at the problem again for any more differences We can think of the GSP algorithm in STRIPS as an example of the MEA strategy. As described in Figure 7.11, the recursiveGSP algorithm looks at the goal propositions, and attempts to solve one of them before considering the next one. The STRIPS planner focuses on the goal propositions. Each goal proposition is a difference to be tackled. It chooses a goal to tackle from the goal set in a predefined manner. MEA, on the other hand, has a more top-down view of problem solving, and it requires the following set of procedures, A MATCH procedure that compares two states and returns a set of differences, if any, between them. There exists an efficient algorithm for doing this, the Rete algorithm, described in Chapter 6 in a different context. A procedure for ordering the differences to arrive at a set of goals (Ends) to be achieved Aset of operators (Means) to reduce the differences. The versatility of the algorithm depends upon the availability of knowledge for the above three procedures. In STRIPS, the set of differences is simply the set of open goals or subgoals, and as observed above, it does not order the differences. The set of operators can be provided in a modular form as in PDDL. Consequently, the algorithm can be written in a domain independent form. On the flip side, as we have seen, GSP does not always find the best plans. In more general cases, some of the above knowledge would require more domain related procedures and may not be general enough. We illustrate the MEA strategy with a few examples below. The reader is encouraged to think of the strategy as working on a partially ordered plan structure, in which actions are inserted because they address the most significant differences between the desired state and the effects in the current partial plan. In par