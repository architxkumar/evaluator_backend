The function InsertK(pair, list, K) inserts a node, sim(Q,node) pair into the list. If the list has less than K pairs, it calls the function Insert defined in Figure 15.14. If the list has K pairs then it calls the function with the rest (or tail) of the list, removing the case with lowest similarity only if the new case is better. In either case, the new case is inserted (by function nsert) in its place in the sorted order. Radius is calculated as the distance between the query and the least similar case in the retrieval list R. 15.2.5 The Inreca Tree The kd-tree is defined over numeric attributes. An extension of the kd-tree, known as the nreca tree, was developed as part of the Inreca (INduction and REasoning from CAses) projects (Althoff et al., 1998), (Bergmann et al., 1999), (Bergmann, 2001; 2002). The Inreca tree extends the kd-tree in two ways. One, it adds a branch for unknown below a node. The second is that it also caters to unordered symbol type attributes. Unlike the kd-tree, the nreca tree is not a binary tree. The two types of nodes in the Inreca tree are illustrated below. Naknown unknown ( . Waly y Numeric attribute Unordered symbol attribute FIGURE 15.24 The two types of nodes in the nreca tree. For numeric attributes, there may be an extra test for equality. For unordered symbol type attributes, there is an edge for every value. In addition, both types of nodes have an edge for unknown values as well. Figure adapted from (Althoff et al., 1998). A question that arises is the notion of distance between cases when the attributes are not numeric. One will then have to define the distances between different values of an attribute. We have seen earlier that one can explicitly define similarity values for unordered symbol type attributes. We can do so likewise for distance. Once we think of cases as points in some space, we are essentially relating distance (inversely) to similarity. For that, one needs to find the maximum difference between values, to b