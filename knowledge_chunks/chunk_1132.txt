in the ATMS. However, by themselves, these justifications are circular in nature. One needs to separate the relation between different states of the component broken in a particular fault mode, or functioning correctly and the assumptions about one of these modes. We adopt the convention used in (Struss and Dressler, 1989) that the lowercase letters are used for the assumption about the datum, and the upper case ones for the datum itself. The network of justifications then looks like as depicted in Figure 17.24. Thus for example, the node for OK;(C) could be labelled N, either because of the assumption ok3(C) being N or the node OK(C) being IN. OK ( (3) a ) lok, (C) lok, (C) lok as ) Figure 17.24 Given four fault modes for a component C, the following nodes and justifications are inserted into the ATMS. A more significant way in which reasoning with fault models is different from working only with models of correctly working components is that one may be required to make an assumption of the form 70k(C). So far in the diagnosis approach, we have seen the assumptions are only of the form ok(C), and a conflict or a nogood is a collection of such assumptions that cannot be true at together. Handling negative assumptions requires an extension to the ATMS algorithms, as for example proposed in (Dressler, 1988; 1989) and (de Kleer, 1988). The following two rules state that both an assumption and its negation cannot be made together, and also that one of the two has to necessarily be made. Let no be assumption justifying the datum No, and 7No justifying No. The two rules are, 1. The consistent belief rule. Both a datum and its negation cannot hold together. No A 7Ny DL 2. The nogood inference rule. One of Ng and 7Ng must hold. If n4, n2, ) Nk, Mo is a Nogood, then the following justification is added to the ATMS. Ny A No A... A Ny AD No Given the above extension to the ATMS, one can extend the GDE to handle fault models of components. In a system named GDE , Struss and Dre