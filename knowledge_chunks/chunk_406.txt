ord hotspot may not yield value in most positions, specially in the end game. Maven has a table of values of letter combinations near triple-word that it uses to evaluate the cost of giving such an opening. Simulation Even though one cannot generate the game tree, one can generate a plausible game tree by assuming some tiles for the opponent and for the draw, and compute the score at the end of some amount of look-ahead. If this is done a sufficient number of times then one can choose a move which on the average yields better results. Such a Monte Carlo approach was also used in Bridge in the program GIB which generated plausible hands for opponents and played out complete information games (Ginsberg, 1999). It was also used successfully in the game of Backgammon described below, where it was called a rollout. This approach becomes more feasible in the second phase described below. The second phase, or the pre-endgame stage (Sheppard, 2002), begins when there are 16 unseen tiles, 7 on the opponents rack and the rest in the bag. In this stage, some look-ahead can be done based on some educated guesses about what the opponent holds, and some informed fishing? for some desired letters. This is where the program Inference Player (Richards and Amir, 2007) would gain advantage over programs that have no idea about what tiles are in the bag and which ones on the opponent's rack. The third stage, the end game proper, begins when the bag is empty. At this stage, both players know what tiles the other player has, and the game turns into a complete information board game. The branching factor is still high, and Maven resorts to the B algorithm (Berliner, 1979) that does selective search over a game tree. 8.4.3 Backgammon One of the earliest game playing programs to make an impact at the highest level was the game of Backgammon (Berliner, 1980). It was a time when Chess programs were making progress, but were not quite at the level of human champions. Of course, Samuel s checke