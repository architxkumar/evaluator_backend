ts the subset of CB that has cases with the value of the chosen attribute larger than the chosen value 7. Function MakeBucket creates a bucket of cases and returns a pointer to the bucket. The function is called with the value of the parent argument as nil to mark the root node. We create the empty node (P emptyNode) so that children in the recursive call can establish a pointer to the parent node. The termination criterion in the above algorithm is the bucket size. This dictates the time needed to search the bucket. The reader is encouraged to try out different criteria, like the average intra bucket similarity. The first choice one has to make in the algorithm is to choose the attribute to test at a given node, and the value of that attribute that is used in the test. Let us assume that the test value for each attribute is the median, which divides the cases equally into two halves. The objective is to create two partitions, such that each contains cases that are more similar to each other. The following criteria are possible. One method to do this is to compute the average global similarity between cases in the two partitions produced by each attribute. The attribute that yields the highest average similarity is used as a test at that node. Observe that this will be done at the time of building the kd-tree offline, and one presumes that one can afford more time. One can also construct a table of similarities before building the kd-tree. Another method is to use the inter-quartile distance on each attribute as shown in Figure 15.18 below. The distance is computed only along one dimension by computing the difference only on the values of the concerned attribute. Let the case base be partitioned into four equal size quarters by separators along the dimension of a given attribute. The inter-quartile distance for an attribute is the distance between the first quarter and the fourth quarter. As shown in the figure, this distance is the maximum, along the dimension in w