oning also prunes combinations of values, or relations, for sets of variables, keeping only those that can participate in solutions. Enforcing higher forms of reasoning is also a computationally expensive process, and one has to rely on an appropriate combination of search and reasoning to solve a specific class of problems. We have studied different combinations of reasoning that can help reduce the load of search, including ordering of variables based on the topology of the graph, combining different levels of lookahead with search, and exploiting some form of information to avoid searching fruitless combinations. The lookahead strategies described in this chapter have introduced the notion of domain independent heuristics in search. The heuristics are used to select the variable to instantiate next, as well as the values for the selected variable. The heuristic is computed not by harvesting some domain knowledge as was done in chapter 3, but are computed in a domain independent manner by exploring the future decisions with a relaxed version of the original harder problem. We will study this notion of domain independent heuristic functions in the next chapter as well as on advanced planning. In this chapter, we have confined ourselves to finite CSPs in which the domains of variables are finite sets. Many interesting problems, on the other hand, have infinite and or real domains. Many of these are well studied in specific forms such as linear programming or integer programming problems. These problems are often associated with the optimization of some objective subject to these specialized constraints. One can also associate optimizing functions with CSPs by introducing what are known as soft constraints. Soft constraints are expressed as any other constraints, except that a penalty function is associated with them. In the normal CSP, a solution is an assignment that satisfies all the constraints unequivocally. With soft constraints on the other hand, a solution ca