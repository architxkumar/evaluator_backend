l, USE-THRESH will be checked for cutoffs and PASS-THRESH will be updated to be used later.) But if the maximizing node is not at the top of the tree, we must also consider Game Playing 239 amsnaeinsemsmmannnanennneiennssnememenensancanasirssasaniios the alpha value that was passed down from a higher node. To see how this works, look again at Fig. 12.5 and consider what happens at node F, We assign the value 0 to node I on the basis, of examining node K. This is so far the best successor of F. But from an earlier exploration of the subtree headed by B, alpha was set to 3 and passed down from A to F. Alpha should not be reset to 0 on the basis of node I. It should stay as 3 to reflect the best move found so far in the entire tree. Thus we see that at a maximizing level, alpha should be set to either the value it had at the next-highest maximizing level or the best value found at this level, whichever is greater. The corresponding statement can be made about beta at minimizing levels. In fact, what we want to say is that at any level, PASS-THRESH should always be the maximum of the value it inherits from above and the best move found at its level. If PASS-THRESH is updated, the new value should be propagated both down to lower levels and back up to higher ones so that it always reflects the best move found anywhere in the tree, At this point, we notice that we are doing the same thing in computing PASS-THRESH that we did in MINIMAX to compute BEST-SCORE. We might as well eliminate BEST-SCORE and let PASS-THRESH serve in its place. With these observations, we are in a position to describe the operation of the function MINIMAX-A-B, which requires four arguments, Position, Depth, Use-Thresh, and Pass-Thresh. The initial call, to choose a move for PLAYER-ONE from the position CURRENT, should be MINIMAX-A-B(CURRENT, 0, PLAYER-ONE, maximum value STATIC can compute, minimum value STATIC can compute) These initial values for Use-Thresh and Pass-Thresh represent the worst valu