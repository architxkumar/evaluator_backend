erged so easily. For example, if we consider a river to be a piece of liquid, then what happens to the river when the liquid flows out into the ocean? Instead of continually changing our characterization of the river, it is more convenient to view the river as a fixed spare occupied by water. Containers play an important role in the world of liquids. Since we do not want to refer to liquid objects, we must have another way of stating how much liquid is in a container. We can define a CAPACITY function to bound the amount of liquid / that a space s can hold. The space is FULL when the AMOUNT equals the CAPACITY. CAPACITY(s) > AMOUNT(, s) > none FULL(s) = AMOUNT, s) = CAPACITY(s) We can also define an AMOUNT function: AMOUNT(W ter, Glass) > none This statement means, There is water in the glass. Here, Water refers to the generic concept of water and Glass refers to the space enclosed by a particular glass. Spaces have a number of other properties besides CAPACITY and FULL. Recall that spaces can be linked to one another by the INSIDE relation. In addition, a space can be free or not. A space is free if it is not wholly contained inside a solid object. In addition, every space is bounded on all sides by a set of two-dimensional regions, called faces. If a free face (one not part of a solid object) separates two free spaces, it is called a portal. Liquids can flow from one free space to another via a portal. Two objects are said to be joined if they share a common face. To summarize: FREE(s) = JO : SOLID(o) A INSIDE(s, 0) FACE(f, s) =f is some 2-D bounding region of s PORTAL( f) = s,, 5) : FACE(f, s,) \ FACE(f, 55) A FREE(s,) /\ FREE(s,) \ FREE(/) JOINED(o0;, 92, f) = FACE( f, 0,) \ FACE( f, 02) 416 Artificial Intelligence We can now define a closed container as a hollow object with no portals: CLOSED-CONTAINER(c} = (as | INSIDE(s, c) A FREE(s)) A. (73s, f: INSIDE(s, c) A JOINED(s, , f ) \ -PORTAL(f)) An open container has (at least) one portal at the top: OPEN-CONTAINE