 binary relationships between it and others. Attributes are those relationships. So, for example, in Fig. 4.5, we used the attributes instance, isa and team. Each of these was shown in the figure with a directed arrow, originating at the object that was being described and terminating at the object representing the value of the specified attribute. But we could equally well have focused on the object representing the value. If we do that, then there is still a relationship between the two entities, although it is a different one since the original relationship was not symmetric (although some relationships, such as sibling, are). In many cases, it is important to represent this other view of relationships. There are two good ways to do this. The first is to represent both relationships in a single representation that ignores focus. Logical representations are usually interpreted as doing this. For example, the assertion: team(Pee-Wee-Reese, Brooklyn-Dodgers) can equally easily be interpreted as a statement about Pee Wee Reese or about the Brooklyn Dodgers. How it is actually used depends on the other assertions that a system contains. The second approach is to use attributes that focus on a single entity but to use them in pairs, one the inverse of the other. In this approach, we would represent the team information with two attributes: one associated with Pee Wee Reese: team = Brooklyn-Dodgers 88 Artificial Intelligence one associated with Brooklyn Dodgers: team-members = Pee-Wee-Reese,... This is the approach that is taken in semantic net and frame-hased systems. When it is used, it is usually accompanied by a knowledge acquisition tool that guarantees the consistency of inverse slots by forcing them to be declared and then checking each time a value is added to one attribute that the corresponding value is added to the inverse. An Isa Hierarchy of Attributes Just as there are classes of objects and specialized subsets of those classes, there are attributes and sp