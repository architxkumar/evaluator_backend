 like A and B, they must also be compared. Node (attribute-name, : the attribute to be tested attribute-value, : the value of the attribute pointer-to-bucket, : bucket has the cases pointer-to-left-child, : cases with smaller attribute values pointer-to-right-child, : cases with larger attribute values pointer-to-parent, : pointer to parent node count). : number of times visited during search The function UnvisitedChild(Q, A, node) does the following, 1. It first looks at the count field in the node. If it has value 2 then the function returns the value nil . The value 2 signifies that both the children of the node have been visited. 2. Else it applies the test (valueg testValuetestattribute) at the node to the query Q. 3. If the answer is true then, (a) If the value in the count field is 0, it is incremented to 1. Then the left child is returned as the child of the node. (b) Else the value is incremented to 2, and the right child is returned as the child of the node. 4. If the answer is false then, KNN-kdtree(q : query, root : kd-tree, A: attribuve list, k : retrieval size) 1 Re) 2 visited ( 3) node root 4 radius LARGE a suitably large value 5 while net BWB(redius, visited) do while not Leaf (node) 7 do child UnvisitedChildfg, A, node) 8 Af (child NIL) OR (not BOB(g, neds)) 9 then node Parent (node) 10 if node NIL 1. then return 12 else node child 13 i dU nede reached an eligible leaf 14 cB CasesinBucket (node B) get cases 15 for each ce CB 1 do IinsertK( c, Sim(c, g) , R ) 17 radius Dist(g, First(R)) 18 node Parent (nods) 19 if node NIL 20 then return 2 21 return R InsertK (pair, list, ) if Size(list ) then insert anyway Insert (pair, list) else insert only if better if Second(pair) Second (First (list)) then Insert(pair, Rest(list)) discard head (weakest) element Aue FIGURE 15.23 The KNN-kdtree algorithm retrieves the K most similar (nearest) cases from the leaves of the kd-tree. The function UnvisitedChild returns the child that best matches the Query, according