path. S: Start G: Goal FIGURE 5.3 A tiny search graph. Observe that even though a path to G has been found B B continues by expanding C which is cheaper. Let s say between G, D, and C (cost 10) our algorithm picks G! B B terminates with the optimal path. 1 10 It has located longer paths G r) () Ay earlier in the search, but E E i d the: eg E :) oO) e ignored them. Moola . 13 10 12 Figure 5.4 Branch and Bound explores the tiny search graph. We consider the travelling salesman problem (TSP) again to observe the Branch Bound algorithm in a refinement space. 5.3 Refinement Search Refinement search begins with the set of all candidate solutions, represented by the root node. Each new node in the search tree represents a subset of the candidates. The node can be seen as a partial solution, in which a part of the solution is specified. In each round, B B selects and refines one node representing a partial solution, by specifying some more detail. This results in partitioning the set of solutions in that node. The candidate selected for refinement is the one that appears to have the lowest overall cost. Assuming that there is a method for estimating the cost of a given (partial) solution, B B refines the solution that has the least estimated cost. The process of refinement continues until we have a complete solution at hand, and when no other candidate (partial) solution has a lower estimated cost. We need to ensure that the cost estimates are such that the algorithm guarantees an optimal solution. Ensuring that the estimated cost is a lower bound on the actual cost can accomplish this. That is, a (complete) solution will never be cheaper than it is estimated to be. Then, candidates with estimates higher than that of some fully refined solution can be safely ignored. It is also desirable that the estimate be as high and as close to the actual cost as possible, because that will mean faster pruning of expensive candidates. We will look at this requirement more formally, late