 just as it was important during the planning process to keep track of interactions as they arise, it is important to record information about interactions along with the final plan so that if unexpected events occur at execution time, the interactions can be considered during replanning. Hardly any aspect of the real world is completely predictable, So we must always be prepared to have plans fail. But, as we have just seen, if we have built our plan by decomposing our problem into as many separate (or nearly separate) subproblems as possible, then the impact on our plan of the failure of one particular step may be quite locals Thus we have an additional argument in favor of the problem-decomposition approach to problem-solving. In addition to reducing the combinatorial complexity of the problem-solving process, it also reduces the complexity of the dynamic plan revision process that may be required during the execution of a plan in an unpredictable world (such as the one in which we live). In order to make it easy to patch up plans if they go awry at execution time, we will find that it is useful during the planning process not only to record the steps that are to be performed but also to associate with each step the reasons why it must be performed. Then, if a step fails, it is easy, using techniques for dependencydirected backtracking, to determine which of the remaining parts of the plan were dependent on it and so may need to be changed. If the plan-generation process procecds backward from the desired goal state. then it is easy to record this dependency information. If, on the other hand, it proceeded forward from the start state, determining the necessary dependencies may be difficult. For this reason and because, for most problems, the branching factor is smaller going backward, most planning systems work primarily in a goal-directed mode in which they search backward from a goal state to an achievable initial state. 250 Artificial Intelligence In the next