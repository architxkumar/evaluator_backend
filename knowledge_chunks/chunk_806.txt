ctural information, except in Prolog formulas (programs) where they have a predefined order in which the inference engine looks at them. Figure 12.15 depicts some connections based on parent-child relationships that the formulas have implicit in them. If those connections could be made concrete, then the inference engine could traverse them directly. The algorithms in Chapter 12 do traverse such links, but only by finding them through a process of unification, and in the process of which they inspect all formulas, in some order, to determine whether there is a link. The search for unifying components is what structured representations aim to circumvent. There is motivation from human reasoning as well. We go about making decisions with varying degrees of effort in a dynamic world, facing and solving problem after problem. Parikh pointed that the truth functional semantics of logic is not sufficient. He illustrated the idea with vague predicates like red , and suggested that knowledge is useful when it leads to successful behaviour (Parikh, 1994). We jump to conclusions, we do top-down reasoning employing whole structures of connected concepts. There is evidence from literature that we work with chunks of knowledge rather than a pool of formulas. Chess stalwarts from de Groot (1965) to Kasparov (2007) have emphatically said that it is the number of structured patterns in ones memory that distinguishes an expert from a novice in chess. The key to the effective use of knowledge is the ability to get to the relevant pieces quickly. And that can be done if related pieces of knowledge are either chunked? together, or are reachable through explicit links. This chapter deals with ideas to combat the need to search for connections, and techniques to confine the processing to the relevant facts. 14.1 Hierarchies in the Domain We begin with two features of knowledge representation. One is that our representations involve aggregations of simpler concepts into composite structur