d to be represented explicitly as part of a problem state. They can be encoded directly into the line-labeling algorithm. The other class of constraints we will need contains the dynamic ones that describe the current options for the labeling of each vertex. These constraints will be represented and manipulated explicitly by the line-labeling algorithm. o T Ty ARROW s ~ T "1 12 L NY NOR NSN 13 140 15 TB Fig. 14.17 The Eighteen Physically Possible Trihedral Vertices 282 Artificial Intelligence NSAI. Applying Constraints in Analysis Problems Having analyzed the domain in which we are working and extracted a set of constraints thal objects in the domain must satisfy, we need next to apply. those constraints to the problem of analyzing inputs in the domain. To do this, we use a form of the constraint satisfaction procedure described in Section 3.5. It turns out that for this problem it is not necessary to use the second part of our constraint satisfaction procedure (the one that makes guesses and results in search). The domain provides sufficiently powerful constraints that it is not necessary to resort to search. Thus the Waltz algorithm [Waltz, 1975], which we present here, omits that step entirely. To label line drawings of the sort we are considering, we first pick one vertex and find all the labelings that are possible for it. Then we move to an adjacent vertex and find all of its possible labelings. The line that we followed to get from the first vertex to the second must end up with only one label, and that label must be consistent with the two vertices it enters. So any labelings for either of the two vertices that require the line to be labeled in a way that is inconsistent with the other vertex can be eliminated. Now another vertex, adjacent to one of the first two, can be labeled. New constraints will arise from this labeling and these constraints can be propagated back to vertices that have already been labeled, so the set of possible labelings for them is f