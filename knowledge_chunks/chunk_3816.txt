dictable, planning can be used to make that less important. 2.5 ISSUES IN THE DESIGN OF SEARCH PROGRAMS Every search process can be viewed as a traversal of a tree structure in which each node represents a problem state and each arc represents a relationship between the states represented by the nodes it connects. For example, Fig. 2.18 shows part of a search tree for a water jug problem. The arcs have not been labeled in the Fig., but they correspond to particular water-pouring operations. The search process must find a path or paths through the tree that connect an initial state with one or more final states. The tree that must be searched could, in principle, be constructed in its entirety from the rules that define allowable moves in the problem space. But, in practice, most of it never is. It is too large and most of it need never be explored. Instead of first building the tree explicitly and then searching it, most search programs represent the tree implicitly in the rules and generate explicitly only those parts that they decide to explore. Throughout our discussion of search methods, it is important to keep in mind this distinction between implicit | (4,3) | | (0,0) (1,3) (4,3) | | (0,0) | | (3.0) search trees and the explicit partial search trees that are Fig. 2.18 A Search Tree for the Water Jug Problem actually constructed by the search program. In the next chapter, we present a family of general-purpose search techniques. But before doing so we need to mention some important issues that arise in all of them: (4,0) (0,3) * The direction in which to conduct the search (forward versus backward reasoning). We can search forward through the state space from the start state to a goal state, or we can search backward from the goal. How to select applicable rules (matching). Production systems typically spend most of their time looking for rules to apply, so it is critical to have efficient procedures for matching rules against states. * How to represent each no