ould be implemented as a circular queue of k elements, in which only the last k nodes are stored. In a solution space search where the moves alter components of a solution, one could also keep track of which moves were used in the recent past. That is, the solution component that was perturbed recently cannot be changed. One way to implement this would be to maintain a memory vector M with an entry for each component counting down the waiting period for changing the component. In the SAT problem, each bit is seen as a component, and flipping a bit as a move. sonst a fourvariable SAT problem with clauses: (Aa V Ab) a (Fc V DAC VaaACaV BDAC Vd). Let us say that the period before a bit can be flipped again is 2 time units. This is known as the Tabu tenure tt. This means that if one has flipped some bit then it can be flipped back only after two other moves. Assume the evaluation heuristic function is the number of clauses satisfied. Let the solution vector be in the order (a b c d), and the corresponding memory vector in the same order. Let the starting candidate be (0 0 0 0). The memory vector M is also initialized to (0 0 0 0). This is interpreted that the waiting time for all moves is zero. As soon as a bit is flipped, the corresponding element in M is set to 2, and decremented in each subsequent cycle. At any point, only bits with a zero in the M vector can be considered for a move. The following figure shows the progress of Tabu search. After the first expansion, there are two candidates with the same value e(n) 4. The two alternate expansions are shown on the left and right side with different arrows. Note that Tabu search would choose randomly between the two. Cells in the top row coloured grey with a thick border show a tabu value 2, and grey cells without a thick border depict a tabu value 1. These cannot be flipped in that expansion. The tabu bits and their values are also shown alongside in the array M. The shaded rows are the candidates that the Tabu search