on the Web, and help you decide the food items, calculating quantities, costs, and if you insist, calories. It would show you the games menu and likewise help you decide the entertainment program, initiating calendar entries for buying anything that might be needed, and adding up the estimated time for each event. It would finally help you choose and order a cake. The top-level frame could pull in the requisite data from the constituent frames, via an fNeeded trigger, and display the total estimated expenses and duration of the party. The system would then create a complete frame instance, which would prompt you during and after the party on your mobile phone. Figure 14.7 shows a part of the final, concrete frame system created. The key thing is that a frame holds together all the information related to structured event patterns together. Thus, when one thinks of such an event, all aspects related to it are brought to the fore. Computationally, this will be efficient when the links are implemented using a data structure so that that they can be traversed directly. Cognitively, the frame acts like a schema, chunking together all related information. If someone were to announce that she has just been to a birthday party, then a curious aunt might ask her all sorts of questions Whose birthday was it? Who all were invited? What gift did you take? What games did you play? How was the food? and so on. Such questions come readily to mind because one already has a preconceived idea of the entire gamut of activity that constitutes a birthday party. A number of research students working with Roger Schank at Yale used this notion of chunking together of data related to stereotypical event patterns to write programs to understand stories in natural language. The key exercise was to create representations of such knowledge structures, called Scripts. Retrieving and using an appropriate Script makes the task of story understanding a feasible one. We look at Scripts and other rela