ometimes, however, it is desirable to use a function only once in a program. This will be the case Sec*, Mneouir Tb Oiceedt O hna q2tj when it is uied in a mapping operation such as with lnapcar, which must take a procedure as its first argument. LISP provides a method of wining unnamed or anonymous functions that are evaluated only when they are encountered in a program. Such functions are called lambda functions. They have the following form (lambda (arguments) <function-body>) We illustrate the use of a lambda function to compute the cubed value of a list of numbers. This will be accomplished by using mapcar to apply a lambda cube function to a list of numbers. When a function is called by another function, it should be preceded by the characters #' to indicate that the following item is a function. This is equivalent to preceding the function with a single quotation mark (') or the function named function in some LISP dialects. The lambda function we need to find the cube of a single number is just (lambda (x) (5 x x x)). We use this with mapcar now to find the cubes of the numbers (I 2 34) ->(defun cube-hat (let) (mapcar #'(lambd. (xl V x x xfl let)) CUBE-LIST ->(cubelist 0 234)) (182764) Internal Storage. As we have seen, lists are flexible data structures that can shrink or grow almost without limit. This is made possible through the use of linked cell structures in memory to represent lists. There can be visualized as storage boxes having two components which corresponer to the car and cdr of a list. The cells are called cons-cells, because they are constructed with the cons function, where the left component points to the first element of a list (the car of the list) and the right component Doints to the remainder of the list (the cdr of the list). An example of the representation or the list (a (b c (d)) e f) is given in Figure 3.2. Flure 3.2 Reprewetation (or the list (. (b c (4)) el) 40 LISP and Otherogrsmmlngliinguag4s Chap. 3 The boxes with the slash i