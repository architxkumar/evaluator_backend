 040 3 0 42) 10 ho L) (2 1 04 3 0 04 3 4 0 1) 10 If one were to think of the heuristic values as obtained from solving a relaxed version of the Eight-puzzle then the first one can be thought of as a problem, where a tile can be moved to its destination in one move, and the second heuristic from a problem where a tile can move even over existing tiles. The values are the total number of moves that need to be made in the relaxed problem(s). Curiously, this more detailed function seems to think that all moves are equally good. We leave it as an exercise for the user to pick the best move in this situation. FIGURE 3.3 Which state is closest to the goal? The Eight-puzzle has its bigger cousins, the 15-puzzle and the 24puzzle, played on a 4 x 4 anda 5 x 5 grid respectively. The state spaces for these puzzles are much larger. The 15-puzzle has about 10000000000000 (or more succinctly 1019) states, while the 24-puzzle has about 1025 states. These are not numbers to trifle with. With an algorithm inspecting a billion states a second, we would still need more than a thousand centuries to exhaustively search the state space. Only recently have machines been able to solve the 24-puzzle, and that requires a better heuristic function than the ones we have. We now look at our first algorithm to exploit the heuristic function, called Best First Search, because it picks the node which is best according to the heuristic function. 3.2 Best First Search We need to make only a small change in our algorithm Depth First Search from Chapter 2. We simply maintain an OPEN list sorted on the heuristic value, so that the node with the best heuristic value automatically comes to the head of the list. The algorithm then picks the node from the head of OPEN as before. Conceptually, this can be written by replacing the line, OPEN append (NEW, tail(OPEN)) with OPEN sort, (append (NEW, tail(OPEN))) In practice, though, it would be more efficient to implement OPEN as a priority queue. In addition, on