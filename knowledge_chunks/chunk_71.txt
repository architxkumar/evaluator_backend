 Test whether it is a scluticn 4 return FAILURE FIGURE 2.5 A high level search algorithm. The rest of the chapter will be devoted to refining the above algorithm. We assume that the problem domain has functions defined that allow us to operate in the domain. At the moment, we need two functions to be defined on the domain. They are the following: moveGen(State) Takes a state as input and returns a set of states that are reachable in one step from the input state, as shown in Figure 2.6. We call the set of states as successors or children of the input state. The input state is the parent of the children. goalTest(State) Returns true if the input state is the goal state and false otherwise. goalTest(State, Goal) Returns true if State matches Goal, and false otherwise. Observe that we may have either of the above goal-test functions. The former is used when the goal is described by some properties that are checked by the function. The latter takes an explicit goal state and uses that to compare with the candidate state. FIGURE 2.6 The moveGen function returns a set of states that are reachable in one move from a given state. Our search algorithms should be able to operate in any domain for which the above functions are provided. We view the set of states as nodes in the state space, and the set of moves as the edges connecting these nodes. Thus, our view of the state space will be that of a graph that is defined implicitly by the domain function moveGen. Figure 2.7 depicts the part of the state space generated and explored by the Generate Test algorithm. The generated space is known as the search tree generated by the search program. FIGURE 2.7 The nodes visited by a search algorithm, form a search tree shown by empty circles and dotted arrows. The solution found is shown with shaded nodes and solid arrows. Before looking at the algorithms in detail, let us look at a couple of problem examples . While many real world problems can indeed be posed as search problems, we 