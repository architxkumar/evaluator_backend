Sometimes all the power of traditional logic (and sometimes even more than that) is necessary to describe the inferences that are needed. Figure 4.7 shows two examples of the use of first-order predicate logic to represent additional knowledge about baseball. Wx : Ball(x) /\ Fly(x) \ Fair(x) A Infield-Catchable (x) \ Occupied-Base(First) \ Occupied-Base(Second) /\ (Outs < 2) /\ a[Line-Drive(x) \/ Attempted-Bt,(x)] lnfield-Fly(x) Vx,y : Batter(x) /\ batted(x, y) A Infield-Fly(y) > Out(x) Fig. 4.7 Inferential Knowledge Of course, this knowledge is useless unless there is also an inference procedure that can exploit it (just as the default knowledge in the previous example would have been useless without our algorithm for moving through the knowledge structure). The required inference procedure now is one that implements the standard logical rules of inference. There are many such procedures, some of which reason forward irom given facts to conclusions, others of which reason backward from desired conclusions to given facts. One of the most commonly used of these procedures is resolution, which exploits a proof by contradiction strategy. Resolution is described in detail in Chapter 5. Recall that we hinted at the need for something besides stored primitive values with the bats attribute of our previous example. Logic provides a powerful structure in which to describe relationships among values. It is often useful to combine this, or some other powerful description language, witb an isa hierarchy. In general, in fact, all of the techniques we are describing here should not be regarded as complete and incompatible ways of representing knowledge. Instead, they should be viewed as building blocks of a complete representational system. Procedural Knowledge So far, our examples of baseball knowledge have concentrated on relatively static, declarative facts. But another, equally useful, kind of knowledge is operational, or procedural knowledge, that specifies what to do when.