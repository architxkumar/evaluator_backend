would be to give the algorithm a sense of direction, like in the transition from depth first search to heuristic search in Chapter 3. The algorithm AlphaBeta searches blindly from left to right. In the algorithm SSS , described in the next section, the search is guided towards the better looking nodes. The interesting thing is that the guidance does not come (directly) from a domain specific heuristic function. Instead, it is generated by a preliminary exploration of the game tree up to k-ply depth. This preliminary exploration yields some information which is used to guide the search towards better nodes. This notion of domain independent heuristics is an exciting one, and we shall visit it again in the chapter on advanced planning (Chapter 10). 8.2.3 Algorithm SSS The main problem with the A phaBeta algorithm is that it is sensitive to the order in which the moves are generated. This is because it always searches the game tree from the left to right, in an uninformed fashion. An algorithm which searches the game tree guided by heuristic information, is the SSS algorithm developed by Stockman (1979). The basic idea behind algorithm SSS is the same high level notion of heuristic search that we have been pursuing in the earlier chapters. Refine the best looking partial solution, till the best looking solution is fully refined. The difference is in the way in which a partial solution is evaluated. As described in Chapters 5 and 7, a partial solution stands for the set of complete solutions to which it can be extended. For the sake of completeness, it is imperative that search starts with and covers all potential candidate solutions till a solution is found. The job of the evaluation function is to help estimate the cost of a partial solution. Then, if the estimated cost of a partial solution is a lower bound on actual cost, the above strategy will terminate with the minimal cost solution, when a complete solution has the lowest cost. In the case of finding the best mo