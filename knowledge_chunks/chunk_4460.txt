 with a lot of useless memories. The obvious idea is to index past episodes by the features present in them. For example, any 420 Artificial Intelligence (ema AAR experience having to do with a car would be filed under Car, as well as under other indices. But we must have some scheme for distinguishing important indices from unimportant ones. Otherwise, everything will remind us of everything else, and we will be unable to focus on memories that will best help us to solve our current problem. But important features are not always the most obvious ones. Here is an example from Schank [1977], called the steak and haircut story: X described how his wife would never cook his steak as rare as he liked it When X told this to Y, Y was reminded of a time, 30 years earlier, when he tried to get his hair cut in England and the barber just wouldn t cut it as short as he wanted it. Clearly, the indices Steak, Wife, and Rare are insufficient to remind Y of the barbershop episode. We need more general indices, such as Provide-Service, Refusal, and Extreme. Dyer [ 1983] also takes up this theme, embodied in a program that deduces adages and morals from narratives. Some features are only important in certain contexts. For example, suppose it is cloudy. If your problem is to plan a picnic, you might want to retrieve other episodes involving cloudy days. But if your problem is to write a computer program, then the fact that it is cloudy is probably incidental. Because important features vary from domain to domain, a general CBR system must be able to learn a proper set of indices from experience. Both the inductive and explanation-based learning techniques described in Chapter 17 have been used for this task. Recall that in our discussion of production systems, we talked about how rules and states could be organized into a RETE network for efficient matching. We also discussed matching frames and scripts in Section 4.3.5. Something similar is required for CBR, since the number of cas