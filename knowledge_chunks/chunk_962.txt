h tree. Each internal node in the kd-tree has a test for the value of some attribute, like in a binary search tree. Each internal node represents a set of cases, and the two arcs below it point to two partitions of that set discriminated on the answer to the test. There is no restriction on the number of times an attribute can be used as a test. That is dictated by the distribution of cases in the Ndimensional space. Each leaf node represents a bucket that stores a set of cases. The size of the bucket is user determined. All the cases inside the bucket are inspected sequentially and that is a factor in determining the bucket size. Figure 15.15 shows a sample kd-tree constructed on a synthetic case space on two attributes X; and Xp. These two attributes may be the only ones defining the case, or may be the only (numeric) ones selected for constructing the tree. FIGURE 15.15 A sample kd-tree for the data shown in Figure 15.16. The data is partitioned into eight buckets named A to H. The number in the node represents the test (value number). Cases answering yes take the left branch. The kd-tree above has been constructed to partition the cases in the two-dimensional space shown in Figure 15.16. Each dot represents a case in the figure, with its coordinates being the values of the two attributes. Xz 180 a 75 . 170 . bd 65 a e e e s . . 7 ov f 60 al e 5 . He 8 , 155 e a a . s . . 150 . Eee G .e 45 e 8 a fa . ee a 140 . . po a5 B i. el? ae ee UA e 30; , 1 ee , os e oe oe. . . e 20 . e e 15 A D F 10 ee ee ee es en Sn So Sos Sen Seen i x 30 40 50 60 WW 80 90 100 110 120 130 140 150160 FIGURE 15.16 The case base in two-dimensional space defined by the attributes X, and X2 The first partition is marked by numeral 1, and is based on a value 102 for attribute X,.The labels A-H correspond to the leaves in the kd-tree in Figure 15.15. The kd-tree is built by a recursive algorithm in a top down manner. It begins with a single node at the root representing the entire case base. It 