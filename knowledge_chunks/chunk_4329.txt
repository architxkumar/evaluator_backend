at the machine can execute directly. People process advice in an analogous way. In chess, the advice fight for control of the center of the board is useless unless the player can translate the advice into concrete moves and plans. A computer program might make use of the advice by adjusting its static evaluation function to include a factor based on the number of center squares attacked by its own pieces. Mostow [1983] describes a program called FOO, which accepts advice for playing hearts, a card game. A human user first translates the advice from English into a representation that FOO can understand. For example, Avoid taking points becomes: {avoid (take-points me) (trick)) FOO must operationalize this advice by turning it into an expression that contains concepts and actions FOO can use when playing the game of hearts. One strategy FOO can follow is to UNFOLD an expression by Teplacing some term by its definition, By UNFOLDing the definition of avoid, FOO comes up with: {achieve (not (during (trick) (take-points me)))) FOO considers the advice to apply to the player called me. Next, FOO UNFOLDs the definition of trick: (achieve (not (during (scenario (each pl (players) (piay-card pl)) (take-trick (trick-winner))) (take-points me)))) In other words, the player should avoid taking points during the scenario consisting of (1) players playing cards and (2) one player taking the trick. FOO then uses case analysis to determine which steps could cause one to take points. It rules out step 1 on the basis that it knows of no intersection of the concepts take-points and play-card. But step 2 could affect taking points, so FOO UNFOLDs the definition of take-points: (achieve (not (there-exists cl (cards-played) (there-exists c2 (point-cards) (during (take (trick-winner) cl) {take me 2)))))) This advice says that the player should avoid taking point-cards during the process of the trick-winner taking the trick. The question for FOO now is: Under what conditions does (take me 