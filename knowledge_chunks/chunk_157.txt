hat if we remove 3 cities from the tour, we can put them back in (3!-1) 5 other different ways, thus giving us C3 (3!-1) neighbours for any given tour. In general, as k increases, the neighbourhood function becomes denser. 2 Se teteee, 0-0-0-6 Q 6-0-0-0-0-0-0 3 9-0-0-0 FIGURE 4.16 In the 2-city-exchange, the two shaded cities exchange their position in the path representation. The new tour has the dashed edges instead of the four broken ones in the linear order. Another way of defining neighbourhood functions is to think of exchanging edges instead of cities in a tour. In a 2-edge exchange move, we would remove two edges and cross connect them to give a different tour, as shown in Figure 4.17. For example, in the tour (2, 3, 4, 1, 7, 6, 5, 8, 9), we could remove edges 4-1 and 8-9 and replace them with 4-8 and 9-1 to give a tour (2, 3, 4, 8, 5, 6, 7, 1, 9). The reader is encouraged to verify that this is the only way the two edges can be replaced to give a valid tour. It can also be observed that the 2-edge-exchange can be implemented by reversing a subsequence, in this case 1-7-6-5-8 in the path representation. We can do a 3-edge exchange by taking out and replacing three edges from the tour, and this can be done in four different ways (see Figure 4.18). On a FIGURE 4.17 In the 2-edge-exchange, the tour is altered as shown. re AW FIGURE 4.18 In a 3-edge-exchange, three edges are removed and replaced by other edges. A closer look at the 2-city-exchange shows that it is one particular case of 4-edge-exchange in which two sets of two consecutive edges are removed from a tour, and each freed node is connected to the neighbours of the other freed node. Experiments have revealed that edge exchanges give better results than city exchanges. They are also intuitively more appealing. For example, one can visualise the 2-edge-exchange undoing a crossed path ina tour (if the move shown in the figure were reversed). It also allows for using a heuristic like selecting longer edge