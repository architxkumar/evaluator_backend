 with the shortest estimated distance for expansion. The successors for this node are then generated. their distances estimated, and the process continues until a goal is found or the search ends in failure. The form of the heuristic estimation function for A* is f(n) = g*(n) + h*(n) where the two components gt(n) and h*(n) are estimates of the cost (or distance) from the start node to node n and the Cost from node n to a goal node, respectively. The asterisks are used to designate estimates of the corresponding true values f(n) Sec. 9.5 Informed Search 183 = g(n) + h(n). For state space tree problems g*(n) = g(n) since there is only one path and the distance g*(n) will be known to be the true minimum from the start to the current node n. This is not true in general for graphs, since alternate paths from the start node to n may exist. For this type of problem, it is convenient to maintain two lists of node types designated as open and closed. Nodes on the open list are nodes that have been generated but not yet expanded while nodes on the closed list are nodes that have been expanded and whose children are, therefore, available to the search program. The A* algorithm proceeds as follows. A SEARCH 1. Place the starting node s on open. 2. If open is empty, stop and return failure. 3. Remove from open the node n that has the smallest value of f*(n). 11 the node is a goal node, return success and stop. Otherwise. 4. Expand n, generating all of its successors n' and place n on closed. For every successor n', if n' is not already on open or closed attach a back-pointer to n computef(n') and place it on open. 5. Each n' that is already on open or closed should be attached to back-pointers which reflect the lowest g*(n) path. If n was on closed and its pointer was changed, remove it and place it on open. 6. Return to step 2. Next, we consider some desirable properties of heuristic search algorithms. They are summarized in the following definitions. - Admissibility condition