 terminates for finite graphs. Proof In every cycle of the main loop in A , the algorithm picks one node from OPEN and places it in CLOSED. Since there are only a finite number of nodes, the algorithm will terminate in a finite number of cycles, even if it never reaches the goal (that is, the goal is not reachable). L2: If a path exists to the goal node then the OPEN list always contains a node n' from an optimal path. Moreover, the f-value of that node is not greater than the optimal cost. Proof Let (S, 14, no, ..., G) be an optimal path as shown in Figure 5.17. To begin with, S is on OPEN. Node n; is a child of S. When S is removed from OPEN, n, is placed on OPEN. In this manner, whenever a node from the above path is removed from OPEN, the next node is placed on OPEN. And if G is removed from OPEN then A has terminated with the optimal path (S, 4, no, ..., G) to G. Furthermore, Si ) g(r ) h(n ) gt(n ) h(n ) because nr is on the optimal path g(n ) g (n ) Sgt(n ) h (n ) from (43) h(n ) h (n ) srr) sf (S) because is on the optimal path f (n ) f (S) A's f (S) (8.3) Note that f (S) is the optimal cost path from S to G. OPENLit GQ O O O O O ; aan path : soe fe) Suart 1e) fo) fe) fe) SP 96 0 O FIGURE 5.17 OPEN always contains a node from the optimal path. L3: If there exists a path from the start node to the goal, A finds a path. This is true even if the graph is infinite. Proof A always picks a node with the lowest fvalue. Every time it extends a partial solution, the g-value of the partial solution increases by a finite value? greater than (A2). Also, since the branching factor is finite (A1), there are only a finite number of partial solutions cheaper than the cost of a path to the goal, that is g (Goal). After exploring all of them in a finite amount of time, eventually the path to the goal becomes cheapest, and is examined by A which terminates with a path to the goal. L4: A finds the least cost path to the goal. Proof (by contradiction) Assumption A4: Let A termin