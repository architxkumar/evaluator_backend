on representation mapping maps from facts to representations. Fig. 4.1. Mappings between Facts and The backward representation mapping goes the other way, Representations from representations to facts. One representation of facts is so common that it deserves special mention: natural language (particularly English) sentences. Regardless of the representation for facts that we use in a program, we may also need to be concerned with an English representation of those facts in order to facilitate getting information into and out of the system. In this case, we must also have mapping functions from English sentences to the representation we are actually going to use and from it back to sentenc s. Figure 4.1 shows how these three kinds of objects relate to each other. Let's look at a simple example using mathematical logic as the representational formalism. Consider the English sentence: Spot is a dog. The fact represented by that English sentence can also be represented in logic as: dog(Spot) Suppose that we also have a logical representation of the fact that all dogs have tails: Vx: dog(x) > hastail{x} Then, using the deductive mechanisms of logic, we may generate the new representation object: hastail(Spot) Using an appropriate backward mapping function, we could then generate the English sentence: Spot has a tail. Or we could make use of this representation of a new fact to cause us to take some appropriate action or to derive representations of additional facts. It is important to keep in mind that usually the available mapping functions are not one-to-one. In fact, they are often not even functions but rather many-to-many relations. (In other words, each object in the domain may map to several elements in the range, and several elements in the domain may map to the same element of the range.) This is particularly true of the mappings involving English representations of facts. For example, the two sentences All dogs have tails and Every dog has a tail could both re