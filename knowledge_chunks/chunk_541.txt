 this value. Two well known heuristic search planners HSP and FF, computed this estimate in different ways. 10.4.1 HSP The Heuristic Search Planner by Blai Bonet and Hector Geffner (2000; 2001; 2001a) estimates the distance to the goal from a given state by estimating the number of steps, or the sum of their costs, for each proposition in the goal description. Given a planning problem, the state space is defined by the set of possible states. Each state is a set of ground propositions. Each instance a of the STRIPS actions has a set of preconditions precond(a), add effects add(a), and delete effects del(a). In the relaxed version of the problem, the delete effects are ignored. The estimated cost g(s, p) of reaching a proposition p from a given state s is defined as, g(s, p) 9 if pes Mil. Oo ) 1 g(s, precond(a) otherwise CostP (state S, propositions P, actions A) 1 for each peP 2 if pes then g(s, p) 0 3 else g(s, p) 4 availableActions true 5 while availableActions true a Applicable(A, 5S) 7 if a nix then availableActions false 8 else AcA a 9 for each peadd(a) 10 Se su p 11 g(s, p) min(g(s, p), CostS(precond(a), g(s, P)) 12 13 return g(s, P) CostS (preconditions C, g(s, P)) 1 cost 0 2 for each pec 3 cost cost gls, p) 4 return cost FIGURE 10.16 The procedure CostP initializes cost of each predicate g(s, p) to 0 or infinity. It then applies actions that are applicable. Each applied action augments costs of g(s, p) for every add effect p of the action, and adds the effect to the state, possibly triggering more actions. The aggregation function CostS shown here adds the cost of individual elements of the set. The function CostP returns an array g(s, P) with a cost associated with each proposition peP We assume a function Applicable(A, S) that returns an action acA, if it is applicable in S, and returns nix if there is no such action. where O(p) stands for the set of actions that have p in their add effects. Note that the function g is defined, both for a proposition as we