) d, AND d, e Normalize d, Update (c,9d,) in the kb Yous 8 return kb C2inCl (c 9d,, c,9d,, kb) 1 if FILLS r c2 and ALL re are components of d, 2 then return 3 else return nil FIGURE 14.32 The procedure to augment the descriptions of all constants. For every pair of descriptions of two constants, if one contains implicit information about the other, the other description is augmented. The above algorithm is a forward-chaining algorithm that adds any inferences that can be made about an individual to the knowledge base. The inference is made based on the occurrences of two descriptions that apply to the same constant c,. The descriptions are FILLS rca and ALL re , and contain implicitly the information that cp must belong to the class e as well. However, this pair of descriptions could have been buried deeper in some description. In the example described above, we had some descriptions for Abheek. But we could have had these descriptions in an indirect manner as shown below. aasutosh AND EXISTS 1 :Friend (ALL :Friend AND Person FILLS :FanOf gerrard (ALL :FanOf Footballer gerrard AND Person English The first sentence is now about a different person Aasutosh, and what we know about him is that he has at least one friend, and that all his friends are fans of Gerrard and are fans only of footballers. Abheek could have been one of these friends, but has not been named. In fact, none of the friends has been named. Yet these two sentences contain the same extra information about Gerrard. One can get around this problem by keeping data about anonymous constants just like named constants. The anonymous individuals we have to deal with are essentially related by some role, or sequence of roles to some known individual. We represent them by adding role names to the known individual for example, aasutosh.Friend. Of course, there may be a longer connection like for example abheek.Father.Friend.FanOf which would stand for the person who Abheek s father s friend is a fan of. In gene