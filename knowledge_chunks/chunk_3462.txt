of h / 2 index tests, one block access, and r 2 record tests: A binary index search on the other hand would require only ln(/n index tests, one block access, and r 2 record tests. Therefore. we see that for aric ii and moderately large r 13() to SO), the time savings possible using hinar indexed access can be substantial. Indexing in LISP can he implemented ith property lists. A-lists, and or tables. For example. a KB can be partitioned into segments by storing each segment as a list under the property value for that seement. Each list indexed in this sa can be found v ith the get property function and then searched sequentiall N or sorted and searched with binary search methods. A hash-table is a special data structure in LISP which provides a means of rapid access through kes hashing. We resiess the hashing process next. Hashed Files Indexed organizations that permit efficient access are based on the use of a hash function. A hash function. h. transforms key values k into integer storage location indices through a simple computation. When a maximum number of items or categories C are to be stored, the hashed values h(k) will range front to C - I. Therefore. given any key value k. h(k) should map into one of 0 ....- I. An effective, but simple hash function can be computed by choosing the largest prime numberp less than or equal to C. converting the key value k Into an integer - k' if necessary, and then using the value k mod p as the index value h. For example. if C is l O). the largest prime less than C is p 997. Thus. it the record key salue is 12345789 (a social security number. the hashed value is h = (k iiod 997) = 273. When using hashed access, the value of C should he chosen large enough to accommodate the maximum number of categories needed. The use of the prime number p in the algorithm helps to insure that the resultant indices are soiiics hat uniformly distributed or hashed throughout the range 0 . - C - This type of organization is well suited for grou