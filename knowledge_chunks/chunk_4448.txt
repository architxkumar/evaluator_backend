 b + e), which we can prove MEETS c and IS-MET-BY a. Therefore a IS-BEFORE c. This may seem like a roundabout way of doing things, and it is. There is nothing in the axioms themselves that dictates how they should be used in real programs. In fact, efficient implementations represent all thirteen temporal relations explicitly, making use of precompiled tables that record how the relations can interact. Constraint satisfaction is a useful technique for making inferences about these relations [Kautz, 1986]. The logical statements above are just a concise way of writing down one particular common sense theory of time. 19.2.2 Space In this book, we have often used examples from the blocks world. Primitives in this world include block names, actions like PICKUP and STACK, and predicates like ON(.x, y). These primitives constitute a useful abstraction, but eventually we must break them down. If we want a real robot to achieve ON(x, y), then that robot had better know what ON really means, where .x and y are located, how big they are, how they are shaped, how to align x on top of y so that x won t fall off, and so forth. These requirements become more apparent if we want to issue commands like place block x near block y or Iean block x up against.block y Common sense notions of space are critical for living in the real world. Objects have spatial extent, while events have temporal extent. We might therefore try to expand our common sense theory of time into a common sense theory of space. Because space is three-dimensional, there are far more than thirteen possible spatial relationships between two objects. For instance, consider one block perfectly aligned on top of another. The objects are EQUAL in the length and width dimensions, while they MEET in the height dimension. If the top block is smaller than the bottom one but still centered on top of it, then they still MEET in the height dimension, but we must use the spatial equivalent of IS-DURING to describe the length a