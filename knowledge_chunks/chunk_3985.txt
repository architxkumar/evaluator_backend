dge. For example, rules can be labeled and partitioned. A medical diagnosis system might have one set of rules for reasoning about bacteriological diseases and another set for immunological diseases. If the system is trying to prove a particular fact by backward chaining, itcan probably eliminate one of the two rule sets, depending on what the fact is. Another method [Etzioni, 1989] is to assign cost and probability-of-success measures to rules. The problem-solver can then use probabilistic decision analysis to choose a cost-effective alternative at each point in the search. By now it should be clear that we are discussing how to represent knowledge about knowledge. For this reason, search control knowledge is sometimes called metaknowledge. Davis [1980] first pointed out the need for meta-knowledge, and suggested that it be represented declaratively using rules. The syntax for one type of control rule is shown in Fig. 6.8. A number of AI systems represent their control knowledge with rules. We look briefly at two such systems, SOAR and PRODIGY. SOAR [Laird et ai, 1987] is a general architecture for building intelligent systems. SOAR is based on a set of specific, cognitively motivated hypotheses about the structure of human problem solving. These hypotheses are derived from what we know about short-term memory, practice effects, etc. In SOAR: 1. Long-term memory is stored as a set of productions (or, rules). 2. Short-term memory (also called working memory) is a buffer that is affected by perceptions and serves as a storage area for facts deduced by rules in long-term memory. Working memory is analogous to the state description in problem solving. 3. All problem-solving activity takes place as state space traversal. There are several classes of problemsolving activities, including reasoning about which states to explore, which rules to apply in a given situation, and what effects those rules wili have. 4. Allintermediate and final results of problem solving are rem