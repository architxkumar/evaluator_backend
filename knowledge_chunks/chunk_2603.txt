d in a plan library and
used in later planning as a macro-operator. Similar ideas appeared in Anderson s ACT architecture, under the heading of knowledge compilation (Anderson, 1983), and in the
SOAR architecture, as chunking (Laird et al., 1986). Schema acquisition (De Jong, 1981),
analytical generalization (Mitchell, 1982), and constraint-based generalization (Minton,
1984) were immediate precursors of the rapid growth of interest in EBL stimulated by the
papers of Mitchell et al. (1986) and De Jong and Mooney (1986). Hirsh (1987) introduced
the EB Lalgorithmdescribedinthetext,showinghowitcould beincorporated directlyintoa
logicprogrammingsystem. Van Harmelenand Bundy(1988)explain EB Lasavariantofthe
partialevaluation methodusedinprogram analysis systems(Jones etal.,1993).
Initial enthusiasm for EB Lwas tempered by Minton s finding (1988) that, without ex-
tensiveextrawork,EB Lcouldeasilyslowdownaprogramsignificantly. Formalprobabilistic
analysisoftheexpectedpayoffof EB Lcanbefoundin Greiner(1989)and Subramanianand
Feldman(1990). Anexcellent surveyofearlyworkon EB Lappearsin Dietterich(1990).
Insteadofusingexamplesasfociforgeneralization, onecanusethemdirectly tosolve
ANALOGICAL new problems, in a process known as analogical reasoning. This form of reasoning ranges
REASONING
from a form of plausible reasoning based on degree of similarity (Gentner, 1983), through
a form of deductive inference based on determinations but requiring the participation of the
example (Davies and Russell, 1987), to a form of lazy EBL that tailors the direction of
generalization of the old example to fit the needs of the new problem. This latter form of
analogical reasoning is found most commonly in case-based reasoning (Kolodner, 1993)
andderivational analogy(Velosoand Carbonell, 1993).
Relevance information in the form of functional dependencies was first developed in
the database community, where it is used to structure large sets of attributes into manage-
able subsets. Functional de