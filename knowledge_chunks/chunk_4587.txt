 After all possible values of K have been found the second clause is triggered which in plain English states that Anyone likes anyone. Now try to interpret what would happen if this clause were to be placed prior to the original clause for likes. Another way around is to use the following program. PROLOG - The Natural Language of Artificial intelligence 505 Eee mre do:-likes(prakash,X). \ do. likes(prakash, X) :-edible(X), tastes{X, sweet}, write(X)},nt fail. tastes(chocolates, sweet). tastes( gourd, bitter). | tastes(toffees, sweet). i edible(chocolates). edible(toffees). edible(gourd). The readers are urged to find the difference between these two programs. 25.10 CUTS : Written using an exclamatory mark (!), cuts form a way of preventing backtracking. Imagine what would happen if we bum the bridge on a river after crossing it. It would not be possible for us to return to find an alternate path, if required. The cut does just that. Inspect the sequence in which the subgoals on the right hand side are executed in following programdo:- p(N),q(N),nl, write(N), !.r(N). pt). p(2). PG). pt). q(2). q(3). ; q(4). 13). When the goal do is issued, the inference engine tries to satisfy p(N); then g(N} after which it proceeds to satisfy r(N) which happens to be located after the cut (!). Naturally, after satisfying p(N) (meaning finding a value of N such that p(N) is true), if g(N) is not satisfied, the engine backtracks to another alternative for p and comes back to check whether g can be satisfied with the new state of p. But if r (or any alternatives of 7) is not satisfied, given the currently satisfied states of p and gq, do fails as the cut (!) prevents any further backtracking. In short once p and g are satisfied, it becomes mandatory that r be satisfied, else the rule do fails. The sequence below shows how N changes its values. p(i) > q(1) False < Backtrack to p p(2) > q2) ! 1(2) False Cannot backtrack; thus fails. What would happen if there is an alternative path for d