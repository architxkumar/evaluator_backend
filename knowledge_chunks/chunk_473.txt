see that choosing G w will result in a dead end in which the fifth variable E will have no consistent assignment, and will abandon G w right there. Full Lookahead avoids picking the value w for the variable G. The reader should verify that it will proceed with G r, D g and try B b, at which point, it will be able to foresee that one of A or C will have their domain empty. It will refuse to assign B b and try B g next. This will lead to the solution shown in Figure 9.34, but in a backtrack free manner. The reader is encouraged to draw the matching diagram at the point when the algorithm finds the solution. In the above example, full lookahead resulted in a backtrack free search, but in general one may have to check for higher order consistency, while doing the lookahead to have backtrack free search. In practice, the cost of doing this may be prohibitive and one may have to trade-off search effort with propagation effort appropriately for each domain. Full lookahead may be useful when a variation of backtracking, in which the variables do not have a predetermined ordering, is used. Given a fixed ordering, one can use the less computationally expensive Partial Lookahead that does DAC on future variables. a 5 FIGURE 9.39 Full Lookahead G w. Remove w from F and E. Remove r from C, because it is not arc consistent with F. Next, remove b from A, B, and D because not consistent with C. Next, remove g (not consistent with B) and r (not consistent with A) from E. At this point, domain of E has become empty and therefore G wis rejected. 9.7.3 Value and Variable Ordering The algorithms described above use a predetermined ordering of variables, and for each variable, choose the first value that is allowed by whatever degree of lookahead being done. One can make a more informed decision for both these choices. Instead of choosing the first past-and-future-consistent value that we find for a variable, we could investigate all values in a domain (using a limited degree lookahead) 