 for each triple of variables. Subsequently, if it removes a pair from a relation, then it checks whether a side of a triangle with a third value is not being broken. The complexity of PC-2 depends upon how many elements can be added to the queue. Every time an element is removed from the queue, the call to revise does a computation of O(k?). The minimum number of calls is O(n), which is the number of distinct calls that can be made. In the worst case, in each cycle of the while loop, one pair is removed from one variable, two elements are added to the queue. For each combination ((x, y), z), at most k2 elements can be removed from the relation, and therefore at most, 2k? elements can be added to the queue. One can then argue that while loop executed at most is O(n k2) times, therefore the complexity of PC-2 is O(nk5). Both PC-1 and PC-2 rely on calls to Revise-3, which inspects all values in the three domains. One can design a finer grained algorithm analogous to AC-4. Indeed such an algorithm was devised by Mohr and Henderson (1986) and has complexity O(n k ). Notice that like in the reduction in complexity from AC-3 to AC-4, here too complexity is reduced by a factor that was contributed to by the Revise operator. In particular, PC-4 looks at only the effect of removing a pair a, b rather than all the k2 pairs that exist in the corresponding relation. We leave it as a complex exercise for the interested reader the design of the support structures needed. It is worth noting that path consistency does not automatically imply arc consistency. The following example is due to Freuder (1982). Problem CSP6 (X, D, C) ( x4, X2, xa , (0, fr, bb, 9 , (x1, Xb, x1 X02), ( X2, X3 , Xo Xz) As one can see, the CSP is path consistent, but it is not arc consistent. In general, if a CSP is i-consistent, it does not mean that it is ( 1)-consistent as well. 9.4.2 i-consistency The algorithms for path consistency give us a clue of how to write algorithms for higher order consistency. 