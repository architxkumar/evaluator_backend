general information about baseball teams. We can still inherit attributes for the elements of the team, but we cannot inherit properties of the team as a whole, i.e., of the set of players. For example, we might like to know what the default size of the team is, Person isa: Mammal cardinality : 6,000,000,000 * handed: Right Aduit-Male isa: Person cardinality 2,000,000,000 * height : 5-10 ML-Baseball-Player isa: Adult-Male cardinality : 624 *height : 6-1 * bats: equal to handed * batting-average: .252 * team: * uniform-color : Fielder isa: ML-Baseball-Player cardinality 376 *batting-average: 262 Pee-Wee-Reese instance : Fielder height : 5-10 baits : Right baiting-average: 309 team: Brooklyn-Dodgers uniform-color : Blue ML-Baseball-Team isa: Team cardinality : 26 * team-size : 24 * manager : Brooklyn-Dodgers instance : ML-Baseball-Team team-size : 24 manager : Leo-Durocher players : {Pee-Wee-Reese....} Fig. 9.5 A Simplified Frame System that it has a manager, and so on. The easiest way to allow for this is to go back to the idea of the Dodgers as an instance of ML-Baseball-Team, with the set of players given as a slot value. But what we have encountered here is an example of a more general problem. A class is a set, and we want to be able to talk about properties that its elements possess. We want to use inheritance to infer those properties Weak Siot-and-Filler Structures 195 LARTER TTS SI ATOR from general knowledge about the set. But a class is also an entity in itself. It may possess properties that belong not to the individual instances but rather to the class as a whole. In the case of Brooklyn-Dodgers, such properties included team size and the existence of a manager. We may even want to inherit some of these properties from a more general kind of set. For example, the Dodgers can inherit a default team size from the set of all major league baseball teams. To support this, we need to view a class as two things simultaneously: a subset (isa) of a larger class th