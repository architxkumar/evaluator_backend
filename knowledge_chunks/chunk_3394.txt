ch key element of the one argument block which follows according to the procedure given in the block remove: removes the argument object from the receiver collection remove Key: removes the object with the given key from the receiver collection For output from the simulation, we print the arrival time of each ship, indicating whether it docks or not, each ship departure, and the total cargo transferred at the end of the run. With the above preliminaries, we now define the three classes and their corresponding methods. We begin with the class Simulator which is the most complicated. To define a class, the word Class is given followed by the class name and (optionally) by the class's immediate superclass; if no superclass is given, the default class Object is assumed. This is followed by a list of local variables within vertical bar delimiters. The method protocol for the class is defined next, with the methods separated by vertical bars. The message template for each method is given as the first item following the vertical bar. When local variables for a method are needed, they follow the message template, also given within vertical bars. Class Simulator Icurreot Time events Pendingj new events Pending : Dictionary new. current Time : 0 time current Time add Event: event at: event Time (events Pending includes Key: evont Time) if True: j(events Pending at: eventrime) add: eventl Sec. 8.4 Simulation Example Using an OOS Program 159 if False: levents Pending at: eveot Time put: (Set new: add: event)l add Evint: event next: delay Time self add Event: event at: currentlime + delay Time proceed Imin Time oveot Set event mintime: 99999. events Pending keys Do: !:x (x,< min Time) if True: Imin Time := xli. current Time : minlime. event Set: events Pending at: min Time if Absent: I' nil!. event : = event Set first. event Set remove: event. (event Set is Empty) if True: levents Pending removekey: min Timel. self process Event: event The method responding to the message add Ev