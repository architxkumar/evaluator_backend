N PREDICATE CALLS Value Function call returned Remarks (atom 'aahb) I aabb is a valid atom (equal a (Car (a b)) a equals a. but note that (equal I 1.0) returns nil (cvenp nil 3 is not an even number (numbcrp l Oab) nil l Oab is not a number (oddp 3) 3 is an odd number (zerop .000001) nil argument is not zero (grea(erp 24 27) arguments are succeedingly larger, from left to right (Iessp 5 3 I 2) nil arguments are not successively smaller, left to right (listp (a)) (a) is a valid list (null nil) nil is an empty list Sec.3.4 IJe TInlng ruric*i Ofl S, Predicates, and Conditionals a The Conditional Cond Predicates are one way to make tests in programs and take different actions based on the outcome of the test. However, to -make use of the predicates, we need some construct to permit branching. Cond (for conditona)) is like the if-then-else construct. The syntax for cond is (cond (<tests> <action1>) (<test?> <action2>) (<test> <actiorr>)) Each (<test1> <action>), i=l .....k. is called a clause. Each clause consists of a test portion and an action or result portion' The first clause following the cond is executed by evaluating <test1>. lfthis evaluates tonon nil, the <action1> portion is evaluated, its value is rtturned. and the remaining clauses are skipped over. If <test1> evaluates to nil, control passes to the second clause without evaluating <action1> and the procedure is repeated. If all tests evaluate to nil, cond returns nil. We illustrate the use of cond in the following function maxirnum2 which returns the maximum of two numbers. ->(defun maxirr,rn2 (a b( (cond ((> a b I a) It b))) MAX) MU M2 When maxinium2 is executed, it starts with the first clause following the cond. The test sequence is as follows: if (the argument bound to) a is greater than (that hound to) b, return a. else return h. Note the t in the second clause preceding h. This forces the last clause to be evaluated when the first clause is not. ->(rnaximurn2 234 320) 320 a A slightly more challenging