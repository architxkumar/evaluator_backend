ition of mutex used in HSPr is (Bonet and Geffner, 2001). Given an initial state so and a set of ground operators A, a set M of pairs of propositions is a mutex set iff for all pairs R p, g M. 1. Both p and q are not true in so, and 2. For every action acA such that p adad(a) (and vice versa), (a) either gedel(a) or (b) qe add(a) and for some reprecond(a), R' r, q is a pair in The procedure for constructing the set M began by constructing a set Mo MakjU Mg where, Mz, is the set of pairs P p, q where for some action a, pe add(a) and qe del(a), Mg is the set of pairs P r, q such that for some pair P p, q eM, and some action a, reprecond(a) and peadd(a). The algorithm for computing M begins with the set Mp as defined above and removing all bad pairs that do not satisfy either of condition 1 and 2 defined above. Like in Graphplan, not all sets of mutually exclusive pairs are identified here, but the ones that are identified do help in pruning the search space. HSPr uses the additive heuristic h and the set M to guide the backward search, which is the weighted A search with the weight w set to 5, like in HSP2. Bonet and Geffner report that in some domains, HSP2 had better performance, while in some HSPr was better. An effort to exploit the benefits of backward search with an FF styled heuristic is described in (Kumashi and Khemani, 2002). 10.4.2 FF The algorithm Fast Forward (FF), also a forward state space search, employed a slightly different algorithm and a different strategy for computing the heuristic function (Hoffmann and Nebel, 2001), (Hoffmann, 2001). To compute a heuristic value for a given state s, FF constructs a relaxed planning graph from that state s. The relaxed planning graph is the planning graph constructed by ignoring the delete effects in actions. Since the delete effects are ignored, the resulting planning graph has no mutexes at all, because the mutexes are a direct consequence of having delete effects. Consequently, when the goal propositions are 