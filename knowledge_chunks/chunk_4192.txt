e some unachieved proposition P from S. 3. Achieve P by using step addition, promotion, declobbering, simple establishment, or separation. 4. Review all the steps in the plan, including any new steps introduced by step addition, to see if any of their preconditions are unachieved. Add to S the new set of unachieved preconditions. 5. If Sis empty, complete the plan by converting the partial order of steps into a total order, and instantiate any variables as necessary. 6. Otherwise, go to step 2. Of course, not every sequence of plan modification operations leads to a solution. For instance, we could use step addition ad infinitum without ever converging to a useful plan. The nondeterminism of steps 2 and 3 must be implemented as some sort of search procedure. This search can be guided by heuristics; for example, if promotion and step addition will both do the job, it is probably better to try promotion first. TWEAK uses breadth-first dependency-directed backtracking, as well as ordering heuristics. The example above used most of the plan modification operations, but not in their full generality. We will now be more specific about these operations and how they relate to finding correct plans. The core notion is one of making a proposition necessarily true in some state. The modal truth criterion tells us exactly when a proposition is true. Planning 267 The Modal Truth Criterion. A proposition P is necessarily true in a state S if and only if two conditions hold: there is a state T equal or necessarily previous to Sin which P is necessarily asserted; and for every step C possibly before S and every proposition Q possibly codesignating with P which C denies, there is a step W necessarily between C and S which asserts R, a proposition such that R and P codesignate whenever P and Q codesignate. Roughly, this means that P has to be asserted in the initial state or by some previous step and that there can be no clobbering steps without corresponding declobbering steps to sa