nces of the B operator, Ba;, Bag, ..., Ba,. We assume that the 2 combinations of truth values for these formulas are arranged in a total order and a function AssignBel(KB, i) selects the i? assignment from this ordering. We also assume a function ApplySimplify(assignment, KB) that applies the assignment (true or false) to the formulas with the B operators and simplifies the sentences in which they occur. The function Stable(expansion, k) tests whether under the k ' assignment the expansion is stable. The three functions described above are packed in the procedure StableExpansion(KB, j) that starts by inspecting the combination of truth assignments to the belief operators, and looks at them one by one in the given ordering, till it finds a stable expansion in which every formula of the type Ba is replaced either by true or false. The function Entails in the main procedure is a sound and complete first order theorem prover. The algorithm given here returns the value determined by the first stable assignment it finds. It can be extended to find all stable assignments. InferenceAE (KB, Alfa) 1jel 2 while j 2 3 ExpNum StableExpansion(KB, 7) 4 j First (ExpNum) 1 is) SA Second (ExpNum) 6 if Entails(SA, Alfa) 7 then return yes 8 return no StableExpansion(KB, 7) 1 for k j to 2 A AssignBel (KB,k) Ex ApplySimplify (A, KB) if Stable(Ex,k) then return (k, Ex) 6 return (k, nil) a ew hd Figure 17.1 The procedure StableExpansion assumes that the combinations of truth assignments to the belief statements are arranged in a total order. It accepts an index j into this ordering and inspects the combinations one by one till it finds a stable expansion. The calling procedure takes this stable expansion and checks whether the formula Alfa is entailed in the stable expansion, using a first order theorem prover Entails. The functions First and Second are list functions that return the first and second element respectively. The function ApplySimpilify substitutes true or false for the belief