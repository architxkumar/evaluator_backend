 concept space, and can be depicted as in Fig. 17.11. At the top of the concept space is the null description, consisting only of variables, and at the bottom are all the possible training instances, which contain no variables. Before we receive any training examples, we know that the target concept lies somewhere in the concept space. For example, if every possible description is an instance of the intended concept, then the null description is the concept definition since it matches everything. On the other hand, if the target concept includes only a single example, then one of the descriptions at the bottom of the concept space is the desired concept definition. Most target concepts, of course, lie somewhere in between these two extremes. As we process training examples, we want to refine our notion of where the target concept might lie. Our current hypothesis can be represented as a subset of the concept space called the version space. The version space is the largest collection of descriptions that is consistent with all the training examples seen so far. 360 Artificial Intelligence EEN. = s R origin : x mfr: X2 color : x3 decade: x4 type: %5 a origin : Japan origin : x4 mir: x2 mir: x2 color : x3 color : x3 decade: X4 decade: X4 type: XS type: Economy ae a : origin : Japan ongin : USA mfr: X2 mfr : x2 color : x3 color : x decade: X4 decade: x4 type: Economy type: Economy origin : Japan ongin : USA mfr: Honda mir: Chrysler color: White color: Green decade: 1980 decade: 1970 type: Economy type: Economy Fig. 17.10 Partial Ordering of Concepts Specified by the Representation Language How can we represent the version space? The version space is simply a set of descriptions, so an initial idea is to keep an explicit list of those descriptions. Unfortunately, the number of descriptions in the concept space is exponential in the number of features and values. So enumerating them is prohibitive. However, it turns out that the version space has a concise representation.