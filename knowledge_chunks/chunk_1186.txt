namic programming procedure . At the same time, the children do affect the value of N during the procedure, and through N, the values get propagated to the ancestors of N as well. The LAO algorithm takes a heuristic search approach to solving SSPs in which a start node has been specified. It employs a heuristic function to explore only that part of the state space which the heuristic function estimates to be cheapest. At the termination of the algorithm it finds the optimal policy . This policy may be cyclic in nature. We look at the initial steps LAO would take with our problem described in Figure 17.29 and Table 17.13. The transition graph it explores has been depicted in Figure 17.37. It begins with the start node S,. Since this is the only leaf node, it expands it with the possible actions 42, 443, 444 and a45. This results in addition of the nodes so, s3, S4 and Ss to the transition graph. As shown in Figure 17.39, the heuristic values of these four nodes are computed. The heuristic values we have used are the costs for deterministic paths from each node to the goal sg as determined from Figure 17.29. The backed up cost for the node s, is V a15(s,) 21.7, which is backed up from the hyper-edge for action a45. This is the minimum of the possible values from each of the four actions as is shown in the figure. The graph Gpis shown with dark solid lines, and contains the marked path along the hyper-edge for the actions a45. The fringe is the leaves in Gp, that is, the nodes sq and ss. LAO will pick one of them for expansion. While in general, any node from the fringe can be chosen for expansion, in practice it helps to make informed choices. Two approaches would be to either choose a node that has the highest probability of being reached, or the one that seems to be the cheapest. Figure 17.39 In the first cycle LAO expands Sj, the only node on the fringe. There are four actions a1, 213, a44 and a5 possible. Based on the costs in Figure 17.29 and the probabilities in