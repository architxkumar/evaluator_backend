s in the array, we use the function setf as we did above to store properties on a property list. So, to store the items 25, red, and (sam sue linda) in the first, second, and third cells of myarray,we write 38 USP and Other Al Progr.milng languages .Chap. 3 ->(setf (aref myarray 0) 25) 25 ->(setf tarot myarray 1) 'red) RED ->Csetf (arermyarrey 2) '(*am sue linda)) (SAM SUE LINDA) 3.7 MISCELLANEOUS TOPICS We complete our presentation of LISP in this section with a few additional topics, including the functions mapcar, eva), lambda, trace and untrace, and a brief description of the internal representation of atoms and lists. Mapping Functions Mapcar is one of several mapping functions provided in LISP to apply some function successively to one or more lists of elements. The first argument of mapcar is a function, and the remaining argument(s) are lists of elements to which the named function is applied. The results of applying the function to successive members of the lists are placed in a new list which is returned. For example, suppose we wish to add I to each element of the list (5 10 15 20 25). We can do this quite simply with mapcar and the function 1+. ->(mapcar 1+ '(510152025)) (6 11 1621 26) If we wish to add the corresponding elements of two lists (even of unequal length), say (I 2 3 4 5 6) and Il 2 3 4), we use the + function with the lists to obtain the sum of the first four elements. ->(mapcar -' '(1 23456) '(1 234)) (2468) It should be clear that mapcar can be used in a variety of ways in lieu of iterative functions. And, the function being applied to the lists may be either user defined or built-in. Lambda Functions When a function is defined with defun, its name and address must be stored in a symbol table for retrieval whenever it is called in a program. Sometimes, however, it is desirable to use a function only once in a program. This will be the case Sec*, Mneouir Tb Oiceedt O hna q2tj when it is uied in a mapping operation such as with lnapcar, whic