ayers are like arc consistency requirements in CSPs. In fact, it has been observed that if higher order mutual exclusions constraints (or nogoods) were maintained then the backward search process would be bound to succeed. This is equivalent to the situation in solving CSPs when an appropriate level of iconsistency makes the search backtrack free. The plan extraction task can be posed as a CSP problem. In GP-CSP developed by Do and Kambhampati, the variables are the goal and subgoal propositions at different layers (Kambhampati et al., 1997), (Kambhampati, 2000) (Do and Kambhampati, 2000; 2001). The domains of these variables contain the set of actions that produce these propositions. There are two approaches to solving a planning graph as a CSP. The first uses the notion of a Dynamic CSP (DCSP) (Mittal and Falkenhainer, 1990), (Dechter, 2003) in which a unary constraint called active identifies the propositions that participate in the solution. In a DCSP, only a subset of the variables are active, and the task is to find a satisfying assignment for those variables. In solving the planning graph as DCSP, the variables or goal propositions that are active is determined dynamically in the solution finding process. Initially, the goal propositions in the final layer are marked active, and when their values or actions are chosen, the corresponding preconditions are also marked active. Let us say that the goal in the planning problem depicted in Figure 10.4 is On(A, C), OnT(C) . The variables of the CSP would be all the propositions that occur in the layers P; and Pz in the figure, and their domains the actions in the planning graph that produce them. In the notation below, the subscript refers to the layer the proposition occurs in. The propositions in layer Pp can implicitly be assumed to have value true, or they can be considered to have a value nit for an initial action that generates the starting state (in the style of plan space planning see Chapter 7). Variables C