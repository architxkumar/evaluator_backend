ion of the iterative deepening search method presented earlier, we obtain iterative deepening At or IDAt. IDAt performs a depth search at each iteration and eliminates or trims all branches whose estimated cost (g* + ht) exceeds a given threshold T(i) where = 0,1,2 . . . is the iteration number. The initial threshold T(0) is the estimated cost of the initial state. After that, the threshold increases with each iteration. The value of T on iteration i + I is taken as the minimum of the costs which exceed T on iteration i. Like At,. it can be shown that IDAt always finds a ast path if ht is admissible. Furthermore, IDAt expands the same number of nocr as M (asymptotically). 9.6 SEARCHING Mi'iij-tj R GRAPHS The depth-first and breadth-first strategies given earlier for Or trees and graphs can easily be adapted for And-Or trees. The main difference lies in the way termination conditions are determined, since all goals following an And node must be realized, whereas a single goal node following an Or node will do. Consequently, we describe a more general optimal strategy that subsumes these types, the AO* (0 for ordered) algorithm. As in the case of the At algorithm, we use the open list to hold nodes that have been generated but not expanded and the closed list to hold nodes that have been expanded (successor nodes that are available). The algorithm is a variation of the original given by Nilsson (1971). It requires that nodes traversed in the tree be labeled as solved or unsolved in the solution process to account for And node solutions which require solutions to all successor nodes. A solution is found when the start node is labeled as solved. THE A0 ALGORITHM 1. Place the start node s on open. 2. Using the search tree constructed thus far, compute the most promising solution tree T0. Sec. 9.7 Summary 185 3. Select a node n that is both on open and a part of T0. Remove n from open and place it on closed. 4. If n is a terminal goal node, label n as solved. If the solut