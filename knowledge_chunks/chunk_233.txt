ed for at any time. Thus, BSS becomes an anytime algorithm, quickly finding a good solution which can be returned on demand, but continuing to explore the rest of the space looking for better solutions. The best solution so far can be returned on demand. Moreover, since it uses a heuristic function and explores the lowest value nodes first, it is quite likely to find the best solution early. Beam Stack Search is a complete and admissible version of Beam Search. Like Beam Search (with the CLOSED list), the space required by the algorithm is linear with depth. Finally, the divide and conquer strategy can be applied to Beam Stack Search as well, to give a complete and admissible algorithm that requires almost constant space. 5.11 Divide and Conquer Beam Stack Search Like DCBS, the Divide and Conquer Beam Stack Search (DCBSS) (Zhou and Hansen, 2005) also keeps four layers of width w in memory, as shown in Figure 5.32. Like the BSS, it maintains a beam stack that marks the fmin and fax values for each layer. Strictly speaking, the space requirements of DCBSS are not constant because of the beam stack, which grows linearly with depth. But since only two values are stored per layer, the space requirements are presumably much smaller than those required to encode the state for each node. The number of nodes that DCBSS keeps are however constant, being 4w, and thus the algorithm can permit a suitably large beam width w. RELAY CLOSED (OPEN and CLOSED Upper bound U on f-values FIGURE 5.32 Divide and Conquer Beam Stack Search stores four layers of width w. DCBSS differs from DCBS, in that for the sake of completeness it may backtrack and explore a different segment of the search space. Backtracking is however not a straightforward process because DCBSS has burnt its bridges and pruned away most layers from the beam. Instead of backtracking chronologically, the algorithm instead exploits the beam stack that maintains fipin and fax Values for all layers. It simply regenerates the