itecture of the problem solver with a TMS, 84 Dealing with Inconsistencies and Uncertainties Chap. will always know its current belief set. The records are maintained in the form of a dependency network. The nodes in the network represent KB entries such as premises, conclusions, inference rules, and the like. Attached to the nodes are justifications which represent the inference steps from which the node was derived. Nodes in the belief set must have valid justifications. A premise is a fundamental belief which is assumed to be always true. Premises need no justifications. They form a base from which all other currently active nodes can be explained in terms of valid justifications. There are two types of justification records maintained for nodes: support lists (SL) and conceptual dependencies (Cl?). SLs are the most common type. They provide the supporting justifications for nodes. The data structure used for the SL contains two lists of other dependent node names, an in-list and an out-list. It has the form (SL <in-list> <out-list.^) In order for a node to be active and, hence, labeled as IN the belief set, its SL must have at least one valid node in its in-list, and all nodes named in its outlist, if any, must be marked OUT of the belief set. For example, a current belief set that represents Cybil as a nonflying bird (an ostrich) might have the nodes and justifications listed in Table 5.1. Each IN-node given in Table 5.1 is part of the current belief set. Nodes n I and n5 are premises. They have empty support lists since they do not require justifications. Node n2, the belief that Cybil can fly is out because n3, a valid node, is in the out-list of n2. Suppose it is discovered that Cybil is not an ostrich, thereby causing n S to be retracted (marking its status as OUT). Then n3, which depends on n5, must also be retracted. This, in turn, changes the status of n2 to be a justified node. The resultant belief set is now that the bird Cybil Can fly. To represent a 