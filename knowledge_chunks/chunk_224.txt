nal moves correspond to character alignment and may have a cost of zero or one, depending upon whether the two characters are the same or different. Further, the sequence alignment problem can easily be extended to multiple sequences. An n-sequence problem will form an ndimensional grid. 5.9 Pruning the CLOSED List One of the functions of the CLOSED list is to prevent nodes from being expanded again and again. However, for a node on CLOSED to be expanded again, it will have to be generated as a child of some node on OPEN that is being expanded. In the DFS search algorithms discussed earlier (Figure 2.18), a function removeSeen prevented old nodes from being added to OPEN again. However, one can also prevent the search from regenerating the CLOSED nodes again by observing that for search to leak back into CLOSED it will have to go through nodes that are children of nodes on OPEN. For any node that is being expanded, it suffices to exclude successors that are behind the node. An important condition that must be satisfied is the consistency condition. As shown in Section 5.6.1, the consistency condition implies that all nodes in CLOSED have the best path to them discovered already. If that is the case then in the A algorithm there is no need to generate nodes already in the CLOSED again. 5.9.1 Divide-and-Conquer Frontier Search One way of doing this is to modify the moves that can be made from the nodes on OPEN to keep a tabu list of disallowed successors for each node that is added to OPEN. The move generator is modified such that every time a node X (on OPEN) is generated as a successor of some node Y, Y is excluded from becoming a successor of X. If the node X is generated later as a successor of some other node Z then Z is also excluded from its list of successors of X. That is, every time a node is expanded, it is put on a tabu list of all its successors. And when a node is expanded, only the non-tabu successors are generated. As a consequence, every arc in the se