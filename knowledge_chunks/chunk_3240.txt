 returns a list containing the last element (member 'b '(a b d)) lb dl returns remainder of second a,- gument list starting with element matching first argument. (resersc '(a (b C) d)) (d (b C) a) returns list with top elements in reverse order. 1. Sec 3,3 Delinlng Funo lon LPr,diatss. and Conditionals 25 Complete the practice examples below. ->(append '(a (b C)) (d e)) ;returns a single list of (A (B C) 0 E ;top element input lists >(append '(a) '(b C) '(d)) (A B C Dl ->(Iast (a b (c d) (e))) ;returns the last top ((El) ;element as a list ->(member '(d) (a (d) e f)) ;returns the tail of ((0) E F). ;list from member element ->(reverse '(a b (C dl e)I ;returns the list with top (E (C Dl B A) ;elements in reverse order 3.3 DEFINING FUNCTIONS,, PREDICA1S, AND CONDITIONALS Defining Functions Now that we know how to call functions, we should learn how to define our own. The function named defun is used to define functions. It requires three arguments: (1) the new function name, (2) the parameters for the function, and (3) the function body or LISP code which performs the desired function operations. The format is (defun name (parrnl parm2 ...) body). Defun does not evaluate its arguments. It simply builds a function which may be called like any other function we have seen. As an example, we define a function named averagethree to compute the average of three numbers. ->(defun averagethree (nl n2 n3) (/ (+ ni n2 rt3) 3)) AVERAGETHREE Note that defun returned the name of the function. To call averagethree. we give the function name followed by the actual arguments ->(averagethree 1020 30) 20 When a function is called, the arguments supplied in the call are evaluated unless they are in quotation marks and bound to (assigned to) the function parameters. The argument values are bound to the parameters in the same order they were given in the definition. The parameters are actually dummy variables (nt, n2, n3 in averagethree) used to make it possible to give a function a gener