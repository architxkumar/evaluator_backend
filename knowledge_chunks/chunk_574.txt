 to execute (or makespan), or minimize the amount of slack in the plan, or minimize the amount of some resources used. In practice, one may want to optimize on a combination of these criteria. This would also influence the design of the heuristic function, which should be faithful to the criterion being used. Sapa relaxes the actions in two ways. One, the delete effects of actions are ignored. Two, actions are assumed to not consume resources. That is, the metric fluents in the actions are not decremented in its effects. In either case, the resulting planning graph does not have any mutex relations. The relaxed temporal graph (RTG) uses the following data structures. A Fact Level A fact fis marked in at time instant f; if it can be achieved at that time instant. An Action Level An action a is marked in at time instant t, if it can be executed at that time instant. A Queue of Unexecuted Events Observe that there is one queue for the entire planning graph. When the construction of the RTG begins for a given state S (P, M, Nn, Q, t), the fact level contains all the fluents in P marked in at time t, the action level is empty, and the event queue contains all unexecuted events of Q that add fluents. An action a is marked in, if it is not already marked in and all its preconditions are marked in. When an action is marked in, all its at-start effects are marked in and all its at-end effects are added to the event queue, if not already marked in in the fact layer and there is no event in the queue that will add them earlier. After all actions applicable at that time are dealt with, the algorithm returns no-solution if either (1) the event queue is empty, or (2) there is an unmarked goal with a deadline earlier than the earliest event in the event queue. This is because now time will be advanced to an instant beyond that deadline. If the event queue is empty, nothing more can be done. If the conditions for no-solution do not occur, the RTG is extended by advancing the time t