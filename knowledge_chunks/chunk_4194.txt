tertwined. The representation of operators and plans used by TWEAK is at the same time too powerful and too weak. Chapman [1987] proved that even with simple STRIPS-style operators, planning in general is not even decidable, although it is semidecidable: If there is a plan that solves a problem, a planner can find it, but if there is no such plan, the planner may never halt. NP-completeness results suggest that planning is exponentially hard. But it is of no use to look for a simpler representation that might allow for more efficient plan construction if anything, most domains seem to require operators that are much more complex than the operators used by TWEAK. For example, it is natural to express many preconditions using quantifiers and embedded negation and also to have postconditions with different effects depending on the state of the world. Figure 13.10 depicts a more complex operator structure, of the type used in the PRODIGY planning system {Minton ef al., 1989]. As our representation becomes more expressive, the idea of a provably correct, efficient, domainindependent planner becomes more unlikely, and we must again turn to knowledge-intensive heuristic methods. Two propositions codesignate if they can be unified, given the current constraints on variables. 268 Artificial Intelligence 13.6 HIERARCHICAL PLANNING In order to solve hard problems, a problem solver may have to generate long plans. In order to do that efficiently, it is important to be able to eliminate some of the details of the problem until a solution that addresses the main issues is found. Then an attempt can be made to fill in the appropriate details. Early attempts to do this involved the use of macro-operators, in which larger operators were built from smaller ones [Fikes and Niisson, 1971]. But in this approach, no details were eliminated from the actual descriptions of the operators. A better approach was developed in the ABSTRIPS system [Sacerdoti, 1974], which actually planned in a h