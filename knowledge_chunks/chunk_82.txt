Search (BFS) Breadth First Search (Figure 2.20), on the other hand, is very conservative. It inspects the nodes generated on a first come, first served basis. That is, the nodes form a queue to be inspected. The data structure Queue implements the first in, first out order. The BFS algorithm is only a small modification of the DFS algorithm. Only the order in the append statement where OPEN is updated needs to be changed. BreadthFirstSearch () 1 cpen ((start, NIL)) closed ( ) 2 2 3 while not Null(cpen) 4 donodePair Head(cpen) Ss node Head(nodePair) if GoalTest(node) TRUE 7 then return ReconstructPath(nodePair, clesed) is else closed Cons(nodePair, closed) g children MoveGen (node) 16 noLoops RemoveSeen(children, open, closed) ll new MakePairs(ncLoops, node) 12 open Append(Tail(open), new) l3return No scluticn found FIGURE 2.20 In BFS, the order in append is reversed. OPEN becomes a QUEUE. This small difference in the order of adding nodes to OPEN produces radically different behaviours from the two search methods. DFS dives down expanding the search tree. Traditionally, we draw it going down the leftmost side first. BFS on the other hand pushes into the tree, examining it layer by layer. Consider the following small search tree (Figure 2.21) that would be built if every node had three successors, and the total depth was three. FIGURE 2.21 A tiny search tree. Let us look at the tree generated by search at the point when the search is about to examine the fifth node, shown in black for both DFS and BFS in Figure 2.22. FIGURE 2.22 The search trees generated by DFS and BFS after four expansions. DFS dives down the left part of the tree. It will examine the fifth and the sixth nodes and then backtrack to the previous level to examine the sibling of the third node it visited. BFS, on the other hand, looks at all the nodes at one level before proceeding to the next level. When examining its fifth node, it has started with level two. How do the two search methods compare? A