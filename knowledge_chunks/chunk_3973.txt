t the state descriptior. Rules that match dump their right-hand side assertions into the state, and the process repeats. Matching is typically more complex for forward-chaining systems than backward ones. For example, consider a rule that checks for some condition in the state description and then adds an assertion. After the tule fires, its conditions are probably still vatid, so it could fire again immediately. However, we will need some mechanism to prevent repeated firings, especially if the state remains unchanged. While simple matching and control strategies are possible, most forward-chaining systems (e.g., OPS5S [Brownston et al., 1985]) implement highly efficient matchers and supply several mechanisms for preferring one rule over another. We discuss matching in more detail in the next section. 6.3.3 Combining Forward and Backward Reasoning Sometimes certain aspects of a problem are best handled via forward chaining and other aspects by backward chaining. Consider a forward-chaining medical diagnosis program. It might accept twenty or so facts about a patient s condition, then forward chain on those facts to try to deduce the nature and/or cause of the disease. Now suppose that at some point, the left side of a rule was nearly satisfied say, nine out of ten of its preconditions were met. It might be efficient to apply backward reasoning to satisfy the tenth precondition in a directed manner, rather than wait for forward chaining to supply the fact by accident. Or perhaps the tenth condition requires further medical tests. In that case, backward chaining can be used to query the user. Whether it is possible to use the same rules for both forward-and backward reasoning also depends on the form of the rules themselves. If both left sides and right sides contain pure assertions, then forward chainiiy can match assertions on the left side of a rule and add to the state description the assertions on the right side. But if arbitrary procedures are allowed as the ri