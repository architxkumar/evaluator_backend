sw s around the operator can be explained by the fact that (a D B) has a hidden negation sign inside the equivalent form ( aV 8). When the negation moves across a quantifier it transforms the existe and vice versa. Forward Chaining in FOL phrase our example (Alice) problem in first order terminology. ice likes mathematics and she likes stories. someone likes mathematics she likes algebra . someone likes algebra and likes physics she will go to college. ice does not like stories or she likes physics. ice does not like chemistry and history. an formalize the statements in FOL as follows. es(Alice, Math) A likes(Alice, stories) x(likes(x, Math) likes(x, Algebra)) x((likes(x, Algebra) likes(x, Physics)) D goesTo(x, College)) ikes(Alice, stories) V likes(Alice, Physics) ikes(Alice, Chemistry) Anlikes(Alice, History) an now generate a proof that is analogous to the proof in propositional logic. ac(Alice Math) can compare this proof with one in the propositional logic. Except for the two steps using ion (Ul) the other steps are identical. And it is these UI steps that rite diffiguit to automate ocess. Of all the constants in the domain, and one imagines there must be many in a realistic proble ld the rule select? In the example above the variable x is bound to Alice somehow. Of course th cause it is about Alice that we want to make the inference from liking math to liking algebra. To b Alice our inference engine (proof finding procedure) will need to search the set of statements tc relevant constants to instantiate to. Fortunately there exists a representation, the implicit quanti akes this a lot easier. Before we look at the implicit quantifier form, let us digress a little and look at a While applying UI to the rule VW x(likes(x, Math) likes(x, Algebra)) what stops us from binding which is also a constant term? One approach way would be to organize the constants into categc in our example we could introduce the categories person , subject , and educationInstitute . Let u