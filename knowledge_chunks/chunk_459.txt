priate degree. It may add new edges to the constraint graph, and therefore new explicit constraints. The function Parents(x,) returns the set of parents of a node and the procedure Revise- (S, x,) is defined in Fig. 9.20. The induced width of the ordered constraint graph will dictate the amount of work done by adaptive consistency. In general, if the induced width is w then enforcing strong wconsistency may require one to inspect subsets of smaller size as well. In the end, while selecting the value for a variable x;, the reduced domain of x; should only contain values that participate in all constraints for all future variables. We argue that this happens automatically if we use the Adaptive Consistency algorithm. If a given node x, has P parents then the algorithm ends up adding edges between all the parents, and establishing a constraint of arity (P 1). Let xp be the first such parent the algorithm encounters when processing in the last to first order. Then xp would have all the other parents of x, as parents, apart from any parents of its own that it might have had. Directional consistency will make sure that only those compound labels for the parents of xp are allowed that can be extended with a value for xp. As we progress (backwards), the maximum possible size of the sets of parents will decrease, even though more edges are added on the way, eventually pruning the domains of independent variables. Observe that if the graph is connected then x, will have an edge to x2 by the time x2 is processed . When the second variable x2 is processed, it will prune the domain D, of x, so that only values consistent with x2 are retained. If x, is also connected to some x, then the constraint R12 would have been introduced (or pruned) to allow only pairs consistent with the later variable. This will constrain the choice of a value for x2. Likewise, a constraint R123 will constrain the choice a value for x3, and so on. We illustrate this with a couple of examples. Consider ap