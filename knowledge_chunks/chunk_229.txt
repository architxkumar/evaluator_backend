roblem space only grew polynomially with depth, in which case the list OPEN is generally much smaller, often only growing linearly. However, in general, when problem space grows exponentially, it is the OPEN list that accounts for most of the memory. In this section, we look at ways to prune the OPEN list. 5.10.1 Breadth First Heuristic Search In the chapter on State Space Search (Chapter 2), we had observed that Breadth First Search suffered from an exponentially growing memory requirement. The main reason for that was that the search was uninformed. If we can somehow generate an upper bound U on the solution cost then we could prune away nodes whose f-values are higher than U. This is because f-values are known to be lower bound estimates of solutions containing that node. The upper bound estimate could itself be obtained by using an inexpensive method like Beam Search, using only the heuristic function h(n). The resulting search algorithm called Breadth First Heuristic Search (BFHS) (Zhou and Hansen, 2004) has been shown to use less memory than A search. It explores nodes in a breadth first manner, but prunes nodes that have the estimated cost f(n) larger than the upper bound U. The following figure suggests why the algorithm keeps a smaller OPEN list, and it can be seen that the better the heuristic function, the tighter will be the upper bound. ( Breadth First Heuristic OPEN 4 Breadth First OPEN ae Sat O Goal ) First OPEN Upper Bound on f-values FIGURE 5.28 Breadth First Heuristic Search prunes the OPEN using f-values. Observe that the pruning of nodes from the Breadth First frontier is admissible because the pruned nodes cannot be part of the optimal solution. Thus, BFHS is a variation that is complete and admissible. It requires lower memory for OPEN than A , but may expand more nodes than A does. The memory required by the OPEN of BFHS peaks somewhere around the halfway mark. After that point, the number of nodes that have fvalues within the upper bound star