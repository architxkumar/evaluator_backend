d V must be unset. Do a category test to see if has is an auxiliary. This test succeeds, so set the AUX register 1o has and go to state Q3. Do a category test to see if printed is a verb. This test succeeds, so set the V register to printed. Go to state Q4. . Now, since the input is exhausted, Q4 is an acceptable final state. Pop and return the structure (S| DCL (NP (FILE (LONG) DEFINITE)) HAS (VP PRINTED)) This structure is the output of the parse. This example grammar illustrates several interesting points about the use of ATNs. A single subnetwork need only occur once even though it is used in more than one place. A network can be called recursively. Any number of internal registers may be used to contain the result of the parse. The result of a network can be built, using the function BUILDQ, out of values contained in the various system registers. A single state may be both a final state, in which a complete sentence has been found, and an intermediate state, in which only a part of a sentence has been recognized. And. finally, the contents of a register can be modified at any tune. In addition, there are a variety of ways in which ATNs can be used which are not shown in this example: The contents of registers can be swapped. For example, if the network were expanded to recognize passive sentences, then at the point that the passive was detected, the current contents of the SUBJ register would be transferred to an OBJ register and the object of the preposition by would be placed in the SUBJ register. Thus the final interpretation of the following two sentences would be the same Bill printed the file. ~ The file was printed by Bill. Arbitrary tests can be placed on the arcs. In each of the arcs in this example, the test is specified simply as T (always true), But this need not be the case. Suppose that when the first NP is found, its number is determined and recorded in a register called NUMBER. Then the arcs labeled V could have an additional test placed on the