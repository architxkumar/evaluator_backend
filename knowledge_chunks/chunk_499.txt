the call to ExtendGraph. We assume that the procedure is called only if the initial state is not the goal state. The process of extending the graph (lines 11 and 12) continues till any one of the following two conditions is achieved. 1. The newest proposition layer contains all the goal propositions, and there is no mutex relation between any of the goal propositions. This is tested by the procedure GoalPropExist in the figure below. Like the ApplicablePG procedure, here also the test for mutex has both pm, Py MuPjor px, Pm MuP; for readability, though strictly speaking one is enough. 2. The planning graph has levelled off. This means that for two consecutive levels, (Pi-4 P; and MuP; , MuP)) If two consecutive levels have the same set of propositions with the same set of mutex relations between them, it means that no new action can make an appearance. Hence, if the goal propositions are not present in a levelled planning graph, they can never appear, and the problem has no solution. ExtendGraph (i, A, Aj, MuAj, Prez), PostPy, PostNy, Py, MuPo, ..., MuA,-., PreE;., PostP,-;, PostN,1, Ps, MuP;-, ) 1 3 4 5S Prezs - PreE,-. PostP - PostP:., 7 PostN, PostN, , 8 for each a,e (A A,) 9 if ApplicablePG(a,, P,-., MuP:-,) 10 then A: cons(a,, A;) 11 P, append (effects (a,), P) 12 for each pe precond(a,) 13 PreE. cons( p, a, , PreE,) 14 for each peeffects (a,) 15 PostP, cons ( a,, p , PostP,) 1 for each peeffects (a,) 17 PostN. cons( a,, p , PostN,) 18 for each a, A, and afa, A, 19 if MutexA(a,, ,, MuP,.,, PreZ;, PostP,, PostN.) 20 then MuA, cons( a,, 2, , MuA,) 1 for each p, P; and pyp, P; ww iS) if MutexP(p,, Px, PostP,, MuA,) then MuP, cons( p,, P, , MuP,) return A,, MuA,, PreE,, PostP,, PostN,, Py MuPy, .., A,, MuA;, PreE;, PostP;, PostN;, P,;, MuP,; tw wv mW ApplicablePG(a,, P;-., MuP:-1) 1 Preconds precond(a,) 2 if Preconds P, , 3 then for each p, Preconds 4 for each py Preconds 5 if Pe, Py MuP:-, or Py, Pa MuPs-, 6 then return false 7 else return false 8 xreturn true FIG