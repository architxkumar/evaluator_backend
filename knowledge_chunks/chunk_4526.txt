 into a GA compatible one by defining the structure of the chromosome (solutions like {1, 0, 1}, {1, 1, 0}, etc.) and also identifying a suitable fitness function to help us evaluate how good each of them is. 23.2.1.1 Using GA to solve the Job-shop problem The following steps make up the GA: 1. Represent a solution as a chromosome and find a suitable fitness function: We have already made our problem GA compatible hy defining the chromosome (solutions like {1, 0, 1}, {1, 1, 0}, etc. ) and also identifying a fitness function f(Chromosome) = (concat(Gene1 ,Gene2,Gen3)) jo which joins the three genes (bits) that comprise the chromosome and retums its decimal equivalent to help us evaluate the chromosome. : 2. Choose a population of solutions and initialize it. Let the population size N be equal to 4. (In normal practice this would be a much larger number; but this is merely to understand how the GA works). Let the initialized population be [ {0, 0, 1}, (0, 1,0}, (4, 1, O}, (1,0, 191. This forms the initial randomly evolved starting generation. 3. We now apply the genetic operators one by one. This involves the following steps: (a) Determine the fitness of each solution (chromosome) as also the total fitness of the population Lf. Table 23.1 gives these values. Also calculate the normalized fitness which is essentially the fitness probability. The last column gives the actual number of solutions of that type that could occur in the population and is called the expected count of the solution E.. Table 23.1 Fitness and Expected Count of a Generation Solution No. i | Solution Si | f, = (concat(Genel,Gene2,Gene3));9 | Yop; = f/ Ef, *100 | E. = N * %p, {0. 0, 1} {0, 1, 0} {1, 1,0} {i,0, 1} =z Maximum 460 Artificial intelligence (b) Reproduction: To evolve the next generation, we select a set of N chromosomes whose average distribution is equal to the expected count distribution. While there could be many ways of doing this, we go in for a simple solution. The significance of 