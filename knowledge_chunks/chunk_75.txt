r search program is not unlike the one faced by Hercules. For every node that Simple-Search-1 picks to inspect, many more are added in the bag. In mathematical terms, the search tree generated by the program grows exponentially. And yet, as Hercules demonstrated in his fight with Hydra, the monster can eventually be overcome. Almost all the research we see in artificial intelligence can be seen as a battle against CombEx, the monster that makes our problems grow with a COMBinatorial Explosion . Our battle with CombEx will require two abilities. The first will be the basic skills to navigate and explore the search space. This is akin to learning how to handle the sword. But as we will see, this will not be enough. We will also need to know where to strike. Without knowledge to guide the exploration, search will be hopelessly outnumbered by the exploding possibilities. The first is necessary because CombEx will appear in new forms as we strive to solve new problems. But as we wage the battle, we must be able to learn the strengths and weaknesses of CombEx in every domain. We must acquire knowledge both through our own experience and the accumulated experience of other problem solvers. Let us look at a small, synthetic problem to illustrate our search algorithms. Figure 2.10 depicts the state space graph for a tiny search problem. Simple Search 1 simply picks a node N from OPEN and checks if it is the goal. IfYes, it returns the node N IfNo, it adds all children of N to OPEN FIGURE 2.10 A tiny search problem. There are two problems with the above program. The first is that the program could go into an infinite loop. This would happen when the state space is a graph with loops in which it would be possible to come back to the same state. In the Eight Puzzle described above, the simplest loop would be when a tile is moved back and forth endlessly. For the tiny search problem of Figure 2.10, a possible trace of the search algorithm is shown below in Figure 2.11, in which 