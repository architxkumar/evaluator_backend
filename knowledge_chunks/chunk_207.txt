cst) solution further 4 until the cheapest solution s is fully refined 5 return s FIGURE 5.7 The general Branch Bound procedure. Branch Bound is a complete and admissible algorithm. That is, it will find a solution, if there exists one, and it is guaranteed to find an optimal solution. In terms of space and time complexity, however, it is not very good. The algorithm can be seen as a generalization of the Breadth First Search algorithm when each move has an associated cost. Like Breadth First Search, this algorithm too is uninformed and conservative, searching blindly without a sense of direction. Figure 5.8 shows an example map (to scale) where the B B algorithm would spend a lot of time exploring nodes that are closer to the starting point before finding a path to the goal. Both the time and space complexity of B B tends to be exponential. R eg fo) o Qo O B B will shoot off in the fo) le) ) opposite direction! Oo Oo oo ie -0 -O oO o-9 9 9 p tea S d e o oO Q-0 Oo FIGURE 5.8 Branch Bound has no sense of direction. 5.4 Dijkstra s Algorithm Dijkstra s algorithm (DA) (Dijkstra, 1959; Cormen et al., 2001) is a well known shortest path algorithm on graphs. It solves a more general problem, known as the single source problem. The algorithm finds the shortest paths to all nodes in the graph from a given (source) node. In that sense, it is not concerned with reaching a specific goal node. The algorithm is briefly described in Figure 5.9. Observe, that one needs the complete graph for the algorithm, and it starts with colouring all the nodes white. A white node is one that is yet to be picked up by the algorithm. In every cycle, it picks one node, to which it has found the shortest path, and colours it black. Dijkstra s Algcerithm() 1 Colour all nodes white cost(start) 0 parent(start) NIL for all other nodes n do cost(n) repeat Select lowest cost white node n 2m nob to 3 Colour n black 8 for all white neighbours m of n C do if (cost(n) k(n, m)) cost(m) ll then cost(m) cost(n