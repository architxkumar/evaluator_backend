d there are attributes that are to be inherited by each element of the set. We indicate the difference between these two by prefixing the latter with an asterisk (*). For example, consider the class ML-Baseball-Player, We have shown only two properties of it as a set: It is a subset of the set of adult males. And it has cardinality 624 (i.e., there are 624 major league baseball players). We have listed five properties that all major league baseball players have (height, bats, batting-average, team, and uniformcolor), and we have specified default values for the first three of them. By providing both kinds of slots, we allow a class both to define a set of objects and to describe a prototypical object of the set. Sometimes, the distinction between a set and an individual instance may not seem clear. For example, the team Brooklyn-Dodgers, which we have described as an instance of the class of major league baseball teams, 194 Artificial Intelligence could be thought of as a set of players. In fact, notice that the value of the slot players is a set. Suppose, instead, that we want to represent the Dodgers as a class instead of an instance. Then its instances would be the individual players. It cannot stay where it is in the isa hierarchy; it cannot be a subclass of ML-Baseball Team, because if it were, then its elements, namely the players, would also, by the transitivity of subclass, be elements of ML-Baseball-Team, which is not what we want to say. We have to put it somewhere else in the isa hierarchy. For example, we could make it a subclass of major league baseball players. Then its elements, the players, are also elements of ML-Baseball-Player, Adult-Male, and Person. That is acceptable. But if we do that, we Jose the ability to inherit properties of the Dodgers from general information about baseball teams. We can still inherit attributes for the elements of the team, but we cannot inherit properties of the team as a whole, i.e., of the set of players. For exampl