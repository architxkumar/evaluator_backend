s. Thus, on the average, it will examine Nps nodes given by, Nprs ((d 1) 07" - 1-1) 2 (b ! bd b-d 2)2(b-1) b42 for large d BFS The search arrives at level d after examining the entire subtree above it. If the goal is on the left, it picks only one node, which is the goal. If the goal is on the right, it picks it up in the end (like the DFS), that is, it picks b4 nodes at the level d. On an average, the number of nodes Nges examined by BFS is Nors (b7- 1-1) 1 - B42 (b41 4 b4 b-3) 2(b-1) b4(b - 1) 2b for large d Thus, we can see that the BFS does marginally worse than DFS. In fact, Ners Nprs (b 1) b so that for problems with a large branching factor, both tend to do the same work. Box 2.4: Combex: Unimaginably Large Numbers Even simple problems can pose a number of choices that we find difficult to comprehend. Consider some search problem where the branching factor is ten, and the solution is twenty moves long. Notice that even the Rubik s cube generates a larger search space. Real world problems will have larger branching factors. To find the solution, the algorithm may have to examine 102 nodes. How long will this take? Assume that you have a fast machine on which you can check a million nodes a second. Thus, you will need 10(29- 9) 1014 seconds. Assume conservatively that there are 100000 seconds in a day (to simplify our numbers). Assume a thousand days to a year, and you would need 1014-8 10 years or a million years. Surely, you are not willing to wait this long! In an interesting observation, Douglas Hofstadter (Hofstadter 1986) has talked about our inability to comprehend large numbers. Anything beyond a few thousands is huge . Very often two million and two billion look similar to us. And numbers like 102 and 10 don t give us the feel of looking at two numbers, one of which is ten billion times larger than the other. Also, interestingly, George Gamow had written a book called One, two, three, ... Infinity (Gamow 71) to highlight a similar observation about com