 following tor the PROLOG interpreter: ? X=ll ? - sentence)) barked,a,m OOfl.d Og.thel XI no Since the remainder of the sentence hound to X is the empty set, it is recognited a corrct The second sentence failed since it could not instantiate with the correct constituent parts. , and a Of course, for a parser to be of much practical use, other constituent great many more words should be defined. 1 he example illustrates the utility of using PROLOG as a basic parser. Recursive Transition Networks The simple networks described above are not powerful enough to recognize the variety of sentences a human language system could be expected to cope with. In fact. they fail to recognize all languages that can be generated by a context-free Sec. 12.4 Basic Parsing Techniques 247 grammar. Other extensions are needed to accept a wider range of sentences but still avoid the necessity for large complex networks. We can achieve such extensions by labeling some arcs as a separate network state (such as an NP) and then constructing i subnetwork which recognizes the different noun phrases required. In this way, a single subnetwork for an NP can be called from several places in a sentence Similar arcs can be labeled for other sentence constituents including VP. PP (prepositional phrases) and others. With these additions, complex Sentences having .embedded phrases can he parsed with relatively simple networks, This leads directly to the notion of using recursion in a network. A recursive transition network (RTN) is a transition network which permits are labels to refer to other networks (including the network's own name), and .they in turn may refer back to the referring network rather than just permitting word categories used previously. For example, an RTN described by William Woods 1970) is illustrated in Figure 12.9 where the main network calls two subnetworks and an NP and PP network as illustrated in 12.9(b) and (c). The top network in the figure is the top level (sentence) networ