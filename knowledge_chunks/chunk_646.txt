 produced a lot of other statements, which are ni proof (tree) and have been discarded. If one were to automate the procedure then obviously on 1e question as to which rule to apply to what data at each inference step. an think of the task of finding a proof as a one player game, in which the player has to find a way to on the board. Each rule of inference dictates what tile can be placed under what conditions. The con a particular tile may be achieved by placing some other tiles. Since the task is to place the go 1 reasoning approach akin to the Goal trees described in Chapter 6 suggests itself. It is in fact a wic and we will lopk att later in the chapter. Soundness and Completeness VY 1O 7 su O gtr re----8 O O . a B 7 SA 4 O . o O OO O 7 a a Py e) bazinty-cofe O ae aio : Oo 43 s ; o O 2 Oo vO. 8 a a JOD z 4 .5 The set of provable statements is the set of premises plus the statements that can be produced by repeated application of the picted by the shaded circles here. The two sets P and T may be different, as illustrated here. The empty boxes represent true stat 1g to P (are not provable). The circles outside the outer boundary represent provable statements that are not true (do not belong to e logic machine to be appropriate for our task of finding (at least in principle) only and all true state P and T must be identical. The machine must produce only true statements, and it must be able to tatements. It must not produce any false statements. As a corollary given any statement, it must e Statement or its negation, whichever is true, but not both. These properties have been desc s, completeness, and consistency. indness: A logic is said to be sound if it produces only true statements. Or in other words, it does not false statements. Formally a logic is sound if and only if P is a subset of T. This can be ensured by rules of inference judiciously (discussed later). npleteness: A logic is complete if it produces all true statements. Formally, a logic is complete if