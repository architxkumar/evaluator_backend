ove, look ahead at the board positions that result from each possible move. Decide which position is best (as described below), make the move that leads to that position, and assign the rating of that best move to the current position. To decide which of a set of board positions is best, do the following for each of them: 1. See if it is a win. If so, call it the best by giving it the highest possible rating. 2. Otherwise, consider all the moves the opponent could make next. See which of them is worst for us (by recursively calling this procedure), Assume the opponent will make that move. Whatever rating that move has, assign it to the node we are considering. 3. The best node is then the one with the highest rating. This algorithm will look ahead at various sequences of moves in order to find a sequence that leads to a win. It attempts to maximize the likelihood of winning, while assuming that the opponent will try to minimize that likelihood. This algorithm is called the minimax procedure, and it is discussed in detail in Chapter 12. Comments This program will require much more time than either of the others since it must search a tree representing al] possible move sequences before making each move. But it is superior to the other programs in one very big way: It could be extended to handle games more complicated than tic-tac-toe, for which the exhaustive enumeration approach of the other programs would completely fall apart. It can also be augmented by a variety of specific kinds of knowledge about games and how to play them. For example, instead of considering all possible next moves, it might consider only a subset of them that are determined, by some simple algorithm, to be reasonable. And. instead of following each series of moves until one player wins, it could search for a limited time and evaluate the merit of each resulting board position using some static function. Program 3 is an example of the use of an Al technique. For very small problems, it is les