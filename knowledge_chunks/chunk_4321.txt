nowledge bases wilt be locally consistent, we do not want to insist that, taken together, they be globally consistent. This is important, since one of the benefits of a distributed system is that agents that represent different points of view and positions can interact. So what does it mean fo label the nodes in such an inconsistent knowledge base? A second question arises when we extend the notion of a JTMS to a distributed system. In a single-agent system, a justification is created as part of the reasoning process. It stays with the resulting node and can be used to update the belief status of the node if any of the assumptions on which the reasoning depended ever change. But what if one agent does the reasoning and then communicates its result to another? [t may not make sense to communicate the justification, since it may involve knowledge-base objects that the receiver of the result knows nothing about. This wil! often happen if one agent asks another to solve a problem about which it knows very little. Both of these problems can be solved by introducing the idea of a distributed truth maintenance system. In this system, interagent justifications work as follows. Assume Al solves a problem and reports the result to A2. Then A1 also reports to A2 a justification that says Because Al says so. This justification is treated by A2 essentially like a premise justification. But Al must also remember the justification, and it must remember that it sent this justification to A2. If the justification ever becomes invalid in A1, then Al must send a message to A2 saying that Al no longer says so. At that point, the conclusion must go OUT in A2 unless there exists some other justification that is still valid. Node labeling in the distributed truth maintenance system works similarly to node labeling in a singleagent system except that we need to redefine consistency. Rather than insisting on global consistency, we instead insist on extended local consistency, by which we me