 in-room(y) & inroom(z) & canmove(x,y,z)) close(z.floor) V undor(y,z)) (can..climb(x,y) -. get.on(x,y))) 70 Formalized Symbolic Logics Chap. 4 Using the above axioms, a knowledge base can be written down directly in the required clausal form. All that is needed to make the necessary substitutions are the equivalences P Q = V 0 and De Morgan's laws To relate the clauses to a LISP program, one may prefer to think of each clause as being a list of items. For example, number 9, below, would be written as (or Ccan_climb(7x ?y) get_on(?x ly)) where ?x and ?y denote variables. Note that clause 13 is not one of the original axioms. It has been added for the proof as required in refutation resolution proofs. Clausal form of knowledge base 1. in.room(monkey) 2. in-room(bananas) 3 in-room(chair) 4 tali(char) 5. dexterous(monkey) 6. can.move(monkey, chair, bananas) 7. canclimb(monkey.chair) 8. close(bananas,floor) 9. canchmb(x.y) V geton(x,y) 10. dexterous(x) V close(x,y) V canreach(x,y) 11. get.on(x,y) V under(y,bananas) V -tall(y) V close(x,bonanas) 12. ir.roon,(x) V inroon(y) V inroom)z) V canmoe(x.y,z) V close(y.Itoor) V under(y,z) 13. caneach(monkey.bananas) Resolution proof. A proof that the monkey can reach the bananas is sumnianzed below. As can be seen, this is a refutation proof where the statement to be proved (can_reach(monkey, bananas y) has been negated and added to the knowledge base (number 13). The proof then follows when a .ontradiction is found (see number 23, below). 14. can.inovelmonkey,chair,bananas) v 14 is a resolvent of 1.2.3 and 12 close(bananas,floor) V under with substitution imonkey x, chair y. (chair,bananas) bananas/z} Sec. 4.7 The Resolution Principle 71 15. closo(bananas.flo Or) V under this is a resolvent of 6 and 14 (chair,bananas) 16. under(chair,banana S) this is.a resolvent of Band 15 17. 'getort(x.chair) V 'tall(chair) V this is a resolvent of 11 and 16 with close(x,bananas) substitution (chair/y} 18. ge LOn(x,chair) V close(x,bananas) res