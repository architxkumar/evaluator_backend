hough the individual operators that make it up produce many undesirable local changes. 354 Artificial Intelligence For example, consider the 8-puzzle. Once a program has correctly placed the first four tiles, it is difficult to place the fifth tile without disturbing the first four. Because disturbing previously solved subgoals is detected as a bad thing by heuristic scoring functions, it is strongly resisted. For many problems, including the 8-puzzle and Rubik s cube, weak methods based on heuristic scoring are therefore insufficient. Hence, we either need domainspecific knowledge, or else a new weak method. Fortunately, we can learn the domain-specific knowledge we need in the form of macro-operators. Thus, macro-operators can be viewed as a weak method for learning. In the 8-puzzle, for example, we might have a macro a complex, prestored sequence of operators for placing the fifth tile without disturbing any of the first four tiles extemally (although in fact they are disturbed within the macro itself). Korf [1985b] gives an algorithm for learning a complete set of macro-operators. This approach contrasts with STRIPS, which learned its MACROPs gradually, from experience. Korf s algorithm runs in time proportional to the time it takes to solve a single problem without macro-operators. 17.4.3 Learning by Chunking Chunking is a process similar in flavor to macro-operators. The idea of chunking comes from the psychological literature on memory and problem solving. Its computational basis is in production systems, of the type studied in Chapter 6. Recall that in that chapter we described the SOAR system and discussed its use of control knowledge. SOAR also exploits chunking [Laird et al., 1986] so that its performance can increase with experience. In fact, the designers of SOAR hypothesize that chunking is a universal learning method, ie., it can account for all types of learning in intelligent systems. SOAR solves problems by firing productions, which are stored in l