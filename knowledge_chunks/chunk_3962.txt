here is none for or. Instead, disjunction must be represented as a list of alternative statements, any one of which may provide the basis for a conclusion. 3. In logic, implications of the form p implies g are written as p > q. In PROLOG, the same implication is written backward, as q : - p. This form is natural in PROLOG because the interpreter always works backwards from a goal, and this form causes every rule to begin with the component that must therefore be matched first. This first component is called the head of the rule. The first two of these differences arise naturally from the fact that PROLOG programs are actually sets of Horn clauses that have been transformed as follows: 1. If the Horn clause contains no negative literals (i.e., it contains a single literal which is positive), then leave it as itis. 2. Otherwise, rewrite the Horn clause as an implication, combining all of the negative literals into the antecedent of the implication and leaving the single positive literal (if there is one) as the consequent. This procedure causes a clause, which originally consisted of a disjunction of literals (all but one of which were negative), to be transformed into a single implication whose antecedent is a conjunction of (what are now positive) literals. Further, recall that in a clause, all variables are implicitly universally quantified. But, when we apply this transformation (which essentially inverts several steps of the procedure we gave in Section 5.4.1 for converting to clause form), any variables that occurred in negative literals and so now occur in the antecedent become existentially quantified, while the variables in the consequent (the head) are still universally quantified. For example, the PROLOG clause P(x) :- Q(x, y) Representing Knowledge Using Rules 133 cs ep SASS SNS NH is equivalent to the logical expression Vx: dy: Q(x, vy) > P(x) A key difference between logic and the PROLOG representation is that the PROLOG interpreter has a fixed control s