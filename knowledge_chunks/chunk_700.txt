 ?: (cons C (co derivation on Horn clauses can be seen as a backward chaining process on the set of rules. A g that we want to show to be true. If the goal exists as a fact then it is true by definition. Otherwise Q whose consequent matches the goal then we regress over the ryle-tenpiaduce a sub-goal Q t ial goal. If the antecedent has more than one sentence then we add all those to the set of goals. a fact then it is removed from the set. The procedure terminates when the goal set is empty. The p scent of backward state space planning of Chapter 7. lustrate the process first with the propositional version of the Alice problem and then describe iven data is repeated here, 1.(P A Q) not Horn clause 2(P DR) 3.((R A 8S) DT) 4.( Q V S) 5.(3U A 3V) not definite clause 2se we select the ones corresponding to the definite clauses and express them as facts and rules e of Horn clauses. DR) 2 AS) DT) Ds) equired goal is T. We initialize the goal set to T, and use notation to distinguish goals from fe derivation mirrors the SLD resolution of Figure 12.18. 1 T given goal 2. R, S chaining T with 4 3. P, S chaining R with 3 4 S removing P due to 1 5. Q chaining S with 5 6. removing Q due to 2 yrocedure adopted is to start with the given goal (set) and reduce it to empty goal set. The goal and added as a clause, resulting in a contradiction. Instead a separate notation for goals was introdu dure continues till the goal set becomes empty. ackward chaining step using modus ponens for FOL may be formulated as follows. a goal set ... g... containing g and a rule B O we can define a backward chaining step as follov ind 6 have a unifier 6 then replace the sub-goal with the sub-goal B in the goal set to get ...B... ackward chaining algorithm can then be written as in Figure 12.21. vardChaining(F : facts, R: rules, g : goal) yoalset (9g) oroc () rheta () while gcalSet () do subGoal Head(goalset) goalset Rest (gcalset) if there exists a substitution beta s.t. Apply(beta, subGoa. then proof