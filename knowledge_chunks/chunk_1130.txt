mple, when the node V is added the candidate set of labels generated, after the loop in lines 2 to 7 is executed is, B, C , B, C, G , B, C, E, F , B, E, F, G . Then in lines 8 to 11, the environment B, E, F, G is removed because it is a superset of the nogood F, G . After that, the algorithm chooses the minimal environments in lines 12 to 15. In this process, both B, C, G and B, C, E, F are discarded since they are supersets of B, C . The algorithm finally returns the label containing one environment B, C . The reader should verify that nodes B and C being IN is sufficient for node V being IN. Since this is the only environment for V, it is also a necessary condition. If a label of a node changes then it may have repercussions on the status of other nodes. When any label L for any node N changes, then the ATMS algorithm does the following. 1. If the node Nis a contradiction then, (a) Mark all environments in L as nogoods. (b) If any of these environments, or their superset occurs in any node label, then remove it from that label. 2. If Nis not a contradiction, then recursively call LabelsATMS for all nodes in whose justification the node N occurs as an antecedent. In practice, using the above algorithm would result in too much redundant work being done. This is because the ATMS would receive information, one inference or one justification at a time. It is only the effects of this justification that needs to be propagated to the consequent, instead of re-computing its label again from scratch. The same would apply to propagating changes down the network. Designing the algorithms for doing only incremental changes is left as an exercise. The interested reader is also referred to (de Kleer, 1986; 1986a; 1986b) and (Forbus and de Kleer, 1992) for a comprehensive study of the design and deployment of variations of truth maintenance algorithms. 17.4.2 The ATMS in GDE and GDE In the diagnosis problem covered in Section 17.3, the assumptions are the statements about the cor