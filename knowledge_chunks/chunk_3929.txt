 those in which it is not. If the formula were in a simpler form, this proc;ess would be much easier. The formula would be easier to work with if It were flatter, i.e., there was less embedding of components. The quantifiers were separated from the rest of the formula so that they did not need to be considered. Conjunctive normal form [Davis and Putnam, 1960] has both of these properties. For example, the formula given above for the feelings of Romans who know Marcus would be represented in conjunctive normal form as =Roman(x) /\ aknow(x, Marcus) \/ hate(x, Caesar) \/ 7hate(y, z) \/ thinkcrazy(x, 2) 110 Artificial Intelligence Since there exists an algorithm for converting any wff into conjunctive normal form. we lose no generality if we employ a proof procedure (such as resolution) that operates only on wff s in this form. In fact, for resolution to work, we need to go one step further. We need to reduce a set of wff s to a set of clauses, where a clause is defined to be a wff in conjunctive normal form but with no instances of the connector A. We can do this by first converting each wff into conjunctive normal form and then breaking apart each such expression into clauses, one for each conjunct. All the conjuncts will be considered to be conjoined together as the proof procedure operates. To convert a wff into clause form, perform the following sequence of steps. Algorithm: Convert to Clause Form 1. Eliminate >, using the fact that a 6 is equivalent to 7a \y b. Performing this transformation on the wff given above yields \/x 1 a[Roman(x) A knows x, Marcus)] \/ lhate(x, Caesar) \/ (Vy : 7(3z : hate(y, 2)) VV thinkcrazy(y))1 2. Reduce the scope of each to a single term, using the fact that -(-p) = p, de Morgan s laws [which say that -(a A 6) =7a \/ ab and -(a \y b) = sa /\ 7b], and the standard correspondences between quantifiers [AV : P(x) = dx: a P(x) and 73x: P(x) = Vx : a P()]. Performing this transformation on the wff from step 1 yields Vx : [>Roman(x) \/ ~know