ble G. SelectValue-FC assigns w to G, and prunes the value w from the domains of E and F, the variables that G participates in constraints with. Next, the variable D is taken up, and the value g selected for it. This has no effect on other variables. After that value b is selected for B, and is therefore removed from the connected domains A and C. The matching diagram at this stage is shown in Figure 9.38. FIGURE 9.37 The matching diagram associated with the CSP of Fig. 9.33. The chosen ordering and the name of each node is shown next to each node. The algorithm begins by picking value w for variable G. FIGURE 9.38 Forward Checking. After G w, D g, B b, Forward Checking does not notice that AC and CF have become arc inconsistent. It carries on to F. It will try to pick value F r and remove r from the connected domains G and C. It will now see that the domain of C has become empty. Since there is no other value left in the domain of F, it will backtrack to B and try anew value g. At this point, the algorithm attempts to pick a value for the variable F. There is only one value, r, in its domain at this stage. The forwardchecking algorithm will remove values not consistent with (G w, D g, B b, F nr) from the domains of the future variables E, A, and C. This results in the value r being removed from the domain of C. The domain of C becomes empty and the test in line 12 of the algorithm (Figure 9.36) succeeds and the value F ris abandoned. The domain of F, D44, has become empty by now and the algorithm SelectValue-FC returns null, prompting Backtracking-with-LookAhead to backtrack to the previous variable. The reader is encouraged to continue tracing the progress of Forward Checking and verify that the search tree generated is smaller than the one generated by Backtracking (Figure 9.34). Forward Checking looks ahead to check that there exists a value in each future domain that is consistent with the value being considered. t does not check whether future domains are cons