starting at start 33 else return FAILURE Figure 6.9 Algorithm AO . The way to ensure that the optimal solution is found is by making sure the heuristic function underestimates the cost of solving a node. In this problem, this can be done by dividing the heuristic value by ten. Equivalently, we can assume each arc to cost 10 units, which makes the heuristic values given in problems as underestimating the actual costs. The progress of the algorithm is shown in Figures 6.13 and 6.14. The underestimating function does not grab the first solution in sight, and continues searching till no better options are left. The progress of the algorithm is continued below. The algorithm terminates with the optimal solution costing 70 shown in the right in Figure 6.15. In fact, at that point, it has also discovered another optimal solution shown in the figure on the left. Figure 6.10 A synthetic AND OR problem. Assume every arc costs one unit to traverse. Nodes are labelled with heuristic values. Solved nodes represented by double-lined boxes have cost Zero. Node to be expanded Figure 6.11 The progress of the AO algorithm. The best options at each choice point are marked by arrows. Nodes in double-line squares are SOLVED. Start fi Ce LI Co Solution found with cosr 8 Figure 6.12 The algorithm terminates as the root (start) is labelled SOLVED (double square). The solution is shown in bold lines on the right. 29 Cost ofeach are 10 21 Start Note: cost of code on expansion goes up 3 4 due to underestimation. J Figure 6.13 Searching with an underestimating function. Observe that an underestimating heuristic function makes the search try out more options at each stage. Searching with an overestimating function had plunged down one path. 19 aA 3 10 X 20 30 7 E 10 20 10 10 10 Root labelled solved. Algorithm terminates, Figure 6.14 AO terminates after exploring a larger search space, but finds an optimal solution. Figure 6.15 AO terminates with the optimal solution on the right with cost 70. I