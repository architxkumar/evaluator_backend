n the cost of node B is changed to 18. 9.12. Give the time and space complexities for the search methods of Problems 9 2 and 9.3. 9.13. Discuss some of the potential problems when using bill climbing search. Give examples of the problems cited. 9.14. Discuss and compare hill climbing and best-first search techniques. 9.15. Give an example of an admissible heuristic for the eight puzzle 9.16. Give two examples of problems in which solutions requiring the minimum search are more appropriate than optimal solutions. Give reasons for your choices. 9.17. Write a LISP program to perform a breadth-first search on a solution space irce constructed using property lists. For example, children nodes e. f. and g of node 1) of the tree would be constructed with the LISP function (putprop '0 '(E F G) children) 9.18. Write a LISP program to perform a depth-first search on the tree constructed in Problem 9.17. Matching, Techniques Matching is a basic function that is required in almost all Al programs. It is an essential part of more complex operations such as search and control. In many programs it is known that matching consumes a large fraction of the processing time. For example. it has been estimated that matching operations in many production systems account for as much as 90% of the total computation time. Consequently. the Al practitioner will find it is essential to learn efficient matching techniques. In this chapter we examine such techniques and their application to different Al programs. 10.1 INTRODUCTION Matching is the process of comparing two or more structures to discover their like-- nesses or differences The structures may represent a wide range of objects including physical entitles, words or phrases in some language. complete classes of things, general concpts. relations between complex entities, and the like. The representations will be given in one or more of the formalisms like FOPL, networks, or some other scheme, and matching will invoke comparing the compo