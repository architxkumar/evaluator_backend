tice that some of these questions involve not just the statement of the problem itself but also characteristics of the solution that is desired and the circumstances under which the solution must take place. Problems, Problem Spaces, and Search 2.3.1 Is the Problem Decomposabie? Suppose we want to solve the problem of computing the expression fe + 3x + sin?* - cos2x) dx We can solve this problem by breaking it down into three smaller problems, each of which we can then solve by using a small collection of specific rules. Figure 2.9 shows the problem tree that will be generated by the process of problem decomposition as it can be exploited by a simple recursive integration program that works as follows: At each step, it checks to see whether the problem it is working on is immediately solvable. If so, then the answer is returned directly. If the problem is not easily solvable, the integrator checks to sce whether it can decompose the problem into smailer problems. If it can, it creates those problems and calls itself recursively on them. Using this technique of problem decomposition, we can often solve very large problems easily. je + 3x + sin? x cos? x dx fe dx Jax ax wh 3x? 2 37 Jsintx cos?x dx foos?x ax 3] x dx fo cos? x) cos2x dx Joos x dx ie (1 + cos 2x) dx all dx Joos 1 3% 2x dx sin 2x 4 Fig. 2.9 A Decomposable Problem Now consider the problem illustrated in Fig. 2.10. This problem is grant. drawn from the domain often referred to in Al literature as the blocks C world, Assume that the following operators are available: [A] [BI 1. CLEAR (x) [block x has nothing on it] ON (, Table) [pick ON(C,A) up x and put it on the table] 2. CLEAR (x) and CLEAR ( ) > ON (x, y) {put x on y] Applying the technique of problem decomposition to this simple blocks world example would lead to a solution tree such as that shown in Fig. 2.11. In the figure, goals are und are not underlined. The idea of this solution is to reduce the problem Goal: A [BI ie} ON(B,C) and ON(A,B) Fig. 2.1