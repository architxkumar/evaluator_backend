dmissibility of algorithm A later in the chapter. Meanwhile, we illustrate with an example the intuition behind the condition that the heuristic function should underestimate the actual cost. Let an instance of A have two nodes, P and Q on the OPEN list, such that both are one move away from the goal. Let the cost of reaching both P and Q be the same, say 100. Let the actual cost of the move from P to G be 30, and let the cost of the move from Q to G be 40, as shown in Figure 5.13. Let there be two versions of A , named A, and Ag , employing two heuristic functions, hy(n) and h2(n). Let us assume that both have found the paths up to P and Q with cost 100. Let both heuristic functions erroneously evaluate Q to be nearer to the goal G than P is. But let A, overestimate the distance to G; thus, in fact becoming inadmissible, while A underestimates the distance, as illustrated below. hy(P) 50 hy(Q) 45 and ho(P) 20 ho(Q) 15 Let us trace the progress of A, first. Assuming that only P and Q are in the OPEN list, the f values are f,(P) g4(P) hy(P) 100 50 150 f4(Q) g1(Q) hy(Q) 100 45 145 GOAL G K(P, G) 30 OPEN List Start FIGURE 5.13 An instance of A nearing termination. Since it has the smaller f-value, A, picks Q and expands it generating the node G with g4(G) 100 40 140. It now has two nodes on OPEN, P and G with the values, f,(P) g4(P) hy(P) 100 50 150 fs(G) 94(G) hy(G) 140 0 140 It now picks the goal G and terminates, finding the longer path with cost 140. Az2 too starts off by picking the node Q in the following position. f.(P) go(P) ho(P) 100 20 120 fo(Q) go(Q) ho(Q) 100 15 115 It also finds a path to G with a cost of 140. For the next move, however, it picks P instead of G in the following position, f.(P) go(P) ho(P) 100 20 120 fo(G) go(G) ho(G) 140 0 140 Thus, Ap picks P instead of G and finds the shorter path to G. This happened because it underestimated the cost of reaching the goal through P. The algorithm A is described below. Like the Dijkstra s Algorithm, it us