goal node as depicted in Figure 5.21. Like DFS, the space required of DA grows linearly with depth. We do not need to maintain a CLOSED list if we keep track of the solution path explicitly. There is, however, a drawback that in problems like city map route, finding the algorithm may expand internal nodes many times. This happens because there are many routes to a node, and each time the node is expanded all over again. For large problem sizes, this can become a problem. Figure 5.21 below illustrates the search space explored by DA with some value of cutoff. One can see that there are combinatorially many paths to any node within the cutoff range. In the absence of a CLOSED list, DA will visit all nodes through all possible paths. Nevertheless, for many problems, DA can be a good option, specially if the number of combinations are small. ) In the next cycle cutoff is reset to lowest unexplored -value node Goal Nodes within cutoff F-value are explored by DFS FIGURE 5.21 DA iteratively extends search frontier for Depth First Search. A factor that may adversely affect running time is when the increment in the cutoff value is such that only a few more nodes are included in each cycle. In the worst case, only one node may be added in each iteration. While this is necessary to guarantee admissibility, one could trade off execution time with some controlled loss in the solution cost. For example, one could decide in advance that the cutoff bounds will be increased by a value 0 that is predetermined. The loss then will be bounded by 6, and an appropriate choice may be made for a given application. Figure 5.22 illustrates this situation. In the illustration, two goal nodes come within the ambit of cutoff when it is increased by 6. However, since the underlying search is DFS, it may terminate with the more expensive solution. DFS may terminate before fe) looking at a cheaper solution e) Ne) 6 cc) san o 9 6e a) (2) ,.e 7 o Oo eo 6 oO oO fe) yl cutoff is increased by ) fo) (2) 