 the list (a b (C d) e (f)) are a, b, (c d), e, and (f). The elements c and d are top elements of the sublist (c d). Atoms, lists, and strings are the only valid objects in LISP They are called symbolic-expressions or s-expressi Ons. Any s-expression is potentially a valid program And those, believe it or not, are essentially the basic syntax rules for LISP Of course, to be meaningful, a program must obey certain rules of semantics, that is, a program must have meaning. LISP programs run either on an interpreter oras compiled code. The interpreter examines source programs in a repeated loop, called the readeval Uate Priflt loop. This loop reads the program code, evaluates it, and prints the values returned by the program. The interpreter signals its readiness to accept code for execution by printing a prompt such as the -> symbol. For example, to find the sum of the three numbers 5, 6, and 9 we type after the prompt the following function call: 569) 20 Some dialects require that symfr Ii C atoms begin with a letter and do not include pareils or single quotes Sec. 3.1 Introduction to LISP: Syntax and Numeric Functions 21 Note that LISP uses prefix notatiou. and the symbol is the function name for the sum of the arguments that follow. The function name and its argument .' are enclosed in parentheses to signify tha I it is to be evaluated as a function. The read-evaluate-print loop reads this expression, evaluates it, and prints the saluc returned (20). The interpreter then prints the prompt to signal its readiness to acce['t the next input. More complicated computations can be written as a single embedded expression. For example. to compute the centigrade equivalent of (h2 Fahrenheit temperature 50, for the mathematical expression (5 * 9 / 5) + 32 we would write the corresponding LISP function -> (* (.'l. 95)50)32) 122 Each function call is performed in the order in which it occurs 'Arilhin the parentheses. Hut, in order to compute the sum, the argument (* (I 9 5) 50)