 a nontheorem. Another thing it could do is simply try to prove both answers simultaneously and stop when one effort is successful. Even here, however, if there is not enough information available to answer the question with certainty, the program may never halt. Yet a fourth strategy is to try both to prove one answer and to disprove it, and to use information gained in one of the processes to guide the other. 5.Z REPRESENTING INSTANCE AND ISA RELATIONSHIPS In Chapter 4, we discussed the specific attributes instance and isa and described the important role they play in a particularly useful form of reasoning, property inheritance. But if we look back at the way we just represented our knowledge about Marcus and Caesar, we do not appear to have used these attributes at all. We certainly have not used predicates with those names. Why not? The answer is that although we have not used the predicates instance and isa explicitly, we have captured the relationships they are used to express, namely class membership and class inclusion. Figure 5.3 shows the first five sentences of the ast section represented in logic in three different ways. The first part of the figure contains the representations we have already discussed. In these representations, class membership is represented with unary predicates (such as Roman), each of which corresponds to a class. Asserting that P(x) is true is equivalent to asserting that x is an instance (or element) of P. The second part of the figure contains representations that use the instance predicate explicitly. The predicate instance is a binary one, whose first argument is an object and whose second argument is a class to which the object belongs. But these representations do not use an explicit isa predicate. Instead, subclass relationships, such as that between Pompeians and Romans, are described as shown in sentence 3. The implication mule there states that if an object is an instance of the subclass Pompeian then it is an instance 