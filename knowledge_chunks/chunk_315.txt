 flaw in a given plan, and looks for a resolver that can remove the flaw. The Refine procedure applies the chosen resolver, and the algorithm PSP is called recursively. In Line 1, the set of flaws is identified as the union of the set of open conditions and the set of threats. The procedures that return the two constituent sets need to maintain the two sets and update them incrementally in each cycle during the call to Refine in Line 9. The set of open conditions is usually maintained as an agenda of goals, to which new ones are added every time open conditions are created. Likewise, every time an ordering condition is added, a check is made for the possibility of a threat. Observe that whenever actions are added, one or more causal links as well as ordering links are added as well. In Line 4, one of the flaws is chosen for resolving. In theory, any flaw could be chosen because all the flaws have to be resolved for the algorithm to terminate. In practice, while implementing a deterministic algorithm choosing a flaw that has a smaller number of resolvers could lead to less backtracking. In Line 5, the set of resolvers for the chosen flaw that can be consistently applied are identified. The algorithm has to check that no ordering constraints and binding constraints are violated by the addition on new ones. This ensures that in Line 9, the resolver, chosen nondeterministically tin Line 8, can be applied without any problem, and procedure Refine has only to update the relevant structures being maintained. The PSP algorithm treats both kinds of flaws equally. A variation of the above algorithm called Partial Order Planner (POP) works only with open goals in an agenda. Every time it finds a way of satisfying the open goal, it looks for any threats created and resolves them before moving onto to the next goal on the agenda. Thus, plan space planning or partial order planning can be seen to go through a cycle of R steps. Remove a flaw (or an open goal) from the agenda. Reso