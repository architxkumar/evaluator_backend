r. This is because at every stage after having chosen a set of (i 1) consistent values for the first (i- 1) variables, the procedure will not reach a dead end because -consistency ensures that a consistent value for the i variable exists in the domain. But as j increases, achieving iconsistency becomes more and more expensive. In some situations, it may be profitable to work with a limited amount of consistency enforcement, and spend some time doing search. One such situation is when the order of selecting variables for an assignment is pre-decided. Given that the search algorithm is going to inspect variables in a fixed order one need not enforce consistency between variables in both directions. In the next section we explore how much consistency needs to be enforced, based on the topology of the constraint graph. 9.5 Directional Consistency A constraint network is said to be 2-consistent, if for every assignment of a variable there exists an assignment for every other variable such that the new variable is consistent with the known constraints. This ensures that any variable that we pick for assignment can be followed up picking any other variable. Higher order consistencies extend this notion to sets of variables. A network is said to be -consistent, if any set of i 1 variables is assigned a compound label then any other variable can be assigned a consistent value. However, if the order of assigning variables is Known in advance, a weaker notion of consistency suffices. This weaker notion of consistency is directional consistency, which requires only variables chosen earlier in the assignment order to be consistent with later ones. In the discussion that follows, we assume that an ordering of variables (x1, Xo, ..., Xn) has been specified, and x, is the first variable to be assigned a value from its domain. Consider the map colouring CSP shown in Figure 9.22 on the left, along with two orderings (ABCDE) and (EDCBA) on the right. The domain of all the variables is