s English, then substantial work must be done to reduce the knowledge into primitive form. ? The representation shown in this example is called conceptual dependency and is discussed in detail in Section 10.1. Knowledge Representation Issues 91 AAPA NASAL EEA Yet, for many purposes, this detailed primitive representation may be unnecessary. Both in understanding language and in interpreting the world that we see, many things appear that later turn out to be irrelevant. For the sake of efficiency, it may be desirable to store these things at a very high level and then to analyze in detail only those inputs that appear to be important. A third problem with the use of low-level primitives is that in many domains, it is not at all clear what the primitives should be. And even in domains in which there may be an obvious set of primitives, there may not be enough information present in each use of the high-level constructs to enable them to be converted into their primitive components. When this is true, there is no way to avoid representing facts at a variety of granularities. The classical example of this sort of situation is provided by kinship terminology [Lindsay, 1963]. There exists at least one obvious set of primitives: mother, father, son, daughter, and possibly brother and sister. But now suppose we are told that Mary is Sue s cousin. An attempt to describe the cousin relationship in terms of the primitives could produce any of the following interpretations: Mary = daughter(brother(mother(Sue)}) Mary = daughter(sister(mother(Sue))) Mary = daughter(brother(father(Sue))) Mary = daughter(sister(father(Sue))) If we do not already know that Mary is female, then of course there are four more possibilities as well. Since in general we may have no way of choosing among these representations, we have no choice but to represent the fact using the nonprimitive relation cousin. The other way to solve this problem is to change our primitives. We could use the set: parent, ch