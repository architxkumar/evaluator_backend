 is selected for expansion. How operators to be applied to that node are selected. Whether an optimal solution can be guaranteed. Whether a given state may end up being considered more than once. How many state descriptions must be maintained throughout the Search process. Under what circumstances should a particular search path be abandoned. In the chapters that follow, we talk about ways that knowledge about task domains can be encoded in problem-solving programs and we discuss techniques for combining problem-solving techniques with knowledge to solve several important classes of problems. EXERCISES pgs 1. When would best-first search be worse than simple breadth-first search? 2. Suppose we have a problem that we intend to solve using a heuristic best-first search procedure. We need to decide whether to implement it as a tree search or as a graph search. Suppose that we know that, on the average, each distinct node will be generated N times during the search process. We also know that if we use a graph, it will take, on the average, the same amount of time to check a node to see if it has already been generated as it takes to process M nodes if no checking is done. How can we decide whether to use a tree or a graph? In addition to the parameters N and M, what other assumptions must be made? Start Goal 3. Consider trying to solve the 8-puzzle using hill climbing. Can you find a [4]2]3 1/213 heuristic function that makes this work? Make sure it works on the following {8|5|6 4/5|6 example: A4\7 7|8 4. Describe the behavior of a revised version of the steepest ascent hill climbing algorithm in which step 2(c) is replaced by set current state to best successor. 5. Suppose that the first step of the operation of the best-first search algorithm results in the following situation (@ + b means that the value of h at a node is a and the value of g is b): Blas) fear) The second and third steps then result in the following sequence of situations: Bl (4+1) C)(3+1) B] (4+1) C}