ata. This prevents the same rule from firing again and again with the same data, when the RHS does not change the data. For example, the rule named top-card above will fire only once with the given data. Recency Choose the rule that matches the most recently produced data. This helps keep a reasoning thread going. The most recently created data (WME) gets acted upon quickly. Specificity This says that given an option between two rules, the rule that has a more specific LHS is preferred. Specificity can be measured by counting the number of attributes in the patterns in the LHS. The last strategy is known as the LEX strategy. A variation of LEX known as MEA (means ends analysis see Chapter 7). In MEA, the recency of the first pattern in all the rules is used to select the rule to fire. If there is a tie between rules then the system falls back upon the LEX strategy. One can use the specificity rule to implement default rules which are fired when a more specific rule does not match. If a more specific rule were to match then that would be preferred. For example, in a contract bridge bidding program, one may have a rule asking a player to pass if there is no reason (matching rule) to make any other bid. One could write two rules as follows: p pass-rule turn-to-bid player x make (bid player x bicName pass) ) p 1N-cpening turn-to-bic player x hand player x points 15 16 17 shape balanced - (bid) ay make (bid player x reund 1 type opening bicName rotrump cdencminaticr 1)) Given these two rules, if the program encounters a balanced hand with 15 to 17 points and no one else has bid then it would make an opening bid of 7 no trump on its turn. Otherwise, the rule named pass-rule will advocate discretion and pass. In practice, a bidding system would have hundreds of rules. Apart from the built-in conflict resolution strategies in the language, OPS5 also allows the user to define priority of rules. One may define different levels of priority classes as follows. (priority priorit