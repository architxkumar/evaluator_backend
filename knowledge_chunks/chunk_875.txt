ficSubsumers (taxonomy,d) BP (root (taxonomy) while not empty (p) do for every node n in p Bone Ss Remove n from p iff Subsumes(Desc(n), d) 7 then if there exists a child of n such that Subsumes (Desc(c), a) 8 then Add all children of n to p 9 else Add n to s 10 return s FIGURE 14.27 The procedure to find the most specific subsumers of a given description dina taxonomy. We assume a function Desc(node) that returns the description of a node, and a function Subsumes that implements structure matching on two descriptions. The algorithm only traverses that part of the taxonomy downward that contains nodes that subsume the input concept d. Figure 14.28 illustrates the subgraph explored by the algorithm. The nodes seen by the algorithm are coloured black and white. The black nodes subsume the input concept represented by the shaded square, while the white ones do not, and are discarded by the algorithm. The grey nodes are not inspected by the algorithm. The most specific subsumers are the lowest black nodes, and form the set S, shown in the shaded rectangle, that is returned by the algorithm. The search for the most general subsumees begins with the set S that has been constructed by the algorithm MostSpecificSubsumers. The algorithm MostGeneralSubsumees traverses the descendants of nodes in S looking for nodes subsumed by the concept d. The algorithm is given in Figure 14.29. We assume that the algorithm is invoked in a call-by-value mode, so that the original set S is not affected. Figure 14.30 depicts the nodes inspected by the algorithm, coloured black and white. Of these, the black ones are the ones subsumed by d and are added to G, and the white nodes are not and are discarded. The traversal ends in each branch when the algorithm finds a black (subsumed) node, or if there are no children. After the traversal ends, it is possible that there are pairs of nodes X and Y in G such that YCX. For every such pair, node Y is removed from G before returning G. ---Q 2 . E ee e