from its top-level goal and by keeping track of the entire tree that it traverses in the process, TEIRESIASMYCIN can do a fairly good job of justifying its reasoning to a human user. For more details of this process, as well as a discussion of some of its limitations, see Davis [1982]. The production system model is very general, and without some restrictions, it is hard to support all the kinds of explanations that a homan might want. If we focus on a particular type of problem solving, we can ask more probing questions. For example, SALT [Marcus and Mc Dermott, 1989) is a knowledge acquisition program used to build expert systems that design artifacts through a propose-and-revise strategy. SALT is Expert Systems 427 capable of answering questions like WHY-NOT ( why didn t you assign value x to this parameter? ) and WHAT-IF ( what would happen if you did? ). A human might ask these questions in order to locate incorrect or missing knowledge in the system as a precursor to correcting it, We now turn to ways in which a program such as SALT can support the process of building and refining knowledge. 20.4 KNOWLEDGE ACQUISITION How are expert systems built? Typically, a knowledge engineer interviews a domain expert to elucidate expert knowledge, which is then translated into rules. After the initial system is built, it must be iteratively refined until it approximates expert-level performance. This process is expensive and time-consuming, so it is worthwhile to look for more automatic ways of constructing expert knowledge bases. While no totally automatic knowledge acquisition systems yet exist, there are many programs that interact with domain experts to extract expert knowledge efficiently. These programs provide support for the following activities: e Entering knowledge Maintaining knowledge base consistency Ensuring knowledge base completeness The most useful knowledge acquisition programs are those that are restricted to a particular problem-solving paradigm, e.g.,