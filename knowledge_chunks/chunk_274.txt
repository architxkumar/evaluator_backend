hey do. The language OPS5, and its derivates OPS83 and SOAR (Laird et al., 1987), employs the forward-chaining process to implement a programming language. The syntax of the rules are fixed by the language, but the semantics can be very diverse, varying from expert knowledge expressed in production form to the more mundane data processing activities. So much so, that the forward-chaining process can in fact be used to do backward reasoning as well. After the development of systems like Dendral, XCON and MYCIN (Shortliffe, 1976), there was a flurry of expert system development activity. The reader is directed to (Buchanan and Shortliffe, 1984; Jackson, 1986) for a detailed account of that phase in artificial intelligence. The lure of rule based systems is that the task of building problem solvers can be divided between different people. The computing community can develop the inference engine, and the domain personnel can write the business logic in the form of rules. This is slightly different from the situation depicted in Figure 2.2, where the user had to implement the domain functions. Here, the user is encoding the problem solving strategy used for solving problems in the domain. The question of forward reasoning versus backward reasoning still remains. At an abstract level, one can reason that the choice could be resolved based on the nature of the search graph. If there is a lot of data narrowing down to a few goals, it might be appropriate to use forward reasoning. If, on the other hand, the number of possible goals is very high, it might be more appropriate to start reasoning with the goals that one has to solve. It has been observed by many including Robert Kowalski who formalized the notion of knowledge based systems (Kowalski, 1979), that human beings very often do backward reasoning. Some clues on this matter come from the domain of visual perception. Visual perception is the task of making sense of the excitatory signals that a living creature receives 