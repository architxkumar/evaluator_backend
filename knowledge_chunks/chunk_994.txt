a recipe for beef and green beans. It first adapts this recipe by reinstantiation of the recipe with broccoli instead of beans. During this process, program critics also suggest that the broccoli be chopped, and adjust the cooking time as well. Now CHEF runs a simulation and concludes that the broccoli would become soggy in the given recipe. The SIDE-EFFECT:DISABLED-CONDITION: CONCURRENT TOP says that the process of frying beef is generating a thin liquid due to which the broccoli is becoming soggy, and suggests a SPLIT-AND-REFORM strategy in which the two are fried separately, thus leaving the broccoli crisp as desired. A key contribution of CHEF is that it illustrates how a combination of problem solving approaches, using different kinds of knowledge may be necessary for building intelligent systems. One of the earliest commercial successes of CBR was the system called CLAVIER that helped operators at Lockheed configure the layout of ceramic parts to be loaded into an autoclave (Hinkle and Toomey, 1995) (see also (Watson, 1997)). Starting with twenty layouts, CLAVIER grew into a system with hundreds of useful cases. The need for adaptation arises when a retrieved layout contains a part that is not on the current agenda for curing. In such a situation, the system needs to substitute it with a similar part. If everything turns out well, the new case is added to the repository. In practice, operators at Lockheed preferred to do the adaptation manually, using the system to check whether the new layout had failed in the past. Manual adaptation was also the chosen route in the QPAC PCR system for recording problems in an aluminium foundry into a case base for troubleshooting (Price et al., 1997). This illustrates the point that even when there is a human in loop solving problems, a CBR system can still learn those solutions and reuse them in the future. This can be a basis for knowledge management in an organizational setting, where the decisions of experienced personne