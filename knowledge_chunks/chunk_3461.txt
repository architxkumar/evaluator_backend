 less than 378 (375) gives the block address (800) where the item will be found Once the 8(0 block has been retrieved, it can be searched linearh to locate the record with key value 378. This key could he any alphanumeric string that uniquely identifies a block, since such strings usually have a collation order defined by their code set. If the index file is large, a binary search can he used to speed up the index file search. A binary search will significantly reduce the search time over linear search when the number of items is not too small. When a file contains n records, the average time for a linear search is proportional to n/2 compared to a binary search time on the order of ln,(n). Further reductions in search time can be realized using secondary or higher order (hierarchically) arranged index tiles. In this case the secondary index file would contain key and block-address pairs for the primary index tile. Similar indexing would apply for higher order hierarchies where a separate hi used for each level. Both binary search and hierarchical index file organization may be needed when the KB is a very large tile. index KB file f Ie b Iok ddree of eord, k key (kb) b k Other record fie Id key 009. 100 100 009............... y.elue p 138,200 100 110.................... 378, 100 014.... 100 021.. 100 032.... 375, 800 200 138... 41.0,900 . 200 165. _800 375 800 377 800 378 800 382 800 391 800 405 900 410 900 412 Figure 11.3 Indexed file organization. Sec. 11.2 Indexing and Retrieval Techniques 217 When the total number of records in a KB tile is n with r records stored per block giving a total of b blocks tn = r * h I. the average search time for a nonindexed, sequential search is b / 2 block access tinces plus it 2 record tests. This compares with an index search time of h / 2 index tests, one block access, and r 2 record tests: A binary index search on the other hand would require only ln(/n index tests, one block access, and r 2 record tests. Therefore. we see th