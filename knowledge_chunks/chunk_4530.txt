satisfy all the input-output mappings? The first step that requires some ingenuity is to make the problem GA compatible. We do this by introducing three weights w,, w, and w, and find the weighted sum of the inputs as: Y=w).at wb + 3c We designate the estimated value of Z as Z, and determine its value as Z, =Oif Y<0 else Z,=1 We assume that the weights can have discrete values 1, 0 and +1. Thus our basic motivation now is to find those values of w,, w, and w; that will make Z, = Z for all entries of a, 6, c. The leamming problem now becomes a search for such values of weights. Now that we have oriented the problem to a GA search, we represent the chromosome (solution) as a set of weights {w,. w2, w3}. An example solution would be {0, +1,-1}. The fitness function can be computed as the number of correct entries obtained in every generation. For the example solution {0, +1, 1}, the value of the fitness function is 6. It is obvious that we wish to find values of w;, such that the value of fitness equals its maximum value 8 (the maximum number of entries in the table). For the GA, we once again use a population size of 4 and randomly generate the first four solutions. Figure 23.3 shows one possible flow of sequence of the GA till it hits the correct solution. It can be seen that as the GA progresses it filters out those solutions having lower values of fitness. Towards the end the converged GA population has most solutions which are very close to the optimal one. We conclude that the GA has learnt the input-output mapping by finding the exact weights that satisfy all entries of the table. i Genetic Algorithms: Copying Nature s Approaches Ee Solution no. Solution no. Solution no. wy W2 Ws fi 1 (e) -1 8 1 -1 1 5 1 0 1 4 1 0 -1 8 = 25 Fitness is maximized at 8; Correct solution {1, 0, -1} obtained Fig. 23.3. GA run for the I/O table generalization problem 463 464 Artificial Intelligence Note that the maximum fitness value from one generation to another is constantly increa