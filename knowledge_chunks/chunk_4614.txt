dialogs in the WIN-PROLOG system have also been discussed. EXERCISES 1. A family tree is always something many of us would want to maintain. Try using PROLOG to code a family tree wherein you could query for a person s father, mother, son, daughter, siblings, ancestors, descendents and the like. Also depict the outputs in the form of a tree. 2. Make a repository of utilities that manipulate lists. These could include sorting, finding the sum of the numbers of the list, flattening a list (converting for instance [a,[b,[c],p],q] to [a,b,c,p,q]), union and intersection of two lists, etc. Attempt to write a program that could change its behavior (code) based on interactions with the user. 4, PROLOG has been widely used in natural language processing applications. Given a set of context free grammar rules, write a program that will accept a sentence and verify whether it conforms to the grammar. 5. Write an agent program that will play the game of tic-tac-toe with you. Add a dialog window that will facilitate the input and display the results. 6. Most of the time we learn a game by observing. With reference to exercise 6, can you implement another agent that just observes the two of you (the agent in exercise 6 and you) playing tic-tac-toe and learns to play the game? After a certain period this observer and learner should be in a position to play the game with you! (Hint: You could notify the observing and learning agent as to who has won the game along with the final board positions.) 7. In section 6.2 we discussed bidirectional search. Construct two agents which traverse a graph from the two ends of a given path connected by nodes, to discover the shortest path between the source and the destination. One agent delves from the source while the other from the destination. Ensure proper communication between them so that each is aware of the nodes visited by the other. ye CHAPTER 26 CONCLUSION You UW never plough a field by turning it over in your mind. l Irish Proverb 2