 dummy s cards. The two defenders play their own cards. Each of the three can see two sets of cards their own and the one in the dummy. The difference in nature of their tasks arises because the declarer can (1) see the complete set of cards for her side, and (2) is the only one to make decisions about what cards to play based on this information. Each of the defenders, on the other hand, has to play one set of cards without information about what their partner might hold. They can see the dummy s cards, but that does not give them enough information to plan the hand. The defender s task is generally considered to be more difficult. We take a brief look at declarer play, since not enough progress has been made in Bridge programming to discuss the complete game. Also, while Computer Bridge has been popular for a while, and there have been regular Computer Bridge championships, many of the programs like Jack' and BridgeBaron are shrouded in commercial secrecy and are not available for study. Furthermore, the level of the computer programs is still not comparable to Chess vis-a-vis the human champions, and there seems to be still considerable scope for new ideas here. On the face of it, the task of declarer play is like that of play in Chess, the declarer and two opponents selecting moves alternately. The major difference is in the fact that the declarer cannot see the cards each opponent holds. A direct consequence of this is that the game tree cannot be generated, and, therefore, algorithms based on Minimax search cannot be used. One interesting approach to solve the declarer play problem is to adopt a Monte Carlo method. This approach was used in implementing the G B program (Ginsberg, 1999, 2001). The main idea behind this approach is that if you knew the opponents cards then the problem would become a complete-information game problem, known in bridge parlance as a double-dummy problem. A double-dummy bridge problem is still a difficult one to solve, generating a 