for a finite domain. Also, not shown in the algorithm, is the role of a CLOSED list to check for looping. This is left as an exercise. 7.4 Goal Stack Planning The main problem with BSSP is that goal regression is not sound and the algorithm may be handling goal descriptions that are not consistent with any state. The advantage of BSSP over FSSP is that because it focuses on the goal, the search space it generates is smaller due to the branching factor being lower. FSSP, on the other hand, is sound but has a large branching factor, since it looks at modifications to the complete state. One of the earliest planners STRIPS (Fikes, 1971) attempted to combine the focused search of BSSP with the soundness of FSSP. It considered actions by reasoning in a backward manner, but committed itself to actions only in a forward manner. The algorithm is also called Goal Stack Planning (GSP) (Rich and Knight, 1990) because it pushes subgoals and actions into a stack, and picks an action only when all its preconditions are satisfied. That way, it works with state descriptions that are always consistent for growing plans, and goal descriptions for growing the search tree. The algorithm is however incomplete, in the sense that it could terminate without finding a plan. It is possible that the algorithm could commit to a wrong action at some time, reaching a state from which a plan cannot be found. For domains where the actions are reversible, for example the blocks world domain, the algorithm can be made complete by putting in an extra check, somewhat similar to the one in BSSP. However, the reasons for introducing the check are different, as described below. BSSP(givenState, givenGoal, actions) 1 goalPlan (givenGoal, ()) start with the empty plan 2 open (goalPlan) note the extra set of brackets 3 while not Empty(open) 4 do n Head(open) initially n (GivenGoal, ()) 5 goal Goal(n) extracts goal from search node n 6 plan Plan(n) extracts plan from search node n 7 open Tail(open) retain ot