 that it can relatively easily be manipulated both by other programs and by people. The most commonly used technique for representing procedural knowledge in AT programs is the use of production rules. Figure 4.9 shows an example of a production rule that represents a piece of operational knowledge typically possessed by a baseball player. Production rules, particularly ones that are augmented with information on how they are to be used, are more procedural than are the other representation methods discussed in this chapter. But making a clean distinction between declarative and procedural knowledge is difficult. Although at an intuitive level such a distinction makes some sense, at a formal level it disappears, as discussed in Section 6.1. In fact, as you can see, the structure of the declarative knowledge of Fig. 4.7 is not substantially different from that of the operational knowledge of Fig. 4.9. The important difference is in how the knowledge is used by the procedures that manipulate it. If: ninth inning, and score is close, and less than 2 outs, and first base is vacant, and batter is better hitter than next batter, Then: walk the batter. Fig. 4.9 Procedural Knowledge as Rules 4.3. ISSUES IN KNOWLEDGE REPRESENTATION Before embarking on a discussion of specific mechanisms that have been used to represent various kinds of real-world knowledge, we need briefly to discuss several issues that cut across all of them: e Are any attributes of objects so basic that they occur in almost every problem domain? If there are, we need to make sure that they are handled appropriately in each of the mechanisms we propose. If such attributes exist, what are they? e Are there any important relationships that exist among attributes of objects? Knowledge Representation Issues 87 TO ETE TT At what level should knowledge be represented? Is there a good set of primitives into which all knowledge can be broken down? Is it helpful to use such primitives? e How should sets of objects b