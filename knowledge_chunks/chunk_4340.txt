 more carefully, they may also increase problem-solving time by forcing the problem solver to consider them. If we only want to minimize the number of node expansions in the search space, then the more control rules we learn, the better. But if we want to minimize the total CPU time required to solve a problem, we must consider this trade-off. PRODIGY maintains a utility measure for each control rule. This measure takes into account the average savings provided by the rule, the frequency of its application, and the cost of matching it. [f a proposed rule has a negative utility, it is discarded (or forgotten ). If not, it is placed in long-term memory with the other tules. It is then monitored during subsequent problem solving. If its utility falls, the rule is discarded. Empirical experiments have demonstrated the effectiveness of keeping only those control rules with high utility. Utility considerations apply to a wide range of learning systems. For example, for a discussion of how to deal with large, expensive chunks in SOAR, see Tambe and Rosenbloom [1989]. 17.5 LEARNING FROM EXAMPLES: INDUCTION Classification is the process of assigning to a particular input, the name of a class to which it belongs. The classes from which the classification procedure can choose can be described in a variety of ways. Their definition will depend on the use to which they will be put. Classification is an important component of many problem-solving tasks. In its simplest form, it is presented as a straightforward recognition task. An example of this is the question What letter of the alphabet is this? But often classification is embedded inside another operation. To see how this can happen, consider a problemsolving system that contains the following production rule: If: the current goal is to get from place A to place B, and there is a WALL separating the two places then: look for a DOORWAY in the WALL and go through it. To use this rule successfully, the system s matching routine