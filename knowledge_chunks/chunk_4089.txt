 support inheritance. There is no basis for such an organization of slot values. So instead, we augment our value representation language to allow the value of a slot to be stated as either or both of: A value of the type required by the slot. * A logical constraint on the value. This constraint may relate the slot s value to he values of other slots or to domain constants. If we do this to the frames of Fig. 9.13, then we get the frames of Fig. 9.14. We again use the lambda notation as a way to pick up the name of the frame that is being described. John height : 72; Ax (x.height > Bill. height) Bill height : Ax (x.height < John.height) Fig. 9.14 Representing Slot-Values with Lambda Notation 9.2.5 Inheritance Revisited In Chapter 4, we presented a simple algorithm for inheritance. But that algorithm assumed that the isa hierarchy was a tree. This is often not the case. To support flexible representations of knowledge about the world, it is necessary to allow the hierarchy to be an arbitrary directed acyclic graph (DAG). We know that acyclic graphs are adequate because isa corresponds to the subset relation. Hierarchies that are not trees are called tangled hierarchies. Tangled hierarchies require a new inheritance algorithm. In the rest of this section, we discuss an algorithm for inheriting values for single-valued slots in a tangled hierarchy. We leave the problem of inheriting multivalued slots as an exercise. Considcr the two examples shown in Fig. 9.15 (in which we return to a network notation to make it easy to visualize the isa structure). In Fig. 9.15(a), we want to decide whether Fifi can fly. The correct answer is no. Weak Slot-and-Filler Structures 203 a R TRAST EARN NS HORE Although birds in general can fly, the subset of birds, ostriches, does not. Although the class Pet-Bird provides a path from Fifi to Bird and thus to the answer that Fifi can fly, it provides no information that conflicts with the special case knowledge associated with the class Ostr