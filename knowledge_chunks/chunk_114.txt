ains the same, that is the steepest gradient ascent (or descent, if the heuristic function is such that lower values are better), the performance depends upon the nature of the terrain being defined, as illustrated in Figure 3.14. If the heuristic function defines a smooth terrain, the search will proceed unhindered. On the other hand, if the terrain is undulating then the search could get stuck on a local optimum. A function with only 1 one maximum h(n) Nodes in the Search Space FIGURE 3.14 A well behaved function monotonically improves towards one maximum. Let us evaluate the Hill Climbing algorithm on the four criteria we have been using. 3.4.1 Completeness Algorithm Hill Climbing is not complete. Whether it will find the goal state or not depends upon the quality of the heuristic function. If the function is good enough, the search will still home in on the goal state. If the heuristic function yields no discriminating information (for example, if h(n) 0 for all nodes n), the algorithm will terminate prematurely when it gets stuck. 3.4.2 Quality of Solution Like Best First Search, no guarantee on the quality of the solution can be given. 3.4.3 Space Complexity This is the Hill Climbing algorithm s strongest feature. It requires a constant amount of space. This is because it only keeps a copy of the current state. In addition, it may need some constant amount of memory for storing the previous state and each candidate successor. But overall, the space requirements are constant. 3.4.4 Time Complexity The time complexity of Hill Climbing will be proportional to the length of the steepest gradient ascent route from the Start position. In a finite domain, the search will proceed along this path and terminate. Thus, one can say that the complexity of Hill Climbing is linear. Overall, one can observe that the performance of Hill Climbing is critically dependent upon the heuristic function. The algorithm is an example of a greedy algorithm that makes locally best choice