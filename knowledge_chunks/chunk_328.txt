he table. There is a need for search algorithms to be able to operate at different levels of abstraction. STRIPS like systems also use the MEA strategy, but are compelled to work with the primitive operators from the word go. One of the first systems to adopt a hierarchical approach to planning was ABSTRIPS (Sacerdoti, 1974). As the name suggests, ABSTRIPS is an extension or abstraction of STRIPS and works on the same problem representations. It, however, uses some additional information to search in a different manner. The additional information it uses is a partial ordering of the predicates in the domain, determined by a criticality value assigned to each predicate. This criticality value is very similar to the ordering of differences in GPS. ABSTRIPS start off by ignoring all but the most critical predicates and searches for a solution, with only the most critical predicates in the preconditions. During this process, it ignores all other preconditions of the operators. Having found a plan, it moves to the next level of criticality. This is done by looking at the predicate with the next level of criticality, and posing subproblems to achieve them wherever they become visible in the top level plan. The solutions for these subproblems are inserted into the top level plan, and the algorithm moves on to the next level. The hierarchy of abstraction in ABSTRIPS is generated by ignoring preconditions in the decreasing order of criticality. Another way a hierarchy of actions can be generated is by considering the effects of groups of actions, somewhat like the macros described earlier, but treated as operators. This would enable the problem solver to operate with higher level tasks. Thus, planning a vacation trip might have a high level solution like (book-tickets, go-to-railway-station, travel-to-destination, look-for-hotel, check-in-to-hotel, hike-for-three-days, return) at different levels of abstraction 4. This solution will in turn have to be expanded into sequence 