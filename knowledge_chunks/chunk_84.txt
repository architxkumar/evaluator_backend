h First Search are complete for finite state spaces. Both are systematic. They will explore the entire search space before reporting failure. This is because the termination criterion for both is the same. Either they pick the goal node and report success, or they report failure when OPEN becomes empty. The only difference is where the new nodes are placed in the OPEN list. Since for every node examined, all unseen successors are put in OPEN, both searches will end up looking at all reachable nodes before reporting failure. If the state space is infinite, but with finite branching then depth first search may go down an infinite path and not terminate. Breadth First Search, however, will find a solution if there exists one. If there is no solution, both algorithms will not terminate for infinite state spaces. 2.5.2 Time Complexity The time complexity is not so straightforward to estimate. If the search space is finite then in the worst case, both the search methods will search all the nodes before reporting failure. When the goal node exists then the time taken to find it depends upon where the goal node is in the state space. Both DFS and BFS search the space in a predefined manner. The time taken depends upon where the goal happens to be in their path. Figure 2.23 shows the progress of both the searches on our state space. Pochee FIGURE 2.23 DFS on the left dives down some path. BFS on the right pushes slowly into the search space. The nodes in dark grey are in CLOSED, and light grey are in OPEN. The goal is the node in the centre, but it has no bearing on the search tree generated by DFS and BFS. a BFS will find this quickly, while DFS will take a long time; as it Z sweeps from left to right. ee ( DFSwillfind this) one fast, while BFS will need to wade through exponentially growing layers. FIGURE 2.24 DFS vs. BFS on a finite tree. If the state space is infinite then DFS could dive down an infinitely long path and never recover! It would then make no sense to talk 