 trying to schedule a meeting. FAIL SUCCEED To do so, the program must solve a constraint (A special conference has all the rooms . : 1 . nd ti satisfaction problem to find a day and time at booked on Wednesday.) which none of the participants is busy and at which there is a sufficiently large room avail Fig. 7.4 Nondependency-Directed Backtracking able. In order to solve the problem, the system must try to satisfy one constraint at a time. Initially, there is little Treason to choose one alternative over another, so it decides to schedule the meeting on Wednesday. That creates a new constraint that must be met by the rest of the solution. The assumption that the meeting will be held on Wednesday is stored at the node it generated. Next the program tries to select a time at which all participants are available. Among them, they have regularly scheduled daily meetings at all times except 2:00. So 2:00 is chosen as the meeting time. But it would not have mattered which day was chosen. Then the program discovers that on Wednesday there are no rooms available. So it backtracks past the assumption that the day would be Wednesday and tries another day, Tuesday. Now it must duplicate the chain of reasoning that led it to choose 2:00 as the time because that reasoning was lost when it backtracked to redo the choice of day. This occurred even though that reasoning did not depend in any way on the assumption that the day would be Wednesday. By withdrawing statements based on the order in which they were generated by the search process rather than on the basis of responsibility for inconsistency, we may waste a great deal of effort. If we want to use dependency-directed backtracking instead, so that we do not waste this effort, then we need to do the following things: e Associate with each node one or more justifications. Each justification corre sponds to a derivation process that led to the node. (Since it is possible to derive the same node in several different ways, we wan