inues step-by-step until a global optimum for the whole problem has been found (a path to the terminal edge point Es). The process can be described mathematically as a recursive process. Let C(s,t,,) be the total cost of the best path for the remaining path increments, given the t as the next move direction. Let search is at position (state) $ and ready to select be the value of t that minimizes C, and C* the corresponding minimum of Thus, at each stage, the following values are computed: C. = C(s,f,,*) C*(s) = min C,,(s,t) 1., where C,(s.t,,) (cost at stage n) + (minimum costs for stages n + I onwards) = K(s,f,J + C.1*(r) where K(s,t) is the Cost at stage n, and C., 1 (t) is the minimum Cost for stages n + I to the terminal stage. The computation process is best understood through an example. Consider the following 5 X 5 array of pixel cost values. 19 7 6 5 I 13 7 2 7 I 41521 6 4 3 7 7 87223 Suppose we wish to find the optimal cost path from the lower left to the upper right corner of the array. We could work from either direction, but we arbitrarily choose to work forward from the lower left pixel with cost value 8. We first set all values except 8 equal to some very large number, say M, and compute the minimum cost of moving from the position with the 8 to all other pixels in the bottom row by adding the cost of moving from pixel to neighboring pixel. This results in the following cost array. 302 Visual Image Understanding Chap. 14 MMM.MM MM M M M M M M M M M M M M M 8 15 17 19 22 Next, we compute the minimum neighbor path cost for the next to the last row to obtain MM M M M M M M M M M M M M M 14 14 17 24 29 8 15 17 19 22 Note that the minimum cost path to the second, third and fourth positions in this row is the diagonal path (position 5,1 to 4,2) followed by a horizontal right traversal in the same row, whereas the minimum cost path for the last position in this row is the path passing through the rightmost position of the bottom row. The remaining minimum pat