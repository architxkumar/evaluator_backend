d the reasoning system could benefit from sharing the work done. Also, the reasoner may need to switch back and forth between contexts and would benefit tremendously if all the inferences made at any time are cached along with their justifications, so that one can trace the dependencies between different facts . This becomes particularly relevant in a nonmonotonic situation when one may have to make and retract assumptions. Like the TMS, the ATMS too employs a special data structure called node for every datum the problem solver uses, including database entries, rules and procedures. For the problem solver, the node represents belief in the datum. However, in addition to marking the nodes as IN or OUT along with the justifications, the ATMS also keeps a label with it that contains the different environments in which the node holds. Every datum n in the ATMS has a label L E;, Eo, ..., E; which is a set of environments. The label is a succinct description of all the contexts in which the datum holds. Given an environment E; L and the set of justifications J provided by the problem solver to the ATMS, it follows that, Ej, Jtn or equivalently, JrEjpn where E; n can be read as n follows from E; . The implementation of the ATMS is required to ensure that the labels satisfy the following properties. Consistent A label L is consistent, if all its environments are consistent. Sound A label L is sound, if n follows from each E; eL. Complete A label L is complete, if for every consistent environment E such that J E n, there exists an E; L such that E; E. Minimalist A label L is minimal, if there are no two E;,E L such that E; Ej. In the discussion below, we focus on the labels and represent an ATMS node as node datum, environments in the style of (Forbus and de Kleer, 1992) which does not mention the full description node datum, environments , justifications as in (de Kleer, 1986), where a justification is the immediate set of predecessors of the node in the dependency network