with the goat. How can he take them all across the river? The state representation and move generation functions are interrelated. Let us say that we represent the state as a list of two lists, one for each bank of the river, say the left bank L and the right bank R. In each list, we name the entities on that bank. start state S ((MGLCB) ()) goal state G (() (MGLC B)) The move generation could first generate all possible moves and then filter out illegal moves. For example, from the start state, the following states are reachable: CG Lc) (4B), ((LC) (4G B)), ((G C) (ML B)), and ((G L) (MC B)) Of these, only the second state ((L C) (M G B)) is a legal state. Notice that the moveGen has transferred some elements from the first list to the second. In the next move it will need to transfer elements in the opposite direction. Also, there is redundant information in the representation. When one knows what is on the left bank, one also knows what is on the right bank. Therefore, one of the lists could be removed. To solve the problem of alternating directions, we could choose a representation that lists the entities on the bank where the boat is, and also which bank it is on, as shown below. Start state S (MLGC Left) goal state G (ML GC Right) where Left denotes that the boat is on the left bank and Right on the right bank. Note that M is redundant, because the man is where the boat is, and could have been removed. The moveGen(N) function could be as follows. Initialize set of successors C to empty set. Add M to the complement of given state N to get new state S. If given state has Left, then add Right to S, else add Left. If legal(S) then add S to set of successors C. For each other-entity E in N make a copy S of S, add E to S , If legal (S ), then add S to C. Return (C). The complement of a state is with respect to the set ML G C . The function legal (state:S) will return no or false if either both G and C or both L and G are missing from S, otherwise it will return yes 