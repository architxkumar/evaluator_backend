d ones. Unfortunately, however, unlike propositional logic, it does not possess a decision procedure, even an exponential one. There do exist procedures that will find a proof of a proposed theorem if indeed it is a theorem. But these procedures are not guaranteed to halt if the proposed statement is not a theorem. In other words, although first-order predicate logic is not decidable. it is semidecidable. A simple such procedure is to use the rules of inference to generate theorem s from the axioms in some orderly fashion, testing each to see if it is the one for which a proof is sought. This method is not particularly efficient, however, and we will want to try to find a better one. Although negative results, such as the fact that there can exist no decision procedure for predicate logic, generally have little direct effect on a science such as Al, which seeks positive methods for doing things, this particular negative result is helpful since it tells us that in our search for an efficient proof procedure, we should he content if we find one that will prove theorems, even if it is not guaranteed to halt if given a nontheorem. And the fact that there cannot exist a decision procedure that halts on all possihle inputs does not mean that there cannot exist one that will halt on almost all the inputs it would see in the process of trying to solve real problems. So despite the theoretical undecidability of predicate logic, it can still serve as a useful way of representing and manipulating some of the kinds of knowledge that an AI system might need. Let s now explore the use of predicate logic as a way of representing knowledge by looking at a specific example. Consider the following set of sentences: 1. Marcus was a man. Marcus was a Pompeian. All Pompeians were Romans. Caesar was a tuler. All Romans were either loyal to Caesar or hated him. Everyone is loyal to someone. People only try to assassinate rulers they are not Joyal to. Marcus tried to assassinate Caesar. SP