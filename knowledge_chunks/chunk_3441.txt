ersection; otherwise it is 0. An efficient way to find the intersection of two sets of symbolic elements (nonnumeric atoms) in LISP is to work through one set marking each element on the elements property list and then saving all elements from the other list that have been marked. The resultant list of saved elements is the required intersection. Matching two bags is similar to matching two sets excel ' counts of the number of occurrences of each element must also be made. For this, a count of the number of occurrences can be used as the property mark for elements found in one set. This count can then be used to compare against a count of elements found in the second set. Matching to Unify Literals One of the best examples of nontrivial pattern matching is in the unification of two FOPL liteta Is. Recall the procedure for unifying two literals, both of which may vvaaraiabbleless (see Chapter 4). For example. to unify P(f(a,.r).v.v) and PCv.h.:) we first rename variables so that the two predicates have no variables in common. This can be done by replacing the x in the second predicate with a to give P(u,h,:t. Next, we compare the two symbol-by-symbol from left to right until a disagreement is found. Disagreements can be between two different variables, a nonvariable term and a variable, or two nonvariable terms. If no disagreement is found, the two are identical and we have succeeded. If a disagreement is found and both are nonvariable terms, unification is impossible; so we have failed. If both are variables, one is replaced throughout by the other. (After any substitution is made, it should be recorded in a substitution worktist for later use.) Finally, if the disagreement is a variable and a nonvariable term, the variable is replaced by the entire term. Of course, in this last step, replacement is Sec. 10.5 Partial Matching 201 possible only if the term does not contain the variable that is being replaced. This matching process is repeated until the two are unifie