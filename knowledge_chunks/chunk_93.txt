 internal nodes is just one less than the number of leaves. So, the number of nodes inspected is at most twice as in BFS. In general, for inspecting b? new nodes at level d, one has to inspect (b 1) (b 1) extra nodes. The ratio of internal nodes to leaves tends to 1 (b 1) for large d. Every time DFID inspects the leaves at the depth d, it does extra work of inspecting all the internal nodes as well. That is, every time BFS scans L nodes at depth d, DFID inspects L nodes. Thus, it does ( N L times extra work as compared to BFS. This ratio tends to b (b 1) for large d, and as the branching factor becomes larger, the number of extra nodes to be inspected becomes less and less significant. A look at Table 2.1 above shows that when b 10, the number of internal nodes is about 11 of the leaves. Box 2.5: Leaves Vastly Outnumber Internal Nodes Given a tree with branching factor b, a simple way to compute the ratio of leaves to internal nodes is by thinking of the tree as a tournament in which b players compete, and one winner emerges at each event (internal node). That is, at each (event) internal node, b 1 players are eliminated. Thus, if there are players, and only one emerges at the root the number of events (internal nodes), must Satisfy L (b-1)I 1 Thus I (L -1)Kb- 1), and Yc 1Kb- 1) for large L. Also (L D L bKb 1) for large L. The work done by DFID can also be computed by summing up the work done by all the Depth First Searches that it is made up of, to arrive at the same result. That is Nppyp E, 9104(b7 ! 1) (b- 1) Thus, the cost of repeating work done at shallow levels is not prohibitive Thus, the extra work that DFID has to do becomes insignificant as the branching factor becomes larger. And the advantage gained over BFS is a major one, the space requirement drops from exponential to linear. The above discussion shows that as search algorithms have to search deeper and deeper then at every level they have to do much more work than at all the previous levels combined.