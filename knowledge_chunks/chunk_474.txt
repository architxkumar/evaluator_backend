sion for both these choices. Instead of choosing the first past-and-future-consistent value that we find for a variable, we could investigate all values in a domain (using a limited degree lookahead) and choose the value for instantiation based on some heuristic criteria (Dechter, 2003). One heuristic called min-conflicts chooses that value that does the least amount of pruning of future domains. Another heuristic, maxdomain-size, strives to keep the future domains as large as possible. For each candidate value, it computes the size of the smallest resulting domain, and chooses that value for which the size (of the smallest future domain) is largest. A third heuristic, estimated-solutions, takes a more global view and looks at the sizes of all remaining domains, by taking their product. The idea is that the product represents the maximum number of possible solutions remaining after the choice of a given value for a variable. The minimum width and the minimum induced width ordering studied earlier in this chapter were based on the topology of the underlying constraint graph. They were oblivious of the domains of the variables. The number of values that the domain of a variable has determined the topology of the search tree lying below the variable. The number of subtrees below the variable is equal to the number of values in the domain of the variable. Thus, if we choose an ordering in which the variables of smallest domains are chosen first, we will get a search tree with the smallest number of nodes, as illustrated in Figure 9.40. In the example the domains are Dy, w, r, b , Dg 9 and Dc 6 . Variables Variables Ad Ww r D ci e v v B g g g B Lg c b b b A Le FIGURE 9.40 The number branches below a node depends upon the number of values in the domain of the variable. Choosing smaller domain variables first, results in smaller trees, as in the tree on the right. The domain sizes of variables change dynamically when lookahead algorithms prune domains of future variables. 