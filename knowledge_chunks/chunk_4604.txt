me - Link - to_do_(Do This)), what_to_do_with{ Do This,Now Do This), agent_post( Name, Link, get(Now Do This)), ni. me_handler(Name, Link, get(Now Do This)):- ni,write(Now Do This). /*The following handler clause below is a catch all clause*/ me_handler(Name, Link,_):- write( Pardon Me! ),nl. what_to_do_with( Hello , Welcome ). what_to_do_with( How are you? Fine Thank uw). what_to_do_with( Pardon me!>, Thats ok*). create_Me_agent:- agent_create(me, me_handler,2000). establish_connection_with_You_agent:- agent_create(me, 1, 202.141.80.66,4000), T Handlers define what is to be done when a request comes from an agent. With an arity of three comprising of the Name of the agent, the Link number and an Event, it services a request from either the local or remote agent. For instance, the first clause for me_handler handles an agent on the specified link that sends an event of the torm to_do(Something). You could now write PROLOG code (as has been done) within the body of the clause to process Something and maybe return the processed data to the Tequesting agent. This creates the agent using the Chimera predicate agent_create/3. The first argument is the name of the agent, the second is its associated handler predicate name and the last is the TCP/IP port address through which communication can be effected. This clause establishes a connection between the created agent and another running on another/same machine in a different port and assigns a link number for future reference. agent_create/4, the predicate that performs this task, has the following arguments in that order: Name of the agent, Link number, JP address and Port. you_handler(Name, Link, get(Stuff}):- /*You could process Stuff here and send it back to the agent me.*/ nl,write(-Recd: ), write( Stuff). /*The following handler clause below is a catch all clause*/ you_handler(Name, Link,_):- n L write( Ooooops)). create_You_agent:- agent_create(you, you_handler,4000). establish_connection_with_Me_agent:- agent_crea