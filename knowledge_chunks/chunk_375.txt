d on Do. The recursive call terminates. If D,; had evaluated to a value higher than 11 (for example, if the three nodes in the recursive call had values 15, 14, 12) then too the recursive call would have terminated via a B cutoff. The node X now evaluates to 8 and this becomes the new bound on cluster D. Since the cluster D is fully refined, this becomes the known minimax value of the MIN node representing this cluster, as shown in Figure 8.32 below. However, since this value is not the highest, SSS turns its attention to cluster A, which looks better. . ( Cy WN 7 ie ae ; ae al LC mif 1)h2) (9) GIL A B c D Dy D, 1 8 2 3 4 5 6 9 7 FIGURE 8.32 After cluster D is fully refined to value 8, cluster A with an upper bound of 10 looks better. It is refined next, and the upper bound decreases to 5. The three clusters in contention: A, B, and D have values 5, 7 and 8. Furthermore, D is fully refined. SSS then terminates with the minimax value 8. The order of inspecting the nodes is shown below the tree. SSS then refines cluster A and revises its upper bound downward to 5. At this point, cluster D has become the best, and SSS can terminate with the minimax value 8. We see that the SSS algorithm is guided in its search by the estimates of the partial clusters, and always investigates the best looking cluster. It is not uninformed like the AlphaBeta algorithm, and has been shown to always inspect fewer than or the same nodes than the AlphaBeta search. The cost that SSS has to pay is increased book keeping. Since it is a version of AO , it needs to keep track of the different partial solutions. The AlphaBeta algorithm, on the other hand, needs to keep only the current node. The Algorithm SSS The following description of the algorithm, adapted from (Pearl, 1984) does not use an explicit representation of clusters. Rather, the best node in the cluster is used as a representative of the cluster, in the following format. Search node p J, s, h where J is a node in the game tree Sis th