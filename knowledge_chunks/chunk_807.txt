 relevant facts. 14.1 Hierarchies in the Domain We begin with two features of knowledge representation. One is that our representations involve aggregations of simpler concepts into composite structures. We can model compound elements that are made up by assimilating and structuring basic elements. For example, we can think of human (as in a body) as a category, but we can also think of the different parts of the body as the right ear, or the left hand. Or we can think of a recipe for baking a cake, as made up of a number of smaller steps. We need to be able to handle such aggregations in which the parts are related to the whole and to other parts. The second is the organization of categories themselves into hierarchical layers of abstractions. For example, humans (bodies) are a kind of mammal (bodies) that are a kind of animal (by now, we only think of them as bodies and no minds!). Or a cake is a kind of baked food which is a kind of cooked food, and baking is a kind of cooking. Such kinds of taxonomies are part of ontologies in the computing community. Both kinds of relations, between a part and the whole, and between different levels of abstraction can be captured in FOL, in the form of rules. But the problem is that arriving at conclusions by the process of search is computationally expensive at best, and intractable at worst. Instead, we need such concrete realizations of relations that finding related facts is done not by using search in a sea of formulas, but can be accessed more directly by following links. Figure 14.1 illustrates the connections we seek to ossify. In one direction, an aggregation hierarchy relates components to composite elements. In an orthogonal direction, there exists an abstraction hierarchy that classifies elements into categories. In the figure, categories are shown in shaded square boxes, and correspond to sets in the underlying domain. For example, the category paby-girl would refer to the set of elements in the universe that are b