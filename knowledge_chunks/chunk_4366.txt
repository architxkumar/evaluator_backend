bove suggests the creation of a new concept representing the set of composite numbers. Then the second heuristic suggests creating a concept representing the complement of that, namely the set of prime numbers. Two major questions came out of the work on AM. One question was: Why was AM ever turned off? That is, why didn t AM simply keep discovering new interesting facts about numbers, possibly facts unknown to human mathematics? Lenat [1983b] contends that AM s performance was limited by the static nature of its heuristics. As the program progressed, the concepts with which it was working evolved away from the initial ones, while the heuristics that were available to work on those concepts stayed the same. To remedy this problem, it was suggested that heuristics be treated as full-fledged concepts that could be created and modified by the same sorts of processes (such as generalization, specialization, and analogy) as are concepts in the task domain. In other words, AM would run in discovery mode in the domain of Heuretics, the study of heuristics themselves, as well as in the domain of number theory. An extension of AM called EURISKO [Lenat, 1983a] was designed with this goal in mind. The other question was: Why did AM work as well as it did? One source of power for AM was its huge collection of heuristics about what constitute interesting things. But AM had another less obvious source of power, namely, the natural relationship between number theoretical concepts and their compact representations in AM {Lenat and Brown, 1983]. AM worked by syntactically mutating old concept definitions stored essentially as short LISP programs in the hopes of finding new, interesting concepts. [t turns out that a mutation in a small LISP program very likely results in another well-formed, meaningful LISP program. This accounts for AM s ability to generate so many novel concepts. But while humans interpret AM as exploring number theory, it was actually exploring the space of small 