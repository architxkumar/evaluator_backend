t standardization has bee n done, it is easy to determine how the Using Predicate Logic 117 th ethereal unifier must be used to perform substitutions to create the resolvent. If two instances of the same variable occur, then they must be given identical substitutions. We can now state the resolution algorithm for predicate logic as follows, assuming a set of given statements F and a statement to be proved P: Algorithm: Resolution 1, Convert all the statements of F to clause form. 2. Negate P and convert the result to clause form. Add it to the set of clauses obttf Hied in 1. 3. Repeat until either a contradiction is found, no progress can be made, or a predetermined amount of effort has been expended. (a) Select two clauses. Call these the parent clauses. (b) Resolve them together. The resolvent will be the disjunction of all the literals of both parent clauses with appropriate substitutions performed and with the following exception: If there is one pair of literals 71 and 72 such that one of the parent clauses contains T2 and the other contains 71 and if 71 and 72 are unifiable, then neither 71 nor 72 should appear in the resolvent. We call 71 and 72 Complementary literals. Use the substitution produced by the unification to create the resolvent. If there is more than one pair of complementary literals, only one pair should be omitted from the resolvent. (c) If the resolvent is the empty clause, then a contradiction has been found. If it is not, then add it to the set of clauses available to the procedure. If the choice of clauses to resolve together at each step 1s made in certain systematic ways, then the resolution procedure will find a contradiction if one exists. However, it may take a very long time. There exist strategies for making the choice that can speed up the process considerably: Only resolve pairs of clauses that contain complementary literals, since only such resolutions produce new clauses that are harder to satisfy than their parents. To facilita