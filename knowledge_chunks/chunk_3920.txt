ps, such as that between Pompeians and Romans, are described as shown in sentence 3. The implication mule there states that if an object is an instance of the subclass Pompeian then it is an instance of the superclass Roman. Note that this tule is equivalent to the standard set-theoretic definition of the subclass-superclass relationship. The third part contains representations that use both the instance and isa predicates explicitly. The use of the isa predicate simplifies the representation of sentence 3, but it requires that one additional axiom (shown here as number 6) be provided. This additional axiom describes how an instance relation and an isa relation can be combined to derive a new instance relation. This one additional axiom is general, though, and does not need to be provided separately for additional isa relations. 104 Artificial Intelligence A NN ET, mart Marcus) Pompeian(Marcus) vx : Pompeian(x) = Romani) ruler(Caesar) vx: Romarnx) > loyalto(x, Caesar) \/ hate(x, Caesar) instance(Marcus, man) instance(Marcus, Pompeian) vx: instance(x, Pompeian) > instance(x, Roman) instance Caesar, ruler) Wx: instance(x, Roman) - loyalto(x, Caesar) \/ hate(x, Caesar) insiance(Marcus, man) instance(Marcus, Pompeian) isa(Pompeian, Roman) instance(Caesar, ruler) Vx: instance(x, Roman) > loyalto(x, Caesar) \/ hate(x, Caesar) vx: Vy: Vz: instance(x, y) /\ isaly, 2) > instance(x, z) aeons Pons OArwons Fig. 5.3. Three Ways of Representing Class Membership These examples illustrate two points. The first is fairly specific. It is that, although class and superclass memberships are important facts that need to be represented, those memberships need not be represented with predicates labeled instance and isa. In fact, in a logical framework it is usually unwieldy to do that, and instead unary predicates corresponding to the classes are often used. The second point is more general. There are usually several different ways of representing a given fact within a particular represen