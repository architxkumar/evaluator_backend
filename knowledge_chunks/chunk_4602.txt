agent. A Chimera Agent A Chimera agent has basically two components a socket and a handler. The former works on the well known Windows sockets (Winsock) and is used by the agents to communicate amongst each other. It supports TCP/IP network communications. The latter handles the events and governs what should happen when the agent perceives something. The body of the handler is generally a PROLOG program which makes the agent do what it is designed to, when the event is reported. In order to use the Chimera Agent system it is necessary to load the same into the PROLOG system. This is done by ~ :-ensure_loaded(system(chimera)). as the very first clause of every agent program. Agent Handler, Creation and Link Establishment Table 25.4 shows the development of two simple Chimera agents named me and you. Note that the Chimera system has been loaded in two separate instantiations of WIN-PROLOG. Every agent has to have a handler/3 which defines what is to be done when an event takes place. Naturally for every event there ought to be a handler clause. The agent me has a handler predicate me_handler while the other you has you_handler to take care of these tasks. All handlers have an arity of 3. The explanation of each of them is as given below. handler(Name, Link,Event) The first argument is the name of the agent (you, for instance) that is seeking this agent (me), the second is an integer that designates the link between the two agents and the third is the actual event that has occurred and which needs to be serviced. The me_handler/3 in the Table 25.4 writes the Name, Link and Event, finds what is to be done next with the input event and then sends (posts) back the processed data to the querying agent. The you_handler just writes the data received. Now that the handlers are in place we need to effect the formal creation of the agents. An agent can be created with the predicate agent_create/3 comprising the Name of the agent, the associated handler/3 predicate name and the