 d, be the set of defining attributes for s, 11 if Is xl Idi 12 then Let k (obj(s,U x), (s,U )) 13 ifkegq 14 then Compute Child(k) 15 enqueue (k, q) 16 Succ(k) ( ) 17 Succ(c) cons(k, Succ(c)) 18 return top (g, att(g)) Fig 14.36 The procedure to find the concepts for the given context (g,m,r) and construct the lattice. With every concept c, there is a list of child concepts in Child(c) and a list AttrChild(x) that contains the equivalence classes of the attributes of the children. The algorithm returns a pointer to the top concept. 14.9 Conceptual Graphs Perhaps the most general form of representing logical sentences in the form of a semantic network is the formalism of Conceptual Graphs introduced by John F. Sowa (1984; 2000; 2009). Sowa traces the origin of graphical notation of concepts to Charles Sanders Peirce who was searching for a graphic notation, similar to the notations used in organic chemistry, that would more clearly show the atoms and molecules of logic. (Sowa, 2006). Around the same time, Gottfried Frege had also developed a treelike notation (Frege, 1879). The earliest graphs developed by Peirce were relational graphs, capable of representing only conjucts of existentially qualified variables. In 1897, however, he invented a remarkable technique that made it possible to represent all FOL formulas graphically (Peirce, 1909). This technique involved the drawing of an oval to represent negation of whatever was inside the oval. Consider the example (from (Sowa, 2006; 2009)) If a farmer owns a donkey then he beats it . In FOL, we would write the sentence as, Vx Vy ((Farmer(x) Donkey(y) Owns(x, y)) D Beats(x, y)) This requires the representation of the universal quantifier and the implication operator. However, with the introduction of negation, the sentence can equivalently be written as, 13x Sy (Farmer(x) Donkey(y) Owns(x, y) Beats(x, y)) which Peirce could draw with the help of two ovals as shown in Figure 14.37. The existential graphs of Peirce are the