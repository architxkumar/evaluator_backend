andfather Ofld (R12 (father 2y )x) - - Rt3R23 (male 'yl R13 ((father 'y 'e( (male a( mond-1 cond-1 - - father on ?x "i)l Vcond male (R23 .\\ ((father ?a ?yl. ,; :d: t (brother', ?x - (unt Ie ?z 'yl( Figure 10.9 Typical rules and a portion of a compiled network. (father bill joe), all rules which contain father as an LHS condition are easily identified and retrieved. In RETE, the retrieval and subsequent testing of rule conditions is initiated with the creation of a token which is passed to the network constructed by the rule compiler. The network provides paths for all applicable tests which can lead to consi stent bindings and hence to complete-LHS satisfaction of rules. The matcher traverses the network finding all rules which newly match or no longer match Working Memory element,;. The output from the matcher are data structures which consist of pairs of elements . a rule name and list of working-memory elements that match its LHS. like (R6 ((father bob sam) (father mike bob)). The reader will, notice that the indexing methods described above are similar to those presented in the following chapter. Other time-saving tricks are also employed in RETE however, the ones noted above are the most important. They provide a substantial saving over exhaustive matching of hundreds or even tens of thousands of conditions. Chap. 10 Exercises 209 10.8 SUMMARY In this chapter we have examined representation structures used in match comparison operations, and considered various measures of similarity and distance between two or more such structures. We began by reviewing some representation structures such as FOPL e\pres sions, rules, frames, fuzzy sets, and networks. We added to this group general graphs. trees. Sets, and bags. We defined pattern variables as open or segment based on the number of constant terms the could hind with. \ke Ul'.&i defined variables as a function of their domains, nominal, ordinal, binary, and interval. Next, we considered various measures that cou