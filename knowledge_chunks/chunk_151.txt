n observe that there are N! permutations possible with N cities, each representing a tour. Every tour can be represented by N of these permutations, where each is a rotation of another. For example, in a nine city problem, (1, 2, 3, 4, 5, 6, 7, 8, 9) represents the same tour as (5, 6, 7, 8, 9, 1, 2, 3, 4). One must remember that a tour is a complete cycle, so after the last city in the path representation, one has to go back to the first one. Further, one can observe that reversing the order does not change the cost of the tour because this simply means that the salesman goes in the opposite direction on the same tour. This assumes that the graph is not a directed graph. Thus, the number of distinct tours is NWN x 2) (N 1)! 2. In practice, in an algorithm, one may not be able to prune the duplicate solutions always. In general, the number of candidate solutions grows as a factorial of the number of cities which, as we see below, is much worse than the exponential function, which is much larger than the exponential growth of SAT problems. Let us look at the value 219 which is the number of candidates for a 100variable SAT problem. Two to the 100th power is 1, 267, 650, 600, 228, 229, 401, 496, 703, 205, 376. In the US number naming system, it is one nonillion, 267 octillion, 650 septillion, 600 sextillion, 228 quintillion, 229 quadrillion, 401 trillion, 496 billion, 703 million, 205 thousand, 376. This is about 10 . If one were to take a sheet of paper 0.1 millimetre thick and double the thickness (by folding it) one hundred times, the resulting stack would be 13.4 billion light years tall. It would reach from Earth to beyond the most distant galaxy we can see with the most powerful telescopes almost to the edge of the observable universe . A hundred variable SAT is hard enough. But 100! is a much bigger number. The following output from a simple Lisp? program shows the number. (factorial 100) 9332621544394415768169923885626670049071596826438162146 859296389521759999