s reduced to the following one-dimensional problem: given a rack of tiles, the contents of a row on the board, and the cross-checks and anchors for the row generate all legal plays in that row. Each word is generated in two phases. In the first phase, the eft part of the word is generated. The left part is the part of the word that is to the left of the anchor. Observe that the left part of a word can be empty, for example when a word begins in the square marked ? in Figure 8.41. It is also possible that the left part may already exist on the board, for example for the blank square in the above figure. Again, one might note that the left part could be longer than one letter in this case. After this phase, either the left part of the word exists, or if it is empty, a constraint on the anchor letter exists in the form of the cross-check constraint. Thus, the right part of the word is generated as a constrained extension of the left part. The generation algorithm of Appel and Jacobson essentially tries out all feasible combinations of words that can be generated in the twophase manner described above. The other constraints on the words generated are the constituent letters must be available, either on the board in the left part, or in the rack held by the player. In addition, the trial and error is not brute force. It is constrained to the paths available in the DAWG. Only meaningful letter permutations need be explored. For example, if the generator is exploring the anchor next to the letter T in the above figure, only paths starting with letter T are explored in the DAWG, and only those paths are explored for which the player has the letters in the rack. The detailed algorithm and issues are available in the paper. The algorithm was very successful and was also incorporated into many other Scrabble programs, including Maven. The DAWG is conceptually similar to the Rete net we studied in Chapter 6, in the sense that only desired matches are done. A word is like the le