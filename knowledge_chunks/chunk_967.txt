 This is because the surface (boundary) of the ball marks the region of interest. For KNN retrieval, it marks the similarity, or distance, of the Kh case in the retrieval set. Any case at a lower distance, or higher similarity, will be of interest. When the BOB test returns true, the algorithm goes down the branch and (sequentially) compares cases in the bucket with the query, if it is a bucket. If it finds more similar cases then the ball will shrink in size as the better case enters the retrieval set. The BOB test and the BWB test are illustrated in the figures below. The figures represent the same partition of the same case base in the example above, with the buckets represented by shaded rectangles. The rectangles are drawn as concentric figures to highlight the tree structure. In fact, the boundaries of a rectangle will coincide with the boundaries of its parent. Let us assume that the task is to retrieve 4 nearest neighbours for the query Q. On processing a query Q, the retrieval algorithm ends up in bucket B. Figure 15.19 shows the query Q that falls in bucket B of the kd-tree. The four nearest cases are marked with white dots. The farthest of them defines the radius of the ball. The BWB ball test fails for the region inspected, which is bucket B. The algorithm backtracks up the tree (see Figure 15.15) and considers B s sibling A. The BOB test succeeds for A, and the algorithm inspects the cases in bucket A. As shown in Figure 15.20 below, two new cases are found that go into the retrieval set. The ball shrinks in size, because the farthest of the four is now closer than before. The BWB test now succeeds, and the algorithm can terminate. It has only inspected two of the eight buckets. If the two cases found in bucket A had not existed then the ball would not have shrunk and the BWB test would have failed. The algorithm would have gone up and applied the BOB to the next bucket C. As one can see from Figure 15.19, this test would have failed. It would have gone