nd. It can also happen that during exploration it becomes clear that a particular child of a node cannot offer to improve upon the value delivered by a sibling. In that case, that node need not be explored further. To understand this, we can view the game tree as a supply-chain process. At the top level, MAX has a set of MIN suppliers, from which it will select the one with the maximum value. Likewise, each M N has MAX suppliers, from which the one with the lowest valued one will be selected. This process continues down the tree. As the search in algorithm Minimax continues from the left to right, each node on the search frontier has been partially evaluated as shown in Figure 8.21. We will call the partially (or fully) known values of MAX nodes as a values. These values are lower bounds on the value of the MAX node. This is because that the MAX node will only accept higher values from the unevaluated successors. MAX nodes are also known as Alpha nodes. Likewise, MIN nodes are also called Beta nodes and store b values, which are upper bounds on values of the concerned MIN nodes. Remember that the a and b values are values that are already available to the respective nodes. They are not going to be interested in any successors that offer something inferior. Not only that, they are not going to be interested in any descendant that does not offer a better value. NN FIGURE 8.21 The search frontier contains a partial path in the game tree in which nodes have been partially evaluated. As this frontier sweeps to the right, these node will get fully evaluated. The following example is from the Noughts and Crosses game. We assume a 2-ply search, in which the following evaluation function is used, e(J) (numbers of rows, columns and diagonals available to MAX) (number of rows, columns and diagonals available to MIN) We look at the progress of the search to understand the need to prune search, shown in Figure 8.22. The algorithm starts with MIN child A by placing a cross in a c