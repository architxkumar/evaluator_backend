 the Dodgers can inherit a default team size from the set of all major league baseball teams. To support this, we need to view a class as two things simultaneously: a subset (isa) of a larger class that also contains its elements and an instance (instance) of a class of sets, from which it inherits its set-level properties. To make this distinction clear, it is useful to distinguish between regular classes, whose elements are individual entities, and metaclasses, which are special classes whose elements are themselves classes. A class is now an element of (instance) some class (or classes) as well as a subclass (isa) of one or more classes. A class inherits properties from the class of which it is an instance, just as any instance does. In addition, a class passes inheritable properties down from its superclasses to its instances. Let us consider an example. Figure 9.6 shows how we could represent teams as classes using this distinction. Figure 9.7 shows a graphic view of the same classes. The most basic metaclass is the class Class. lt represents the set of all classes. All classes are instances of it, either directly or through one of its subclasses. In the example, Team is a subclass (subset) of Class and ML-Baseball-Team is a subclass of Team. The class Class introduces the attribute cardinality, which is to be inherited by all instances of Class (including itself). This makes sense since all the instances of Class are sets and all sets have a cardinality. Class instance : Class isa: Class * cardinality : Team instance : Class isa: Class cardinality : {the number of teams that exist} *team-size : {each team has a size} ML-Baseball-Team isa: Mammal instance : Class isa: Team cardi nality : 26 {the number of baseball teams that exist} * team-size : 24 {default 24 players on a team} * manager : Brooklyn-Dodgers instance : ML-Basebail-Team isa: ML-Baseball-Player team-size : 24 Manager : : Leo-Durocher * uniform-color : Blue Pee-Wee-Rleese instance Brooklyn-Dodgers 