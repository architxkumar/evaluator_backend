ng at node consistency and arc consistency, we may have to look at relations of larger arity if we are to implement 1consistency and 2-consistency respectively. Let us look at an example to see why this is so. Consider the following CSP problem. Problem CSP5 (fw, X, Y, Z , Dy Dy Dy Dz r, b, g , ( X, Y, Z , Ryyz r b, 9 ), ( w, , Z , Ruyz b, b, g ) ) Now consider the notion of 3-consistency which says that any consistent assignments to two labels can be consistently extended to three labels. Consider now an assignment y r, z 7 . Clearly, there is nothing inconsistent about it, since there is no explicit constraint on S y, Z . But it cannot be consistently extended either to w or to x. Yet our path consistency algorithm will not catch this inconsistency because it was written only for binary relations. Now, if we were to extend our pathconsistency algorithm to 3-consistency then we would be forced to look at all pairs of variables and select values that can be consistently extended. This would result in the following relation pruning. Ryy Sr, b , Ryz r 9 , Rwy b, b , Rwz b, 9 , Ryz b, g Now, one can see that the value x b or x g cannot be consistently extended to Ry, and thus must be pruned. Likewise, for the other variables, and when we apply 2-consistency we get, Dy b , Dy 1 , Dy b , Dz 9 We can define generalized notions of arc consistency with respect to relations of higher arity as follows (Dechter, 2003). Given a CSP (X, D, C) with Rs C, a variable x S is said to be arc consistent relative to Rs, only if for every value of a D, there exists a tuple t Rg, such that x a is in that tuple. A relation Rs is said to be arc consistent ff all its variables are arc consistent. A relation can be made arc consistent by reducing the domains of its variables to those values that are specified in the relation. 9.4.3 Propagation Inferencing Relations Given a CSP (X, D, C), one can view the constraint propagation process as inferencing new constraints to get a new equivalent CSP