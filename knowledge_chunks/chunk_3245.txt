rint even prints the double quotation marks defining the string. Prini is the same as print except that the new-line characters and space are not provided (this is not true for all implementations of Common LISP). .>)(prirl (hello)) (print (hello))) (HELLOIIHELLO) 30 LISP and Other Al Programming Languages Chap. 3 We can avoid the double quotation marks in the output by using the printing function princ. It is the same as prini except it does not print the unwanted quotation marks. For example. we use princ to print the following without the marks, ->(princ "hello there") hello there "hello there' Princ eliminated the quotes, but the echo still remains. Again, that is because princ returned its argument (in a form that LISP could read), and, since that was the last tiling returned, it was printed by the read-evaluate-print loop. In a typical program, the returned value would not be printed on the screen as it would be absorbed (used) by another function. The primitive function terpri takes no arguments. It introduces a new-line (carriage return and line feed) wherever it appears and then returns nil. Below is a program to compute the area of a circle which uses several I/O functions ,, including user prompts. ->)detun circle-area I) (terpri) (princ "Please enter the radius: "I (setq radius (read)) (princ "The area of the circle is: "I (princ ( 3.1416 radius radius)) (terpri)) CIRCLE-AREA ->(circle'area) Please enter the radius: 4 The area of the circle is: 50,2656 Notice that princ permits us to print multiple Itenisn the same line and to introduce a new-line sequence we use terpri. The format function permits us to create cleaner output than is possible with just the basic printing functions. It has the form (format <destination> <string> ar I arg2 ...): Destination specifies where the output is to be directed, like to the monitor or some other external file. For our purposes, destination will always be t to signify the default output, the monitor. String is the de