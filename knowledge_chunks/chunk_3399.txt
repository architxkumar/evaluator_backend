ities for flavors including the execution of some methods just prior to or just after a main method. Special Purpoie OOS Languages A typical special purpose OOS language is ROSS (for Rand OOS) developed by the Rand Corporation for military battle simulations (Klahr et al. 1980, 1982). This system has been implemented in several dialects of LISP as an interactive simulation system which includes a movie generator and graphics facility. Visual representations can be generated as the simulation is running, and on-the-fly changes can easily be made to a program. U has been used to simulate both air and ground battles. Messages are sent to objects in ROSS with an ask" form having the following Structure. (ask <object> <message>) For example, to send a message to a tighter-base requesting that a fighter be sent to intercept a penetrator, the following message might be sent: (ask fighter-basal Send fighter2 guided by radar3 to penetrator2) In response to this message, a method associated with the fighter-base class would be evaluated and appropriate actions would then, be initiated through direct computations and embedded message transmissions to other objects. Object hierarchies which provide variable and method inheritance in much the same way as FLAVORS or Smalitalk can also be created. A simulation program in ROSS would be created in.'sjmilar manner to that of the example presented in the previous Section, but with a number of basic methods for simulation behaviors 164 Object-Oriented Representations Chap. B Simulator Moving object Fixedobject ch Znel // \ Red forcex Blue f Fghter Mitsile Radar \te Fighr base Penetrator Command Missile base launcher Figure 8.5 An example of a baffle dxx, hierarchy. already predefined. A typical class hierarchy for a battle simulation might be defined as the structure illustrated in Figure 8.5. 8.6 SUMMARY Object-oriented systems are useful in modeling many real-world situations in which real objects can be put in a one-to-one correspon