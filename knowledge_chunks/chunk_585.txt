 refrigerator door is opened, it must be closed within a certain time. A student planning for her examination might be told that every two hours of study must be followed by a break for half an hour. In the blocks world, one might require that there are never more than (say) two blocks on a given block. A trading agent might have to keep a minimum amount of the cash in hand at all times. A carpenter may need to ensure that applying paint should be preceded by applying a primer. An errant employee might be told to report at least once a day to his boss and may have to plan his day accordingly. Trajectory constraints introduce a new dimension of complexity in planning. In the following discussion, we confine ourselves to trajectory constraints with instantaneous actions for simplicity. The following trajectory constraints have been specified in PDDL3.0 (Gerevini and Long, 2005). The constraints may be specified in the problem description after the goal description in a field marked with :constraints . Given a domain D, a plan p, and an initial state , the plan 77 generates a trajectory (So, 0), (S4, 4), ..., (Sp, ty) . The plan 77 is a valid plan, if the trajectory satisfies the goal G. (So; 0), (S 4, 4), : (Sm th)? G The goal is a set of goal descriptions GD and the expression Se G is read as G is true in S (see Chapter 11 for more on logical expressions and their semantics. Each goal description GD is arrived at by possibly applying a modal operator on a goal description. The simplest possible goal description is a fluent. The other goal descriptions may be described in BNF as follows, (at end GD ) (always GD ) (sometime GD ) (within num GD ) (at-most-once GD :: GD ) (sometime-after GD GD ) (sometime-before GD GD ) (always-within num GD GD ) (hold-during num num GD ) (hold-after GD ) ... where the ... includes all existing goal descriptions. Given a plan trajectory (So, 0), (S4, 4), .... (Sp, f ) the meaning of the goal descriptors is described in Table 10.2. For il