o (A-Ge) Living Go (Dest) Loc Eat (Carnivere) Predatcr Read (A-Read) Human Go (Dest) Loc Read (O-Read) Book Eat - (O-Eat) Focd Go (Instr) Pub-Trans Given two SCGs, G and H defined on the same support, we can define an injective projection as follows (Mugnier, 1995). A mapping 77: G-H yields a graph 7G H, such that 7G is isomorphic to G, and for each concept c in G, Tre is a concept in mG (and H) where type(rrc) type(c). The SCG G is called the injective generalization of 7G. If Gis a query subgraph then the projection extracts all subgraphs in the knowledge base that are specializations of G. In general, the graph isomorphism problem is NP-complete. However, for simple conceptual graphs, one can devise polynomial time algorithms. The algorithm proposed in Angelova (2009) preprocesses the knowledge base to construct a finite state automaton that captures all possible queries that have answers in the knowledge base. The finite state automaton has a number of acceptance states with markers that represent the answer to the query. The words of the language accepted by the FSA constitute of (Angelova and Mihov, 2008), 1. all SCGs in the knowledge base, 2. all their conceptual subgraphs , and 3. all the injective generalizations of the above two. Consider the following CG for the sentence John took the subway to Coney island. Person: John Caco) Go Crest Town: Coneylsland FIGURE 14.43 The conceptual graph for John took a subway to Coney Island. The following are the subgraphs and their injective generalizations, which represent possible queries. 1. Go - the input (A-Go) Pexrson: John (Instr) Subway (Dest) Town: ConeyIsland 2. Person: John (A-Go) Go subgraphs 3. Go (Instr) Subway 4. Go (Dest) Town: ConeyIsland 5. Person: John (A-Go) Go (Instr) Subway . Person: John (A-Go) Go (Dest) Town: ConeyIsland 7. Subway (Instr) Go (Dest) Town: ConeyIsland 8. Person (A-Go) Go generalizations of star graphs 9. Living (A-Go) Go 10. Go (Instr) Pub-Trans 11. Go (Dest) Town 12. Go - (Dest) L