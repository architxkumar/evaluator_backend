this last step, replacement is Sec. 10.5 Partial Matching 201 possible only if the term does not contain the variable that is being replaced. This matching process is repeated until the two are unified or until a failure occurs. For the two predicates P. above, a disagreement is first found between the term f(a,x) and variable u. Since f(a,) does not contain the variable u, we replace u with f(a,x) everywhere it occurs in the literal. This gives a substitution set of {f(a,x)Iu} and the partially matched predicates P(f(o,x),y,y) and P(f(a,x),b.:). Proceeding with the match, we find the next disagreement pair, y and h. a variable and term, respectively. Again, we replace the variable y with the term b and update the substitution list to get {f(a,x)/u, b/y}. The final disagreement pair is two variables. Replacing the variable in the second literal with the first we get the substitution set {f(a,x)Iu,b/y,ylz} or, equivalently, {f(a,91u,b1v,b14. Note that this procedure can always give the must general unifier. We conclude this section with an example of a LISP program which uses both the open and the segment pattern matching variables to find a match between a pattern and a clause. (defun match (pattern clause) (cond ((equal pattern clause) t) ;return t if ((or (null pattern) (null clause)) nil) equal, nil :if not. ((or (equal (car pattern) (car clause)) not. ?x ;binds (equal (car pattern) ?x)l ;to single (match (cdr pattern) )cdr clause))) ;term,y ;binds ((equal (car pattern) 'y) ;to several (or (match (cdr pattern) (cdr clause)) ;contiguous (match pattern (cdr clause)))))) ;terms. Notice that when a segment variable is encountered (the *v). match is recursively executed on the cdrs of both pattern and clause or on the cdr of clause and pattern as v matches one or more than one item respectively. 10.5. PARTIAL MATCHING For many Al applications complete matching between two or more structures is inappropriate. For example, input representations of speech waveforms or vi