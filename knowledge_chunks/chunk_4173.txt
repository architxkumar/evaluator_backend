 to explore a path different from the one we have just shown. First we backtrack through node 3 by adding each of the predicates in PUTDOWN s DELETE list to the global database and deleting each of the elements of PUTDOWN s ADD list. After doing that, the database contains UNSTACK(A, B) 254 Artificial Intelligence Oe eam ONTABLE(B) CLEAR(A) A CLEAR(B) \ HOLDING(A) As we expected, this description is identical to the one we previously computed as the result of applying UNSTACK to the initial situation. If we repeat this process using the ADD and DELETE lists of UNSTACK, we derive a description identical to the one with which we started. Because an implicit statement of the frame axioms is so important in complex problem domains, all the techniques we look at exploit STRIPS-style descriptions of the available operators. Detecting a Solution A planning system has succeeded in finding a solution to a problem when it has found a sequence of operators that transforms the initial problem state into the goal state. How will it know when this has been done? In simple problem-solving systems, this question is easily answered by a straightforward match of the state descriptions. But if entire states are not represented explicitly but rather are described by a set of relevant properties, then this problem becomes more complex. The way it can be solved depends on the way that state descriptions are represented. For any representational scheme that is used, it must be possible to reason with representations to discover whether one matches another. Recall that in Part I] we discussed a variety of ways that complex objects could be represented as well as reasoning mechanisms for each representation. Any of those representations (or some combination of them) could be used to describe problem states. Then the corresponding reasoning mechanisms could be used to discover when a solution had been found. One representational technique has served as the basis for many of the planning syst