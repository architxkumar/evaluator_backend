 very little just the rules for determining legal moves and some simple control mechanism that implements an appropriate search procedure. Additional knowledge about such things as good strategy and tactics could of course help considerably to constrain the search and speed up the execution of the program. But now consider the problem of scanning daily newspapers to decide which are supporting the Democrats and which are supporting the Republicans in some upcoming election. Again assuming unlimited computing power, how much knowledge would be required by a computer trying to solve this problem? This time the answer is a great deal. It would have to know such things as: e The names of the candidates in each party. The fact that if the major thing you want to see done is have taxes lowered, you are probably supporting the Republicans. The fact that if the major thing you want to see done is improved education for minority students, you are probebly supporting the Democrats. The fact that if you are opposed to big government, you are probably supporting the Republicans. e Andsoon... These two problems, chess and newspaper story understanding, illustrate the difference between problems for which a lot of knowledge is important only to constrain the search for a solution and those for which a lot of knowledge is required even to be able to recognize a solution. 2.3.7 Does the Task Require Interaction with a Person? Sometimes it is useful to program computers to solve problems in ways that the majority of people would not be able to understand. This is fine if the level of the interaction between the computer and its human users is problem-in solution-out, But increasingly we are building programs that require intermediate interaction with people, both to provide additional input to the program and to provide additional reassurance to the user. Consider, for example, the problem of proving mathematical theorems. If 1. All we want is to know that there is a proof 2. The pr