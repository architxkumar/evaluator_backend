sponding LISP function -> (* (.'l. 95)50)32) 122 Each function call is performed in the order in which it occurs 'Arilhin the parentheses. Hut, in order to compute the sum, the argument (* (I 9 5) 50) must first be evaluated. This requires that the product of 50 and 9/5 be computed, sshich in turn requires that the quotient 9/5 be evaluated. The embedded function c 9 returns the quotient 1.8 to the multiply function to give (* 1.8 50). This is then evaluated and the value 90 is returned to the top (sum) function to give (-F 90 32). The final result is the sum 122 returned to the read-evaluate-print loop for printing. The basic numeric operations are +, -. , and I. Arguments may be integers or real values (floating point), and the number of arguments a function takes will. of course, differ. For example, + and * normally take zero or more arguments. while - and / take two. These and a number of other basic functions are predefined in LISP. Examples of function calls and the results returned are given in lahie 3.. In addition to these basic calls, some LISP implementations include mnemonic names for arithmetic operations such as plus and times. LISP tries to evaluate everything, including the arguments of a fiinctton. But, three types of.elements are special in that they are constant and always evaluate to themselves, returning their own value: numbers, the letter t (for logical true), and TABLE 3.1 PREDEFINED NUMERIC FUNCTIONS Value Function esit returned Remarks (+ 3 5 84) -20 4 takes zero or more arguments The sum of zero arguments is 0 ( t O 12) - 2 - lakes isso arguments i 2 3 4) 24 takes zero or more arguments The product of no arguments is I. and the product of I argument is the value of the argument 25 2> 115 takes two arguments. 22 LISP and Other Al Programming Languages Chap. 3 nil (for logical false). Nil is also the same as the empty list 0. It is the only object in LISP that is both an atom and a list. Since these elements return their own value, the foll