rder to ensure that the optimal cost solution is found. The argument for underestimating the actual cost is similar to the one presented for Branch Bound and A algorithms seen in Chapter 4. That is, as long as there is the possibility of finding a cheaper solution, the algorithm will continue searching even after one has been found. Before writing the algorithm for solving goal trees, let us cook up a small problem and investigate how search could progress, using a heuristic function. Let us say that we start with a goal G of estimated cost 45, and expand it to get two ways of solving it, one an OR arc and the other an AND arc as shown in Figure 6.7. Let the three successor nodes A, B and C have heuristic values as 42, 22 and 24 respectively. Let the three edges leading to them have costs 4, 3 and 2 respectively. Which node should the algorithm refine (expand) next? he 4S Figure 6.7 Which is the best node to expand next? Even though node B has the lowest heuristic value it is a part of a more expensive looking option. This is because it is a leaf on an AND (hyper) arc. The estimated cost of that solution is 22 3 24 3 52. The more expensive looking node A has an estimated cost of 42 4 46. Note that the choice is made on the basis of backed up values 46 and 52. Unlike the A search for optimal solutions, (paths) a node in the AO graph is not a representative of a solution. This is because solutions are not usually paths but subtrees, and a node may have an AND sibling (or a cousin) which also contributes to the solution with its own associated cost. Thus, looking at the heuristic value of a node by itself may not be useful. Even counting the costs of the edges leading to the node (like the g-values in A ) will not help, because the node only accounts for a part of the solution. Instead, we need to look at the total estimated cost of a solution. In the above example, the total estimated cost of the two options is 46 and 52 respectively. After every expansion by the algo