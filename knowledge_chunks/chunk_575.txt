 will be advanced to an instant beyond that deadline. If the event queue is empty, nothing more can be done. If the conditions for no-solution do not occur, the RTG is extended by advancing the time to the earliest event in its queue and the process continues till all goals are marked in. Observe that if at any point the algorithm returns no-solution, Sapa can abandon that node S and search elsewhere. When a relaxed temporal graph is returned, it can be used to devise various heuristic functions. The reader should keep in mind our discussion in Chapter 5 on the benefits of having more informed heuristic functions. If one wants to optimize the makespan of the plan found then one can use an admissible heuristic called max-span heuristic, which returns the duration it takes for the last goal to be achieved in the RTG. If one is not concerned with guaranteeing an optimal solution, then one could use a non-admissible heuristic function, sum-span, that adds up the durations for each goal in the RTG. Another measure that can be used to estimate the heuristic function is to measure the slack in the RTG, where slack is the difference in time when a goal was achieved and its deadline. All three of the heuristic functions that one can define, min-slack, max-slack, and sum-slack, that measure the minimum, the maximum and sum of the individual goal slacks are admissible with respect to the corresponding objective functions. The max-span and the slack based heuristics are concerned with makespan the total time required to execute the plan. The number of actions and their costs could also be relevant in evaluating a plan. To estimate these costs, Sapa extracts a relaxed plan from the RTG in a manner similar to the way a relaxed plan is extracted in FF. One can then define the sum-action heuristic that counts the number of actions in the relaxed plan, and the sum-duration heuristic that sums of their durations. However, both these heuristic functions are not admissible. When one is