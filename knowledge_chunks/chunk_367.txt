an a I x I ID t ! 1 t 0 1O FIGURE 8.22 After evaluating the child A, the root node gets an a value of 1. When it starts on move B, it sees a B value of 1. Since this is an upper bound, the node B does not need to be explored further, and an a cutoff takes place. where, a max a4, Ao, a3, ... , and B min B;, Bo, Bs, ..- When we are about to solve for a node J, we can propagate these bounds to the algorithm from its ancestors, and terminate the search if these bounds are crossed. Note that an Alpha node can only increase in value, and can only cross a B bound. If it does then the search below the Alpha node is discontinued, and a B cutoff takes place. Likewise, a Beta node can only cross a lower bound a, and can be pruned using an a cutoff. The two kinds of cutoffs are illustrated in Figure 8.23. V 1 B min (a, a...) A a max (B,, 8, ...) RKe--" WBsa acuol B If (BS a) Beutolt Sy Ww, AS ww 1 NSS. NS ASs ! VN (RS (RY SS ) FIGURE 8.23 The a cutoff is induced by an a-bound from a MAX ancestor below a B-node. The B cutoff is induced by a B-bound from a MIN ancestor below an a-node. The resulting algorithm known as the AlphaBeta algorithm is given in Figure 8.24 below. AlphaBeta(j, , B) 1 To return the minimax value of a node j 2 Intially -LARGE, and B LARGE 3 iff Terminal (j) 4 then return. e(j) S else if j is a MAX node then for i 1 to b j, is the j child of j 7 do a Max(x, AlphaBeta(j., B)) 8 if a2 B then return B Ey ifisb then return 10 else j is MIN al for ic ltob 12 do B Min(B, AlphaBeta(j., a, B)) 13 if 2 B then return 14 ifisb then return B FIGURE 8.24 The AlphaBeta algorithm searches the tree like Minimax from left to right. It passes two bounds a and 8 to each call, and continues searching, only if the node has a value within those bounds. The AlphaBeta algorithm is called initially with bounds a Large, and B t Large. As search progresses, these bounds come closer, and eventually converge on the minimax value of the tree. At any point, when it is recursively called w