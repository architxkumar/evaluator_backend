on there is no need to include it body. All operations required to compute the factorial of it are contained in the initial values and the update procedures. There is also a do* Construct which is the same as do. except the assignment of initial values is made to each var, sequentially before the next form is evaluated. In addition to the do and prog constructs for iteration, one may use a mop function. Loop has the simple form (loop <s-expressions -( where the s-expressions are evaluated repeatedly until a call to a return is encountered. - 4,- 34 LISP and Other Al Programming Languages Chap. 3 01 course, let and other functions can be embedded within the loop construct if local variables are nccdcd Recursion For many problems, recursion is the natural method of solution. Such problems occur frequently in mathematical logic, and the use of recursion will often result in programs which are both elegant and simple. A recursive function is one which calls itself successively to reduce a problem to a sequence of simpler steps. Recursion requires a stopping condition and a recursive step. We illustrate with a recursive version of factorial. The recursive step in factorial is the product of ,,.and factorial(it-l). The stopping condition is reached when n = 0. .'(defun factorial (n) (cond ((zerop n) 1) it I n (factorial Cn 1M))) FACTORIAL -(factorial 6) 720 Note the slopping condition on the second line of the function definition, and the recursive step on the last line. We present another example of recursion which defines the member function called newmemhcr. >(defun newmember let 1st) (cond ((null )st) nil) ((equal el (car 1st)) 1st) (It (newniember el (cdr ist)fi)( NEWMEMBER lithe atom e and list (a J, c d) are given as the arguments in the calf to newniember, c gets bound to ci and (a h ( d) is hound to lxi. With these bindings, the first cond test fails, since lxi is not null. Consequently, the second test is executed. This also fails since el, bound to c, does not 