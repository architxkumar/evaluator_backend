ct, DFID is the optimal algorithm (in terms of space and time) for uninformed search. But what about informed, heuristic search? Iterative deepening can also be used to improve the performance of the A* search algorithm [Korf, 1985a]. Since the major practical difficulty with A* is the large amount of memory it requires to maintain the search node lists, iterative deepening can be of considerable service. Algorithm: lterative-Deepening-A* 1. Set THRESHOLD = the heuristic evaluation of the start state. 2. Conduct a depth-first search, pruning any branch when its total cost function (g + A ) exceeds THRESHOLD. If a solution path is found during the search, return it. 3. Otherwise, increment THRESHOLD by the minimum amount it was exceeded during the previous step, and then go to Step 2. Like A*, Iterative-Deepening-A* (IDA*) is guaranteed to find an optimal solution, provided that A is an admissible heuristic. Because of its depth-first search technique, IDA* is very efficient with respect to space. IDA* was the first heuristic search algorithm to find optimal solution paths for the 15-puzzle (a 4x4 version of the 8-puzzle) within reasonable time and space constraints. 12.6 REFERENCES ON SPECIFIC GAMES In this chapter we have discussed search-based techniques for game playing. We discussed the basic minimax algorithm and then introduced a series of refinements to it. But even with these refinements, it is still difficult to build good programs to play difficult games. Every game, like every AI task, requires a careful combination of search and knowledge. Chess Research on computer chess actually predates the field we call artificial intelligence. Shannon [1950] was the first to propose a method for automating the game, and two early chess programs were written by Greenblatt et al. [1967] and Newell and Simon [1972]. Chess provides a well-defined laboratory for studying the trade-off between knowledge and search. The more knowledge a program has, the less searching it n