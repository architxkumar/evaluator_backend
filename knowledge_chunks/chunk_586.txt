old-after GD ) ... where the ... includes all existing goal descriptions. Given a plan trajectory (So, 0), (S4, 4), .... (Sp, f ) the meaning of the goal descriptors is described in Table 10.2. For illustration, the modal operators are applied on simple goal descriptions and w. A notion of time is used in some operators indicated by num . This refers to the index of the state in the trajectory, and not absolute time as used in durative actions. Table 10.2 The semantics of the modal operators Modal operator Condition to be satisfied 9 SE at-end ) SE (always 9) Wi0Sisn,SFO Gometime 9) Fi: 0 i n,S,F 9 7 7 (within t 9) Bi: 0Sisn,S, pandyst (at-most-once ) Wi: 0Sisn,ifS, p then F2j2iVk:1S KS , Sp pand Vk: k j, SE O (sometime-after 9 y) VisifS, then :i jsn,Se y (Sometime-before p y) VisifS, pthenj:0 j 1,S y (always-within to y) WirifS;F pthenFj:i jsn, Sj) yandg-4st (hold-during ; 4, ) Wi:hsi h. Seo (hold-after f g) Vi:t isn,S Some examples of constraints expressed in PDDL3.0 are given below. Sometime in the plan, block-17 must be on block-29 (:constraint (sometime (on block-17 block-29))) Only green blocks must be placed on block-29 (:constraint (always (forall (7b - block) (implies (on ?x block-29) (colour ?x green)))))) Every block must be picked up at least once in the plan. (:constraint (always (forall (?b - block) (sometime (holding ?x))))) We look at each of the above constraints and suggest some ways to adapt the Graphplan algorithm to handle them (Garwal, 2006). This approach requires that the planning problem be modified in a preprocessing phase, and also a few changes to the backward search phase of Graphplan. One would imagine though that as the planning problem becomes more and more complex, it would be desirable to adopt methods that reduce different kinds of problems to a common representation, for example constraint satisfaction, for which existing algorithms can be used. 1. The first two constraints g and (at-end ) are the STRIPS goals that have to be achi