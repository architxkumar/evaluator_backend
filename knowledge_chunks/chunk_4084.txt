lots as part of its built-in reasoning capability. In particular, we assume that it is capable of performing the following reasoning actions: Consistency checking to verify that when a slot value is added to a frame The slot makes sense for the frame. This relies on the domain attribute of the slot. The value is a legal value for the slot. This relies on the range and range-constraints attributes. Maintenance of consistency between the values for slots and their inverses when ever one is updated. e Propagation of definition values along isa and instance links. e Inheritance of default values along isa and instance links. manager color my-manager bats uniform-color Siot Class (set of sets) Pee-Wee-Reese Blue } Pee-Wee-Reese Right Smokey-The-Bear Brown Slot isa: Class instance : Class * domain : * range : * range-constraint * definition : * default: * transters-through : * to-compute : * inverse : * single-valued : manager instance : Siot domain : ML-Baseball-Team range : Person range-constraint : 2x {baseball-experience x.manager) default : inverse : manager-of single-valued : TRUE Fig. 9.9 Representing Slots as Frames, | 200 Artificial Intelligence my-manager instance : Slot domain : ML-Baseball-Player range : Person range-constraint : Ax (baseball-experience x.my-manager to-compute : Ax (x.feam).manager Single-valued : TRUE color instance : Slot domain : Physical-Object range : Color-Set transfers-through : top-level-part-of visual-salience : High single-valued : FALSE uniform-color instance : Siot isa: color domain : team-player range : Color-Set range-constraint : not Pink visual-salience : High single-valued : FALSE bats instance ; Slot domain : ML-Baseball-Player range : {Left, Right, Switch) to-compute : AX x.handed single-valued : TRUE Fig.9.10 Representing Slots as Frames, Il Computation of a value of a slot as needed. This relies on the to-compute and transfers-through attributes. Checking that only a single value is asserted for single-valued slots. This i