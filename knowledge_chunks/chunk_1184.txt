he state space, and on termination has actions prescribed for each node ne Gp . A partial solution graph G'p is a subgraph of G that contains exactly one action for each state in G". The algorithm maintains the best partial solution at all times, indicated by the action markers. A partial solution graph is a solution graph, if it has no nonterminal leaf nodes. The prescription of actions in the partial policy 7 : S ' A is akin to the markers that the AO algorithm maintains. In the forward phase, LAO follows the marked path and expands a non-terminal leaf state. A nonterminal leaf state is a leaf state that is not a goal state. Note that the leaf state cannot be a state that is already in Gp , which would be the case with loops. The set of nodes eligible for expansion is called the fringe of the graph G p. Expansion of the nonterminal leaf state is done by adding the hyper-edges corresponding to each action, and evaluating the heuristic values of the new nodes. If a successor is already in the graph Gp that is being constructed, that is there exists a loop, then it is not added again. The main difference between AO and LAO is that instead of using a simple backup rule that AO uses for cost revision, the LAO uses a dynamic programming procedure like Value Iteration or Policy Iteration. This is required because the expected cost of executing an action depends upon the probabilities of each edge in the hyper-edge being executed, and the presence of loops. The algorithm LAO adapted from (Hansen and Zilberstein, 2001) is described at a high level in Figure 17.38. In the algorithm, G is the graph implicitly rooted at the start state, and Gp represents the best partial policy found so far. This is equivalent to saying that Gp is the subgraph rooted at the start node and marked as the best choice at each node. In the forward phase, the algorithm picks a node from the fringe of the best partial solution and expands it (like in AO ). In the backward phase (lines 9-10), it adop