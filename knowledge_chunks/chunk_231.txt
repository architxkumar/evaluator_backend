er containing both nodes on OPEN and CLOSED. The next layer will contain a partially formed OPEN, while the preceding layer will have only CLOSED nodes. The current and the preceding layer will contain the boundary of the search, and are enough to prevent the search from leaking back. In addition, the divide and conquer strategy requires a RELAY layer around the halfway point, to which nodes on OPEN will hold a pointer to for path reconstruction. Before the search has crossed the halfway mark, the pointer will point to the Start node. These four layers are enough for search to progress without regenerating nodes in CLOSED. Figure 5.30 illustrates the four layers. Observe that Divide-and-Conquer Beam Search keeps a maximum of w elements in each of the four layers. Thus, its memory requirement is 4w, which is a constant amount! That means that using DCBS, one can search up to any depth using a constant amount of memory. As a corollary, it allows us to fix the beam width w as high as resources will allow. The only problem is that it is incomplete. Next, we look at an approach that allows Beam Search to backtrack and try other paths systematically, giving us a complete and admissible search algorithm. 5.10.3 Beam Stack Search Beam Stack Search (BSS) is essentially beam search with backtracking. One of the reasons for the poor time performance of IDA and RBFS is that they pursued only one path at a time. In some sense, they underutilised the space available to the algorithm. Beam Search allows one to pursue multiple candidates simultaneously, but like Hill Climbing, cannot switch paths midcourse, and is therefore incomplete. Divide and Conquer BFHS keeps four layers ( RELAY (OPEN and CLOSED) (cLosep SS (OPEN ) Beam Search FIGURE 5.30 Divide and Conquer Beam Search keeps four layers of constant width. Beam Stack Search (Zhou and Hansen, 2005) explores the search space systematically with a beam of width w. Like the Beam Search, it too may prune nodes inadmissibly, but it 