 Taker in 1958, which was to use logic as a vehicle for knowledge representation and commonsense reasoning. He also invented Lisp, the programming language of choice for Al practitioners, based on Alonzo Church s lambda calculus. An important feature of Lisp was that a program could build data structures of arbitrary size dynamically during execution, which one believed was a great asset for Al programming. An interesting property of Lisp is that programs and data have the same representations, which means that programs can treat other programs, or even themselves, as data and modify them. Soon there was talk of building (dedicated) Lisp machines, mostly out of Massachusetts Institute of Technology, and a small number were even built by companies like Symbolics, Lisp Machines Inc., Xerox and Texas Instruments. However, an Al winter had set in with the drying of funds in the late eighties, largely due to the large hype that Al projects had generated only to disappoint. Meanwhile, personal computers were growing by leaps and bounds, rendering Lisp machines, and even the language Lisp itself, to be a forte of a dedicated but small community. In 1965, Alan Robinson published the Resolution Method for theorem proving that brought all kinds of logical inferences into one uniform fold. This approach gave a tremendous fillip to logical theorem-proving research. The notion of declarative knowledge representation took hold, and the possibility of using logic as a vehicle for writing programs emerged. As opposed to procedural languages that specify the execution steps, logic programming requires the programmer to specify the relations between the different entities involved in the problem. Collaborating with Robert Kowalski in Edinburgh University, Alain Colmerauer at the University Il of Aix-Marseille at Luminy created the language Prolog in 1972. The idea of logic programming took off, mostly in Europe, and variants like Constraint Logic Programming, Parallel Logic Programmi