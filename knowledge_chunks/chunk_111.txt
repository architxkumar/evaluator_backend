roblem with climbing hills blindfolded is that one does not have a global view. We can only do local moves, and the best we can do is to choose the locally good options. If the hill we are asked to climb had a smooth surface then the algorithm will work well. However, mountainous terrain is seldom smooth, and one is more likely than not to end up in the situation depicted in Figure 3.9. Instead of reaching the highest peak, we might end up in a lower peak somewhere on the way. In other words, one has reached a maximum, but only one that is local. If the heuristic function used by Hill Climbing is not perfect then the algorithm might well find a local maximum as opposed to a global maximum. FIGURE 3.9 Stopping at a Local Maximum. 3.4 Local Maxima We look at an example problem where the choice of a heuristic function determines whether there are local maxima in the state space or not. The blocks world domain consists of a set of blocks on an infinitely large table. There can be only one block on top of each block. The problem is to find a sequence of moves to rearrange a set of blocks, assuming that one can only lift the topmost block from a pile, or keep a block only on the top of a pile. That is, each pile of blocks behaves like a stack data structure. The figure below illustrates a sample problem. A A lE ra - Gi C E e ; dD) p Fl Sas See Start Goal FIGURE 3.10 A blocks world problem. In the initial state, four moves are possible as shown in Figure 3.11 below. Either block A can be moved, or block E can be moved. The destination is either the other pile or the table. Let us see how two different heuristic functions guide our Hill Climbing search algorithm. The two functions (also described in (Rich Knight, 1990)) differ in the level of detail they look at in a given state. The first function h(n) simply checks whether each block is on the correct block, with respect to the final configuration. We add one for every block that is on the block it is supposed to be on, a