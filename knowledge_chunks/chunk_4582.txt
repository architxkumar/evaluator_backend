Menu ltem-1 SPro foo PROLOG also has a variable called the anonymous variable. This is represented by just an underscore (_). In a goal if information on a particular argument is not required then an anonymous variable could be used in its place. If you need to know only the color of a car and not its color from a program containing facts of the type car(Brand,Color) viz. car(maruti, white). cartfiat, black). then the goal - car(_,Color). will provide only the colors of the cars available in the fact base and not the car names. In short the goal could be translated into the English query - Find only the color(s) of the car(s). 25.6 CONTROL STRUCTURES In PROLOG it is possible to order a set of rules in two different ways. Examine the flow in the following program: p:- a,b,c. pe def. This means that p is true if either (a and b and c) is true or (d and e and f ) is true. The comma as mentioned earlier implies an and. The same rules could be reordered as p:- a,bodef. without changing the logical meaning. PROLOG also allows an if then control structure. The -> and ; together form the if_then control structure. Thus in a:- b -> ;d. the right hand side of the rule is interpreted as If b is true then verify the truth of c else find that of d. 25.7 ARITHMETIC OPERATORS Some of the main arithmetic related predicates are shown in Table 25.1. PROLOG - The Natural Language of Artificial Intelligence 501 AERA ETAT CERIN Table 25.1 Some Arithmetic Operators in PROLOG Predicate Functionality </2, >/2 Expression less than, greater than =: 2/2, =\=/2 Expression equality, inequality is/2 Expression evaluator seed/1 Seed the random number generator An arithmetic expression can take any of the following forms: (i) A number - could be an integer or a floating point. (E.g. 45) (ii) A list wherein the elements are numbers. (E.g. (55, 45, 40]) (iii) A function represented by a compound term wherein the functor denotes a function predefined by the compiler and whose argument is itself an ex