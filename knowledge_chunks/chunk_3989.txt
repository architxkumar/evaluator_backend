erpreter. As this chapter has progressed, we have seen a trend toward explicitly representing more and more knowledge about how search should proceed. We have found it useful to create meta-rules that talk about when to apply other rules. Now, a production system interpreter iaust know how to apply various rules and meta-rules, so we should expect that our interpreters will have to become more complex as we progress away from simple backward-chaining systems like PROLOG. And yet, moving to a declarative representation for control knowledge means that previously hand coded LISP functions can be eliminated from the interpreter. In this sense, the interpreter becomes more streamlined. SUMMARY In this chapter, we have seen how to represent knowledge declaratively in rule-based systems and how to Teason with that knowledge. We began with a simple mechanism, logic programming, and progressed to more complex production system models that can reason both forward and backward, apply sophisticated and efficient matching techniques, and represent their search control knowledge in rules. In later chapters, we expand further on rule-based systems. In Chapter 7, we describe the use of rules that allow default reasoning to occur in the absence of specific counter evidence. In Chapter 8, we introduce the idea of attaching probabilistic measures to rules. And, in Chapter 20, we look at how mile-based systems are being used to solve complex, real-world problems. The book Pattern-Directed Inference Systems [Waterman and Hayes-Roth, 1978] is a collection of papers describing the wide variety of uses to which production systems have been put in AI. Its introduction provides a good overview of the subject. Brownston et af. [1985] is an introduction to programming in production rules, with an emphasis on the OPSS programming language. EXERCISES 1, Consider the following knowledge base: Vx: Vy : cat(x) A fish(y) > likes toeat(x,y) Wx : calico(x) > cat(x) Vx 1 tuna(x) fish(x) tuna(Charlie) 