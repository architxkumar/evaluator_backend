e Best First Search algorithm? How much does it improve upon the uninformed search methods seen in Chapter 1? 3.2.1 Completeness Best First Search is obviously complete, at least for finite domains. The reasoning is straightforward. The only change we are making is in the ordering of OPEN. It still adds all unseen successors of a node to the list, and like the earlier search algorithms, it will report failure only after OPEN becomes empty. That is, only when it has inspected all the candidate nodes. Note that Best First Search is systematic too, in the sense that it will inspect all nodes before giving up. For infinite state spaces, the completeness property will depend upon the quality of the heuristic function. If the function is good enough, the search will still home in on the goal state. If the heuristic function yields no discriminating information (for example if h(n) 0 for all nodes n), the algorithm will behave like its parent algorithm. That is, either DFS or BFS, depending upon whether it treats OPEN like a stack or a queue. Let us discuss the quality of the solution before looking at complexity. 3.2.2 Quality of Solution So far we have only talked about the quality of the solution in terms of its length, or the number of moves required to reach the goal. With a simple example shown in Figure 3.5, we can see that it is possible that Best First Search can choose a longer solution, in terms of the number of hops. This may happen if the heuristic function measures the difference in terms of some metric which does not relate to the number of steps. Even when we look at other measures for quality, it will be possible to construct examples for which the algorithm picks a sub-optimal solution. This happens mainly because the algorithm only compares two states by estimating the distance to the goal, without taking into account the cost of reaching the two states. Thus, if two states have the same heuristic value, but one of them was more expensive to achieve, the