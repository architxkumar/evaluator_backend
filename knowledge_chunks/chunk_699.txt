 B , A B C D , and A B C respectively. The circular node is also known as the dotted pair it child points to the head of the list and the right child to a list that is the tail of the given list. iternal nodes are also called dotted pairs (Left.Right) or cons pairs (cons Left Right). The left elem he list and the right element is a list that is the tail. The right element may be empty. We will use the it notation in which nil is another way of representing an empty list (). A B (cons A (cons B nil)) A B C D (cons A (cons B (cons (C (cons D nil)))) A B C (cons (cons A (cons B nil)) (cons C nil)) ic programming a program to append two lists is basically a definition of what it means to append icate append(X, Y, Z) is true when Z is the result of appending lists X and Y. The following axioms cc append relation. VX append(nil, x, x) VxvyVzvVc (append(x, y, z) D append(cons(c, x), y, cons(c, Z))) 1 in clause form with variables standardized apart may be written as, (append () ?z ?z) ( (append ?x1 ?X2 ?y)) V (append (cons ?c 7x1) ?Xo (cons ?c ?y) two clauses represent a program to append two lists! to this program may be made by specifying a goal. For example, we could ask whether append( is and that ) is true or not? . We could also plug in variables to ask queries like 3x append( A B , : Xx append( A B , C D , x). The last query corresponds to the standard use of an append program, b allows us more flexibility. A derivation for the query 3x append( A B , C D , x) accompanied with ar is shown in Figure 12.20. 1 Q ?z 22) ( (append ?x; 2x2 ?v) v (append (cons ?c ?x,) v (cons ?c ?,)) Af na ca : Sf (append (cons A (cons B()) (cons C (cons D()) ?x) ) V (Ans' ff 2c A, 2x, (cons 2x2 (cons C (cons J J 2x (cons A ?y;) ?y 4(-(append (cons B ()) (cons C(cons DQ) ?v;)) v (Answer (cons A ?: (cons C (co derivation on Horn clauses can be seen as a backward chaining process on the set of rules. A g that we want to show to be true. If the goal exists as a fact then it is true by definiti