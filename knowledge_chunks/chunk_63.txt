ms the situation, taking the solver to a new state. Problem solving using search involves exploring, by a process of trial and error; and finding the sequence of moves that will take the solver to the desired state. Chapter 2 introduces the basic procedures for exploring the search space, and discusses the complexity of search algorithms. Chapter 3 introduces heuristic functions and heuristic search. It also introduces greedy search methods. Chapter 4 looks at randomized approaches to search and discusses some popular optimization techniques. We also look at emergent systems. Chapter 5 extends the heuristic search algorithms of Chapter 3 to find optimal solutions. It also describes variations that have a lower space requirement at the expense of increased time complexity. Chapter 6 moves away from state space search and looks at problem decomposition and rule-based systems. Chapter 7 looks at automated planning methods in which the moves are described as planning operators. The basic planning methods, including plan space planning, are covered. Chapter 8 is devoted to game playing in which the problem solver has to contend with the moves of an adversary. We focus on board games like chess. Chapter 9 introduces the alternative formulation of constraint satisfaction problems. We study the algorithms for constraint propagation and look ahead and look back methods in search. Chapter 10 discusses the advanced planning algorithms that were developed in the last decade of the twentieth century. It also looks at richer planning domains in which actions have durations, along with some real world applications. Solving problems from first principles has its advantages. The principal one being that one is solving the given problem. However, this approach is fraught with computational pitfalls. Every trial-and-error search method has to contend with a danger lurking in the deep. That deeper one searches the greater number of possibilities one has to consider, not unlike the mons