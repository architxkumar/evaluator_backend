f (sound) rules, and a desired sentence, a proof is a seq s culminating in the desired sentence. In a proof, each sentence is either a premise, or is generate yn of some rule. A proof for the above example is given below. Traditionally the justification of each alongside. PAQ) premise 2(P R) premise 3 ( A ST) premise 4(-QVS) premise SIP, simplification gjQ Ct, simplification TRB, modus ponans sls sss, disjunctive syllogism ? Q(RAS) CL? 8, conjunction fof 8; modus ponens ind of a proof construction process is called natural deduction and owes its early development to The reader would have noticed the similarity of the proof with a plan (Chapter 7). A rule of inference operator with only positive effects. The similarity extends to finding proofs as well. Some of the algo ans can be applied to the finding proofs as well. In fact the backward search algorithms can be appl ily, because rules of inference, unlike planning operators, have only positive effects. The algorithm 2r 6 on problem decomposition can also be applied to finding proofs, both in the forward and the Consistency nportant that one is dealing with a set of consistent statements. This means that both a statemer should not be present in the set. This is because if both are present then any arbitrary statemen , can be proved as illustrated below. 1, simplification 3hPp ft simplification 4iPVZ PR addition Bo A, 3, disjunctive syllogism Z is an arbitrary statement this would mean that our system is not sound. Substitution f inference allows one to add a new sentence to the database . In contrast one can define : on that allows one to replace one sentence with another. This is possible when one sentence is it to another. As an example, let us look at the following equivalence. (a B) (7a V 8)) above equivalences iautology, then the sentence (a 8) will always take the same truth valu (na V B). Hence, either of the two could be replaced by the other without any loss. We can verify ice is a tautology by constructin