ank and Riesbeck, 1981)). The conceptualizations are expressed in Conceptual Dependency. The variables with an prefix are either roles or props. El: Customer enters shop MI: Customer PTRANSS to inside Shop a E3: Customer asks Shopkeeper M3: Customer MTRANS to Shopkeeper 7 Y 4: Shopkeeper replies MS: Shopkeeper MTRANSs to Customer E2: Customer goes to shelves M2: Customer PTRANS to Shelves x ES: Customer inspects object MS: Customer LOOKS-AT to Object y E6: Customer moves object to basket M6: Customer PTRANS Object to Basket c VY i Md Sustomer goes to counter , ES: Customer gives card to shopkeeper Customer PTRANS to Counter : Customer ATRANS Card (0 Shopkeeper ard on Reader ES: Customer signs slip M8: Customer PTRANS Pen on SIip ES: Customer leaves the shop M8: Customer PTRANSs from Shop FIGURE 14.11 A shopping Script. Each episode written in English has a main conceptualization expressed in the Conceptual dependency theory. Like Frames, Scripts are a mechanism for chunking and generating expectations while listening to language utterances. The moment one hears of someone wanting to buy something, or someone going into a shop, or someone having been shopping, one can retrieve the shopping Script. This will now serve as the structure into which subsequent utterances can be expected to match. Richard Cullingford (1977; 1981) wrote the program called Script Applier Mechanism (SAM) that implemented Script-based story understanding. The program received input from the English Language Interpreter (ELI) (Riesbeck, 1975) (also see Chapter 13) and gave its output to a program called BABEL an English generator (Goldman, 1975) that took CD conceptualizations as input. SAM itself was concerned only with Script application as illustrated in Figure 14.12, where the conceptualizations generated are depicted schematically. Given that a Script has been retrieved from memory and instantiated, the conceptualizations generated from the input sentences should match the corresponding co