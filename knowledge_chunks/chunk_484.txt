a leaf dead end, while the latter marks the constraints that participate in a conflict with any value of the current variable. As it tries different values b CED,4,1, it marks all the (variables in the) constraint that the value x,., 6 was in conflict with. This set of variables called the Earliest Minimal Conflict (EMC) set is remembered as the set of variables that conflicted with some value from Dx 1. Observe that the EMC set is augmented, only if there is an actual conflict which is better than the conservative GraphBackjumping that assumes that any connected variable is a culprit. However like GraphBackjumping, it remembers the set of target variables, so that when the current variable is an internal dead end it needs to backtrack from, it can jump back safely using this target set augmented by the targets of variables it has jumped back from. The target set 7; for each variable is recorded in the forward phase, and used in the backtracking phase to identify safe variables to jump back to. This is better than Gaschnig s Backjumping which had no such memory of target variables and was forced to take only one step back chronologically after the first jump from the leaf dead end. CDBackjumping (X, D, C (Cy, Coy 1 Cp)) 1 Ae (()) 2 iel 3 De D, 4 T () i) while 1 Sign do a, SelectValue-CDBJ (D, , A, C, i, 7.) 7 af a, null 8 then iCurrent i g i Latest(T,) 10 T. T. VU (Tecurrene Predecessors(X,)) 11 A JumpTail(A, i, iCurrent) 12 else 13 A Cons(a,, A) 14 zteidel 15 afign 16 then D, D, 17 Tt - () 18 xeturn Tail (Reverse (A)) SelectValue-CDBJ (D, , A, C, i, T,) 1 while not empty(D, ) 2 do a; Head(D: ) 3 De Tail (D. ) 4 conflicting false S kel while k i and not conflicting 7 if Consistent(SubLabel(A, k), x; a.) 8 then g kKek il 10 else 11 conflicting true 12 3 EMC(SubLabel A, k), x, ;) 13 T TU Sj 14 if not conflicting then return a; 15 return null FIGURE 9.45 The main procedure of CDBackjumping is same as GraphBackjumping, maintaining a set 7; of target variables to jump ba