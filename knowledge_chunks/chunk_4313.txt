ve a and Q makes move c. Of course, no one of the agents can force such a dual move. Each must make its own decision independently. In this case, for example, P should choose move a (rather than b, even though the best case for P included move b). Why? The answer is that P should assume that Q will behave rationally. In this matrix, the c column dominates the d column for Q, by which we mean that in every row, the payoff for Q is higher in the c column than in the d column. Thus Q can be predicted to choose c, and P should plan accordingly. Given that Q will choose c, P sees that it does better to choose move a than move b. We can now view our discussion of game-playing programs (Chapter 12) from a different perspective, that of noncommunicating agents trying to solve their own goals. Both payoff matrices and tree-search algorithms can be generalized to more than two players (e.g., Korf [1989]), but there are some important differences. In board games, players usually take turns making moves, whereas payoff matrices model the kind of simultaneous decision making common in the real world. Also, games are usually zero-sum, meaning that one player s gain is another player s loss. Payoff matrices are sometimes zero-sum, but need not be. See Genesereth et al. [1987] and Rosenschein and Breese [1989] for more substantial discussions of operations on payoff matrices. We wiill revisit the concept of agents again in Chapter 25 and discuss how they can be realized using PROLOG. 1 5 Parallel and Distributed Al 341 16.3.2. Communication: Blackboards and Messages The specific communication architectures that have been proposed to support distributed reasoning fall into two classes with respect to communication structure: Blackboard systems, in which communication takes place through a shared knowledge structure called a blackboard. Modules can post items on the blackboard, and they can read and act on messages that are posted by other modules. e Message-passing systems, in which