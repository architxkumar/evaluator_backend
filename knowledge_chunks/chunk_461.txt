. 1. 5-consistency is applied to the variable x5 and the relation R4234 is inferred as R1234 (b, b, b, b) 2. 4-consistency is applied to the variable x4 and the relation R423 is inferred as R123 (b, b, b) 3. 3-consistency is applied to the variable x3 and the relation R49 is inferred as Ri2 (6, b) 4. 2-consistency is applied to the variable x2 and the relation R, is inferred as Ry b Observe that no domain is pruned explicitly, except that the value of variable x, is restricted to b because of R;. Subsequently, because of the inferred domains, only the value b is selected for all other variables, in a backtrack free manner. See also Problems 14 and 15 for more examples of adaptive consistency. 9.5.4 Minimum Width Orderings It is clear that finding an ordering with the minimum induced width is beneficial from the complexity perspective. It turns out that while finding the minimum width can be done easily, finding a minimum induced width ordering is an NP-complete problem. The following greedy algorithm yields a minimum width ordering of the nodes of a graph. The algorithm constructs the ordering from the last to first, at each stage choosing a variable with the smallest number of neighbours in the constraint graph, and removing it along with its edges from the graph. The algorithm is depicted in Figure 9.28. It returns a list which captures ordering of the nodes. Observe that the index k in the loop is not used. The for loop is only suggestive of the fact that the order is constructed last to first. One could have used a while or repeat-until loop as well. MinWidth (G (V v, .., Vy , )) 1loe() 2 for k n downto 1 3 lowestDegree RemoveLowestDegreeNode (G) 4 Eee (x, y) x lowestDegree or y lowestDegree 5 O cons(lowestDegree, 0) return O FIGURE 9.28 The algorithm MinWidth takes a graph with N vertices and returns a minimum width ordering of the vertices. We assume a function RemoveLowestDegreeNode(G) finds the vertex with the lowest number of edges emanating from it, and re