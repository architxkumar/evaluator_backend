o be a minimal length path. This process is illustrated in Figure 9.11. An algorithm for the branch-and-bound strategy which uses a queue data structure to hold partial paths developed during the search is as follows. BRANCH-AND-BOUND SEARCH 1. Place the start 'node of zero path length on the queue. 2. Until the queue is empty or a goal node has been found: (a) determine if the first path in the queue contains a goal node. (b) if the first path contains a goal node exit with success, (c) if the first path does not contain a goal node. 182 Search and Control Strategies Chap. 9 Figure 9.11 Branch-and-bound search of a tree, remove the path from the queue and form new paths by extending the removed path by one step, (d) compute the cost of the new paths and add them to the queue, (e) sort the paths on the queue with lowest-cost paths in front. 3. Otherwise, exit with failure. Always extending the lowest-cost path in branch-and-bound search insures that a lowest-cost path will be found if one exists.. Of course, this is at the expense of computing and remembering all competing paths. We next look at a special case of branch-and-bound search which estimates the total cost to a goal node, and .elects the least cost path at each stage in the search. Optimal Search and A* The previous heuristic methods offer good strategies but fail to describe how the shortest distance to a goal should be estimated. The A* algorithm is a specialization of best-trst search. It provides general guidelines with which to estimate goal distances for general search graphs. At each node along a path to the goal, the A* algorithm generates all successor nodes and computes an estimate of the distance (cost) from the start node to a goal node through each of the successors. It then chooses the successor with the shortest estimated distance for expansion. The successors for this node are then generated. their distances estimated, and the process continues until a goal is found or the search ends in f