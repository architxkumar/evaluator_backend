 Az, and such that A, terminates without expanding node L. Since Az has picked node L, AL) f (S) from (5.4) That is 8y(L) hy(L) f (S). or ho(L) Sf (S) - 8(L) (5.5) Now, since A, terminates without picking node L, S (S) Sf, because otherwise A, would have picked L or F (S) 81(LZ) y(Z) or F (S) BL) hy (Z) because g,(L) go(L) since A; has seen all nodes up to depth k seen by Az, and would have found an equal or better cost path to L. We can rewrite the last inequality as, I (S) - 82(L) S hyZ) (5.6) Combining (5.5) and (5.6), we get, ho(L) s hy(L) which contradicts the given fact that ho(n) h,(n) for all nodes. The assumption that A terminates without expanding L is false, and therefore Az must expand L. Since L was an arbitrary node picked at depth k 1, the property P is true for depth k 1 as well. Thus, by induction for all nodes n, the property P is true. That is, For all nodes n, expands(n, Az) expands(n, A,) q.e.d. The search space explored by the two functions is illustrated in Figure 5.18. ; o0000000 eee 9.000 2000, 6 fe) re) fe) Oo Goal Start 6 26 fe lo 0000000000000 FIGURE 5.18 Search spaces for A1 and A2 when h2(n) h1(n). 5.6.1 The Monotone Property The monotone property or the consistency property for a heuristic function says that for a node n that is a successor to a node m on a path to the goal being constructed by the algorithm A using the heuristic function h(x), h(m) h(n) S kQn, n) (5.7) That is, the heuristic function is such that it underestimates the cost of every segment individually along the way. Moving from node m to n, the reduction in heuristic value is less than the cost k(m, n) incurred from m to n. Of course, this would be true, if node n were to be a bad successor of m, going for example in the opposite direction. The monotone property says that even if m and n were to be on an optimal path, this is true. Given that we started from node S. we can rewrite the above inequality and add the term g(m) to both sides to get, h(m) g(m) s k(m, n) h(