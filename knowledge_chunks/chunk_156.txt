e i tour looks like (np, nj, Ny). The algorithm then performs (n 2) merges, at each stage removing two edges from two cycles to npand adding an edge to connect the two hanging nodes. Of the four combinations of edges that can be removed and replaced, the algorithm chooses the one that gives maximum savings in combined tour cost. Figure 4.14 below illustrates the algorithm. FIGURE 4.14 The Savings Heuristic starts with (n 1) tours of length 2 and performs (n 2) merge operations to construct the tour. It has been shown (Ong and Moore, 1984) that the Greedy Heuristic produces tours at most (1 log(n)) 2 longer than the optimal tour, and the Savings Heuristic at most twice of that. In practice, however, the Savings Heuristic has empirically produced better tours. The following tours from the DIMACS Webpage (Figure 4.15) illustrate typical performances of these heuristic algorithms. Greedy tour Nearest neighbour tour Savings tour Optimal tour FIGURE 4.15 Tours found by some heuristic constructive algorithms. Figure taken from http: www. research. att.com dsj chtsp 4.4.2 Perturbation Methods for the TSP Search methods that operate in the solution space can be easily applied to TSP problems. They work on complete tours, and the neighbours of a search node are tours obtained by perturbing the given tour in some way. In the path based representation of a tour, a given tour can be modified by exchanging any two cities in the tour, as shown in Figure 4.16. For example, cities 4 and 5 can be exchanged in (2, 3, 4, 1, 7, 6, 5, 8, 9) to give (2, 3, 5, 1, 7, 6, 4, 8, 9). We can call this the 2-city-exchange move. For a tour of N cities, this generates C. neighbours for any given tour. We can also exchange more than two cities to design a neighbourhood function k-city-exchange. Notice that if we remove 3 cities from the tour, we can put them back in (3!-1) 5 other different ways, thus giving us C3 (3!-1) neighbours for any given tour. In general, as k increases, the neighbourhood fu