SS searches in a best first manner, and explores an even smaller part of the tree, visiting each node once. The value of any given strategy for MAX is the minimum of the values of the leaves in that strategy. This is because the strategy freezes the choices for MAX, and we assume that MIN will play perfectly. Thus, if S is a strategy then, VU(S) min V(L;) where L; is a leaf in the strategy S This means that VU(S) s V(L;) for any leaf L; in the strategy S. In other words, the value of a strategy for MAX will be equal to or less than the value of any given leaf in the strategy. That is, the value of a leaf node is an upper bound on the value of any strategy that it belongs to. For example, the leaf with value 10 in Figure 8.27 belongs to the two strategies, S; and S2 depicted in Figure 8.28 below, and is an upper bound on both the strategies. i rN fe eo a ae ia f f 4 CC FIGURE 8.28 The node with value 10 belongs to two strategies shown in straight lines (S;) and thick dotted lines (S2). Thus, the value of any given node is an upper bound on a set of strategies containing the node, and in fact any given node defines a cluster or set of strategies. We can also think of a node as representing a partial solution, or a partially developed strategy that can be extended in various ways. This represents a cluster of strategies and as more detail is added to the partial strategy, it becomes more refined, representing a smaller set, till eventually it becomes a single, fully refined strategy. SSS : An Example If we can start the search with a set of nodes covering all the available strategies, and refine the one with the highest upper bound then when a fully refined strategy has a higher value than the other partial strategies, the algorithm can terminate. The procedure for finding nodes that will cover all strategies is like the one for constructing a strategy, only the choices are reversed. For MAX nodes, we select all choices, because we want to cover all strategies. For MIN