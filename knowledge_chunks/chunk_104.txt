n by replacing the line, OPEN append (NEW, tail(OPEN)) with OPEN sort, (append (NEW, tail(OPEN))) In practice, though, it would be more efficient to implement OPEN as a priority queue. In addition, one has to make the changes to the search node representation to include the heuristic value, and the consequent changes in the other functions. These changes are left as an exercise for the reader. The following figure illustrates the progress of the algorithm on an example problem. The graph in Figure 3.4 represents a city map, where the junctions are located on a two dimensional grid, each being 1 km. A path from the start node S to the goal node G needs to be found. The search uses the Manhattan distance as the estimate of the distance. The graph depicts the nodes on CLOSED with double circles, and the nodes on OPEN with single circles, at the instance when the algorithm terminates. Both the sets of nodes are labelled with the heuristic values. The labels near the nodes show the order in which the nodes are expanded. Note that the heuristic function initially takes the search down a path that is not part of the solution. After exploring nodes labelled 2, 3 and 4 in the search order, the search abandons them and goes down a different path. This is characteristic of a heuristic search, and happens because the heuristic function is not aware of the entire roadmap. It only has a sense of direction. Perhaps, in this example, there is a river on the way without a bridge at that point. The search then has to explore an alternate route. The back pointers on the edges point to the parent nodes, and the thick edges with back arrows show the path found by the search. FIGURE 3.4 Best First Searches has a sense of direction, but may hit a dead end too. What about the performance of the Best First Search algorithm? How much does it improve upon the uninformed search methods seen in Chapter 1? 3.2.1 Completeness Best First Search is obviously complete, at least for finite domains. T