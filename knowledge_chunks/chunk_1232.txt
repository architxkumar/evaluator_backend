he hypothesis space and find a hypothesis that matches the given training data. We look at two algorithms described by Mitchell (1997) that look at the training examples and navigate the hypotheses space that forms a partial order. The algorithm Find-S begins searching at the infimum of the partial order. That is, it initializes the candidate hypothesis to , , ..., O . Then, it inspects the training set elements one by one and does the following. If the element does not belong to the target concept then it does nothing. If the element belongs to the target concept, then for each attribute it does the following. m If the hypothesis has for that attribute, it replaces it with the actual value in the element. a If the hypothesis has a value X and the same value occurs in the element, it does nothing. a If the target function has a value X and the element has a value Y X then it replaces X with ? . The algorithm is described in Figure 18.8. It accepts as input the set of training examples, the identity of the class label in the training examples, and the number of attributes available in the hypothesis schema. It begins with the most specific values of each attribute and inspects all positive training examples one by one. The notion of a match is defined as follows. A value of an attribute in a training instance matches the corresponding value in the hypothesis, if the latter is the same or more general. In our example, there are only two levels of generalization, from to a specific value, and from the specific value to 2 , but the algorithm can be generalized to deal with more levels. Pind-S (Training Set: T, Target Concept: C, Length of Element: K) 1h e O, S, ..., O 2 for each teT 3 ifteec instance t is labelled yes for class C 4 then for k 1 to K 5 If h(K) 6 then h(K) t(K) 7 else if h(K) t(X) 8 then h(K) ? 9 return h FIGURE 18.8 The procedure FIND S begins with the most specific hypothesis in the hypotheses space. For every positive training example it sees for the t