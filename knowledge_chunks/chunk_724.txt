o a large extent domain dependent, and is generally referred to as knowledge engineering. In this chapter and the next, we look at some general principles that can guide the choice of our predicates, and the reasoning patterns that we can adopt while building real systems. We look at two streams of reasoning that reification allows us. One is the ability to reason about actions explicitly. We shall look at both a logical approach with the event calculus and an experiential approach with structured knowledge (partly in the next chapter). The second, dealt with in the next section, is the possibility of evolving a uniform representation scheme based on triples that will allow us to describe arbitrary relations. 13.3 RDFand the Semantic Web Consider the following set of predicates and the English sentences they are to presumably be interpreted as Hit(Azizi32, Anuun12) : Azizi hit Anuun Hit(Azizi32, Anuun12, Oct 12) : Azizi hit Anuun on October 12 HitLoc(Azizi32, Anuun12, Paris) : Azizi hit Anuun in Paris HitInstr(Azizi32, Anuun12, : Azizi hit Anuun with a Stick Stick) One can construct other variations and combinations of such statements. Observe that the predicate Hit in the first and the second instances are different, because they are of different arity. Defining different predicates for the different combinations of things one wants to assert is not only cumbersome; it also increases the inference load on the reasoning system. One will need rules like, VxV Wz (Hit(x, y, Z) D Hit(x, y)) to be able to ask queries like Who did Azizi hit? assuming that the answer extracting routine, is programmed to handle the consequent in the implication. There are other issues with the above formalizations as RUS Hie xample is Stick a constant or a variable of a certain type? That is, is one talking of a specific object in the domain (mapped to by the constant Stick ) or a generic one? If it is the latter, and the phrase a stick certainly suggests so, then FOL would require us to st