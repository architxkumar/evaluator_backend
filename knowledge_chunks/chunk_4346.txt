 were used to describe block structures, and an isa hierarchy was used to de-scribe relationships among already known objects. A matching process was used to detect similarities and differences between structures, and hill climbing allowed the program to evolve a more and more accurate concept definition. This approach to structural concept learning is not without its problems. One major problem is that a teacher must guide the learning program through a carefully chosen sequence of examples. In the next section, we explore a learning technique that is insensitive to the order in which examples are presented. 17.5.2 Version Spaces - Mitchell [1977; 1978] describes another approach to concept learning called version spaces. The goal is the same: to produce a description that is consistent with all positive examples but no negative examples in the training set. But while Winston s system did this by evolving a single concept description, version spaces work by maintaining a set of possible descriptions and evolving that set as new examples and near misses are presented. As in the previous section, we need some sort of representation language for examples so that we can describe exactly what the system sees in an example. For now we assume a simple frame-based language; although version spaces can be constructed for more general representation languages. Consider Fig. 17.7, a frame representing an individual car. Learning 359 Car023 origin : Japan manufacturer: Honda color : Blue decade : 1970 type: Economy Fig. 17.7 An Example of the Concept Car Now, suppose that each slot may contain only the discrete values shown in Fig. 17.8. The choice of features and values is called the bias of the learning system. By being embedded in a particular program and by using particular representations, every learning system is biased, because it learns some things more easily than others. In our example, the bias is fairly simple e.g., we can learn concepts that have to do with car ma