lines an algorithm to add a new case and its associated conversation to the case base. y y Case Case 2 Case 3 Ass A Ay y A Case Case 5 Case 6 Case 7 Case 8 Case 9 Case A FIGURE 15.8 In conversational CBR, cases are stored as the leaves of a tree whose internal nodes are questions. Retrieval involves traversal from the root to a leaf navigated by the answers to the questions provided by the user. ConversationalRetrieval (tree lon Reot(tres) while not LeafNede(n) do Ask Question in Nede n Let Abe che set of answers Accep response R from user, including don know if REA then return set of leaves kelow Node n else Let nede m child(n) such that edge(n,m) is lakeled with VInuUBwn ire) nen 1 return nm FIGURE 15.9 The retrieval in conversational CBR is done by traversing the indexing tree, based on user responses. If the user fails to give a response that labels an edge to a child, the algorithm returns the leaves under the subtree, rooted at the node containing that question. If the answers terminate at an internal node then all the cases in the subtree could be retrieved. But the order in which the questions are posed is fixed, and for any question to be asked, all previous questions must have been ordered. The above algorithm can be used to construct the case base from scratch, adding cases one by one. In conversational CBR, this task is carried out by a human who knows questions and answers used. In order to automate the process, one needs to have a explicit case representation that can be used to generate answers to the relevant questions. When the above algorithm reaches a leaf node, one has to devise a new question in addition, to discriminate between the case stored there and the new case. This is only possible when the case representation contains some domain specific information. We will look at the process of automatically constructing indexing trees for structural CBR later in this chapter and also in the chapter on Machine Learning. RddConversation(case, tree) 1