 FIGURE 15.23 The KNN-kdtree algorithm retrieves the K most similar (nearest) cases from the leaves of the kd-tree. The function UnvisitedChild returns the child that best matches the Query, according to the test at that node, provided it has not been visited. In both, children have been visited it returns NIL . The function nsertK inserts a case into a list if it is better than the lowest similarity value in the list, by calling the function nsert defined in Figure 15.14. (a) If the value in the count field is 0, it is incremented to 1. Then the right child is returned as the child of the node. (b) Else the value is incremented to 2, and the left child is returned as the child of the node. Thus, the function either returns a child node, if it has not been visited, or it returns NIL. Since the retrieval algorithm is modifying the kd-tree, it is necessary that for every query, a copy of the tree is made for searching. The BWB(Radius, Visited) function should implement the Ball Within Bounds test on the region specified by the buckets visited. The function returns false when the set Visited is empty. In the version of the algorithm above, the BOB test is applied whenever it tries to move to a child node. The BOB test should also return true when the node contains the query, so that the first time the search goes through to the leaf that contains the query. Thus, it should return true when the set Visited is empty. The function Leaf(node) tests whether the node is a leaf. This can be done by inspecting whether the pointer to the left (or right) child has value NIL . The function Parent(node) returns a pointer to the parent node. The pointer is available in the node. The function CasesinBucket(nodeAZB) returns the set of cases stored in the bucket B pointed to by the node. The function InsertK(pair, list, K) inserts a node, sim(Q,node) pair into the list. If the list has less than K pairs, it calls the function Insert defined in Figure 15.14. If the list has K pairs the