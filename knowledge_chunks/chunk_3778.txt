bing pattems and substitutions. For example, the rule described in Fig. 2.1, as well as many like it, could be written as shown in Fig. 2.2.! In general, the more succinctly we can describe the rules we need. the less work we will have to do to provide them and the more efficient the program that uses them can be. White pawn at Square(file e, rank 2) AND move pawn from Square(file e, rank 3) Square(file e, rank 2) is empty to Square(file e, rank 4) AND Square(file e, rank 4) is empty Fig. 2.2 Another Way to Describe Chess Moves We have just defined the problem of piaying chess as a problem of moving around in a slate space, where each state corresponds to a legal position of the board. We can then play chess by starting at an initial state, using a set of rules to move from one state to another, and attempting to end up in one of a set of final states. This state space representation seems natural for chess because the set of states, which corresponds to the set of board positions, is artificial and well-organized. This same kind of representation is also useful for naturally occurring, less well-structured problems, although it may be necessary to use more complex structures than a 'To be completely accurate, this rule should include a check for pinned pieces, which have been ignored here. Problems, Problem Spaces, and Search 27 SOA AN AE SCENT PS AO IL matrix to describe an individual state. The state space representation forms the basis of most of the AJ methods we discuss here. Its structure corresponds to the structure of problem solving in two important ways: Jt allows for a formal definition of a problem as the need to convert some given situation into some desired situation using a set of permissible operations. It permits us to define the process of solving a particular problem as a combination of known techniques (each represented as a rule defining a single step in the space) and search, the general technique of exploring the space to try to find some pat