 may expand more nodes than A does. The memory required by the OPEN of BFHS peaks somewhere around the halfway mark. After that point, the number of nodes that have fvalues within the upper bound starts decreasing. This happens because as one comes closer to the goal, the contribution of the heuristic function h(n) to the Fvalues becomes smaller, and the fvalues become more and more accurate. 5.10.2 Divide and Conquer Beam Search Beam Search (using f-values) can be seen as further pruning the OPEN list as shown in Figure 5.29 below. Given that the consistency condition entails that Fvalues increase when one proceeds towards the goal, one has to relax the criterion of moving to only better nodes, and instead move to the best w nodes at each level. Since it uses a constant beam width w, the memory requirements of Beam Search will grow only linearly with depth. Breadth First Heuristic OPEN Breadth First Heuristic CLOSED Beam Seare. h OPEN and CLOSED FIGURE 5.29 Beam Search further prunes the OPEN to a constant width w. The memory required by Beam Search is proportional to dw, where d is the depth and w the beam width. However, Beam Search is inadmissible, not guaranteeing an optimal solution. In fact, it is not even guaranteed to find any solution. Later, we will address this issue and look at a way to make it complete. Meanwhile, both BFHS and Beam Search keep the full CLOSED list. If we apply the techniques of pruning the CLOSED list from the last section to these two search methods, we get Divide-and-Conquer BFHS (DCBFHS) and Divide-and-Conquer Beam Search (DCBS). Beam search expands nodes in a manner similar to breadth first search, except for sorting and pruning each layer to a fixed number of nodes before proceeding to the next. Both may have a partially expanded layer containing both nodes on OPEN and CLOSED. The next layer will contain a partially formed OPEN, while the preceding layer will have only CLOSED nodes. The current and the preceding layer will contai