et (small) which is also inconsistent with the negative example (blue cube soft small). This forces the creation of a third cluster. Finally, after attempts are made to merge the first example (it merges with the first two clusters), we obtain the frame concept_name:(yellow or spherical object) positive pan; cluster:description:ftarge) :examples:(yellow cube soft large) :(green large sphere hard) (yellow pyramid soft large) cluster:dascription (yellow pyramid) :examples: (yellow pyramid hard small) (yellow pyramid soft large) clusler:description:(blue sphere soft small) :examples:(blue sphere soft small) negative part: :examples:(blue cube soft small) Note that we still have not arrived at the target concept. The last training instance, a negative one, (blue pyramid soft large ) is needed to do the trick. The first cluster is inconsistent with this instance. Therefore, it must be split. Alter completing this split we get the new frame 396 Learning by Induction Chap. 18 concept...name:(yeolow or spherical object) positive part: clusler:description:(yellow soft large) :examples:(yellow cube soft large) (yellow pyramid soft large) cluster: description: (green large sphere hard) :examples: (green large sphere hard) cluster: description:(yellow pyramid) :examples: (yellow pyramid hard small) (yellow pyramid soft large) cluster:description:(blue sphere soft small) :examples:(blue sphere soft small) negative part: :examples:(blue cube soft small) (blue pyramid soft large) All of the new clusters are now consistent with the negative examples. But the clusters are not maximal, since it is possible to merge some clusters without violating the inconsistency condition. To obtain maximality, the clusters must be rewritten and merged where possible. This rewrite is accomplished by copying the first cluster and then successively merging or copying the other clusters in combination. Of course, a merge can be completed only when an inconsistency does not result. The first two cluste