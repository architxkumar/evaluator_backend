aturally be solved by each type of system. The upper left corner represents commutative systems. Partially commutative, monotonic production systems are useful for solving ignwrable problems. This is not surprising since the definitions of the two are essentially the same. But recall that ignorable probleins are those tor which a natural formulation leads to solution steps that can be 1gnored. Such a natura! formulation will then be a partially commutative, monotonic system. Problems that involve creating new things rather than changing old ones are generally ignorable. Theorem proving, as we have described it, is one example of such a creative process. Making deductions from some known facts is a similar creative process. Both of unuse processes can easily be implemented with a partially commutative. monotonic system. Partially commutative, monotonic production systems are important from an impleimentation standpoint because they can be implemented without the ability to backtrack to previous states when it is discovered that an iscorrect path has been followed. Although it is often useful to implement such systems with backtracking in order to guarantee a systematic scarch, the actual database representing the probiem state need not be restored. This often results in a considerable increase in efficiency, particularly because, since the database will never have to be restored. it is not necessary to keep track of where in the search process every change was made. . We have now discussed partially commutative production systems that are alsa monotonic. They are good for problems where things do not change; new things get created. Nonmonetonic, partially commutative systems, on the other hand, are useful for problems in which changes occur but can be reversed and in which order of operations is not critical. This is usually the case in physical manipulation problems, such as robot navigation on a flat plane. Suppose that a robot has the following operators: go north