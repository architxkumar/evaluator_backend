e subgoals that need to be solved for the goals in the succeeding layer, and layers beyond that as well. The basic idea in formulating the termination criteria is to identify a layer in the planning graph in which the sets of subgoals are not solvable and the sets have stabilized as well. The most obvious? candidate for this layer is layer n, in which the planning graph has levelled off. If one knew that al! possible subsets that are candidates for being the subgoal sets at that layer have been considered and found to be unsolvable then one can conclude that the planning problem has no solution. Let us say that the planning graph has gone beyond the level n, and has reached level j at which it has called the ExtractPlan procedure. Let S, be the set of sets of subgoal propositions that ExtractPlan tried at level n (and failed). Then, if there are two consecutive levels (ft 1) and t such that the sizetof S, -1 is equal to the size of S,! then the algorithm can terminate with the output that no plan exists. Observe that the number of sets (at level n) associated with layer (i 1) would always be greater than sets associated with layer i, because the latter is contained in the former. And the number of such sets that is possible is finite because each set is a subset of P,. Hence, at some point the number of sets will stop growing. The reader is referred to (Blum and Furst, 1997) for a proof of correctness of this termination criterion. In the algorithm in Figure 10.7, we have assumed a function SizeSubgoalSets that returns the number of different subgoal sets that are possible in the level n when Graphplan is attempting to find a plan of stages. This procedure is dependent upon the ExtractPlan procedure. We will describe it with the backward search phase used by Blum and Furst a little later. The algorithm Graphplan can be seen to operate in three stages. In the first stage, the initial planning graph is built and if the goal propositions have appeared then it attempts 