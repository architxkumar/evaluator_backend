ne level will have lower g values, and thus lower f values than will all nodes on the next level. What if, on the other hand, / is neither perfect nor 0? Can we say anything interesting about the behavior of the search? The answer is yes if we can guarantee that h never overestimates A. In that case, the A* algorithm is guaranteed to find an optimal (as determined by g) path to a goal, if one exists. This can easily be seen from a few examples.> Consider the situation shown in Fig. 3.4. Assume that the cost of all arcs is 1. Initially, all nodes except A are on OPEN (although the Fig. S shows the situation two steps later, after B and E have been expanded). For each node, f is indicated as the sum of h and g. In this example, Bl(a+1) [C](4+1) [D](6+4) node B has the lowest f , 4, so it is expanded first. Suppose it has only one successor E, which also appears to be three moves away from a goal. E |(3+2) Now f (E) is 5, the same asf (C). Suppose we resolve this in favor of the path we are currently following. Then we will expand E next. Suppose it (3+3) too has a single successor F, also judged to be three moves from a goal. Fig. 3.4 h Underestimates h We are clearly using up moves and making no progress. But f (F) = 6, which is greater than f (C). So we will expand C next. Thus we see that by underestimating h (B) we have wasted some effort. But eventually we discover that B was farther away than we thought and we go back and try another path. Now consider the situation shown in Fig. 3.5. Again we expand B on the first step. On the second step we again expand E. At the next step we expand F, and finally we generate G, for a solution path of length 4. But suppose there is a direct path from D to a solution, giving a path of length 2. We will never find it. By overestimating h (D) we make D look so bad that we may find some other, worse solution without ever expanding D. In general, if h might overestimate h, we cannot be guaranteed of finding the cheapest path soluti