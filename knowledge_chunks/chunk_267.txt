ng for matching attributes within each pattern. The Rete' match algorithm (Forgy, 1982) is based on the following observations. 1. Many patterns share the tests to be done. The same pattern may occur in different rules. It will be tested separately for each rule by the brute force algorithm. If possible, this test should be made only once and the result should be available to the different rules. Secondly, patterns that are not identical may still share some tests. If possible, these tests should also be done commonly as few times as possible. For example, the two patterns, (card-rank suit spades player south rank 1), and (card-rank suit spades player south rank 3) share the first two attributes and values. Then, for any given WME, these two tests could just be done once. . When a rule fires, it makes only a few changes in the working memory. It may remove a few WMEs and add ! a few WMEs. This means that many rules that were in the Conflict Set would continue to do so, with the same set of matching WMEs. The brute force algorithm will compute these matches again in the next cycle. This can be avoided, if we carry forward the previous CS and only make changes to it. The Rete network is a compilation of the rules that also serves as distributed memory for WMEs. Each WME resides at some node in the network depending upon the matches that it has made and the constraints with other patterns that it has satisfied. Since a WME, or part of WME, can match multiple rules, it is possible that several copies of a WME will be np made and will reside at different nodes. The Rete algorithm may, therefore, have a larger space requirement than the brute force matching algorithm. But the reduction in time complexity more than makes up for the increased space requirements. The Rete algorithm uses the Rete network. It accepts changes in the Working Memory, and generates changes in the Conflict Set. The working memory changes are input in the form of tokens of the form WME and -WME . Th