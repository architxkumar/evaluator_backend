arely than I, ELIZA knows it to be more semantically significant and thus to be the clue to which it should respond. So it will produce a response such as Who in particular are you thinking of? Notice that priority matching such as this is particularly important if only one of the choices will ever be tried. This was true for ELIZA and would also be true, say, for a person who, when leaving a fast~ burming room, must choose between turning off the lights (normally a good thing to do) and grabbing the baby (a more important thing to do). Another form of priority matching can occur as a function of the position of the matchable objects in the current state description. For example, suppose we want to model the behavior of human short-term memory (STM). Rules can be matched against the current contents of STM and then used to generate actions, such as producing output to the environment or storing something in long-term memory. In this situation, we might like to have the matcher first try to match against the objects that have most recently entered STM and only compare against older elements if the newer elements do not trigger a match. For a discussion of this method as a conflict resolution strategy in a production system, see Newell [1973]. Preferences Based on States Suppose that there are several rules waiting to fire. One way of selecting among them is to fire all of them temporarily and to examine the results of each, Then, using a heuristic function that can evaluate each of the resulting states, compare the merits of the results, and select the preferred one. Throw away (or maybe keep for later if necessary) the remaining ones, This approach should look familiar it is identical to the best-first search procedure we saw in Chapter 3. Although conceptually this approach can be thought of as a conflict resolution strategy, it is usually implemented as a search contro} technique that operates on top of the states generated by rule applications. The drawback to th