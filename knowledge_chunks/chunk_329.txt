lway-station, travel-to-destination, look-for-hotel, check-in-to-hotel, hike-for-three-days, return) at different levels of abstraction 4. This solution will in turn have to be expanded into sequence of actions at the primitive action level. It is the set of primitive actions that can be carried out in the domain. Thus, high level operators are like instructions in high level programming languages that have to be interpreted by sequences of the primitive instructions provided by the machine hardware. One of the first systems to look at planning in such a hierarchical space was called NOAH (Networks of Action Hierarchies), also developed by Sacerdoti (Sacerdoti, 1977). NOAH represents plans as task networks. The task networks are partial orders, but are not partial plans. Instead, they represent complete plans at a high level of abstraction. NOAH solves a problem by successively refining parts of the task network, till the network has only primitive tasks that can be done by domain operators. After every refinement step, NOAH passes control to a set of routines called critics. Each critic inspects the partial plan for a particular defect and, if found, suggests a remedial action. We look at how NOAH would solve the Sussman s Anomaly. NOAH starts off like GPS by addressing the problem at a high level and proceeds to work in the details, by refining a part of the task network. The initial task network contains a single node. The given task is to achieve the goal on(A, B) A on (B, C) . Like STRIPS, NOAH too decomposes this task into two subtasks for each of the subgoals, but unlike STRIPS, it does not impose an order on the two subtasks. Instead, as shown in Figure 7.25, it creates a network by adding two special action nodes called split and join, to form a partial order. This is the least commitment strategy in which the planner delays commitment to decisions, until it can make an informed choice. The plan at this level is to split the task into two subtasks, then sol