k like. One can think of the variables arranged in layers like in the planning graph. The unary constraints imposed by the start state and the goal propositions can be used to enforce node consistency in the corresponding layers of state variables. The reduction in their domains will be propagated by arc consistency via the constraints linking state variables to actions, and onto other state variables, and so on. In fact, any of the CSP solving algorithms can profitably be employed to find a solution that will contain the plan in the values of the action sequence (a4, ao, ..., ax). There may be No-op actions in the plan found, and they can be deleted to yield a shorter plan. One can now implement an iterative deepening like algorithm that will look for plans of increasing length bounds. D-On(B, S.,) D-On(B, S ) Stack(A,B) Stack(A,C), : , PkUp(A 7 D-Clear(AS.1 (a (nee 4 ey , PtDn(C) No-op FIGURE 10.14 The matching diagram for constraints associated with the action a; in the i stage. The illustration shows the case when the action in question is UnSt(A, B). Other actions will have similar links. The thick dashed triangles represent the ternary constraints associated with the Frame axioms, shown only for the variable On(B). 10.3 Planning as Satisfiability Where the state-variable representation was conducive to posing planning as a CSP, the classical representation can similarly be used to pose planning as a satisfiability (SAT) problem. This too results in a two stage process of solving a planning problem. The first stage involves encoding a planning problem as SAT and the second stage then uses well studied techniques to solve the SAT problem. A well known series of algorithms under the name SATPLAN by Henry Kautz and Bart Selman and David McAllester is based on this idea (Kautz and Selman, 1992; 1996; 1998), (Kautz et al., 1996), In the classical representation, the state is represented by a set of true propositions. If we treat each possible proposition as a Boolea