 a subclass of an unnamed class defined by the ow :Restriction construct. OWL also allows one to define a class by enumerating its elements using the owl:oneOf construct. For example, we can define the set of symphonies by Beethoven as, owl:Class rdf:ID symphoniesOfBeethoven owl:oneOf rdf:parseType Collection owl:Thing rdf:about " No.1, Op.21, C Major owl:Thing rdf:about No.2, Op.36, D Major owl:Thing rdf:about " No.3, Op.55, E flat Major : Eroica owl:Thing rdf:about No.4, Op.60, B flat Major owl:Thing rdf:about " No.5, Op.6 7, C Minor owl:Thing rdf:about " No. , Op.68, F Major : Pastoral A owl:Thing rdf:about " No.7, Op.92, A Major owl:Thing rdf:about " No.8, Op.93, F Major" owl:Thing rdf:about " No. , Op. 125, D Minor : Choral owl:oneof owl:Class We can also say somewhere that the class 9symphonies is the same as (using owl:sameAs) the class symphoniesOfBeethoven. Instances may be added to a knowledge base using the following OWL statements, rdf:Description rdf:ID leningrad rdfi:type rdf:resource symphony rdf:Description symphony rdf:ID leningrad musicSite:composer " dmitriShostakovich academicStaffMember The first statement says that leningrad is an element of type symphony, defined elsewhere. The second one says that for the element leningrad, the property composer defined in the musicSite namespace has the value object dimitriShostakovich defined elsewhere. We can assert that tokens dimitriShostakovich and ludwigVanBeethoven refer to different individuals. Note that this has to be done explicitly, since OWL does not make the unique name assumption (UNA) that says that each instance has a unique name. composer rdf:about dimitriShostakovich owl:differentFrom rdf:resource ludwigVanBeethoven composer One can say that a collection of tokens refer to distinct individuals. owl:allDifferent owl:distinctMembers rdf:parseType Collection composer rdf:about dimitriShostakovich composer rdf:about ludwigVanBeethoven composer rdf:about solfgangAmadeusMozart composer rdf:about