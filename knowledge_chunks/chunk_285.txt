escribed below pose problems that are computationally hard to solve (Gupta and Nau, 1992). This is not surprising, given that they are basically viewed as search problems in the classical approaches. Nevertheless, there has been considerable interest in planning, and we shall look at some of the vast gamut of techniques that have been developed in the area. 7.1 The STRIPS Domain Planning refers to the choice of moves an agent makes before making the moves in the domain. It involves synthesizing a set of actions, often arranged in a linear sequence, but sometimes also in a partial order. A partial ordering could mean that any linearization is a valid plan. In some domains it could also mean that some actions can be done in parallel. When the action sequence is executed in the domain, it has the effect of transforming the world from a given state into a new state, which if the plan works, is a desired or goal state. The search algorithms we have seen in the preceding chapters can also be used for planning. The algorithms assume that the state description is available in a compact form, and that generated moves produce new modified states. In practice, the state will be described by its components, and a database describes the world in a given state. Consequently, we also amend our notion of a move. Instead of viewing moves as state transitions, we will view them as operators that transform a part of a state (see also Chapter 6). Each operator looks for a pattern in the state and, when applied, makes some changes in the state. In doing so, it does implement the state transition function. But the same operators may be applicable over many states, leading to a more compact representation. The operators are close to the idea of production rules, being applicable when the associated preconditions hold. An action (or move in the state transition view) is an instance generated from an operator. The first program to use this formalism was STRIPS (Fikes, 1971). The program was