binatorial in nature. This happens when the underlying search space is a graph, for example in the route finding problem illustrated here. rN iN oN 7 ABCDHL LA D) ABCGHL ABCGKL ABFGHL (r rc Y 7 ABFGKL OU - e EB ABFJKL AEFGHL AEFGKL La a AEFJKL Wy J) K) C AEUKL One can see that there are many paths from node A to node L. The number of paths in ann 1 by m 1 rectangular grid is (n m)! (n!m!) While the problem size increases only as a quadratic, algorithms like DFS or IDA will have to explore combinatorially many paths. A 25 x 25 grid would have 1014 paths! Moreover, the size of the CLOSED grows as a quadratic, while the size of OPEN will only increase linearly. If one were to tackle large problems, then it is CLOSED that will require more memory. Thus, in algorithms that will prune, CLOSED will be valuable. Recently, problems thrown up by the field of computational biology have precisely this kind of domain (Korf et al., 2005; Korf and Zhang, 2000). For example, the alignment of two DNA sequences can be posed as a path finding in a grid like the one above, with additional diagonal arcs. In sequence alignment problems, one is allowed to insert gaps in the sequences. For example, the sequences ACGTACGTACGT and ATGTCGTCACGT can be best aligned with gaps as ACGTACGT ACGT ATGT- CGTCACGT (The worst is ACGTACGTACGT - ----------- cee ce- - - -- ATGTCGTCACGT) Notice that the second characters do not match. If the cost of each mismatch is 1, and the cost of a gap insertion is 2 then the cost of the best solution (alignment) is 5. The problem can be mapped to the problem of traversing a two dimensional grid with diagonal paths included (Needleman and Wunsch, 1970). The two given sequences form the two axes of the grid. Horizontal and vertical moves correspond to gap insertions. Diagonal moves correspond to character alignment and may have a cost of zero or one, depending upon whether the two characters are the same or different. Further, the sequence alignment problem can easily 