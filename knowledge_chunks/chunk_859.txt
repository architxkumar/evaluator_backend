nts do not allow exceptions. Economy of expression, on the other hand, demands that we make statements that are generally true, but which might admit exceptions. Economy is the motivation for ascribing properties to super classes and inheriting them in the subclasses. Exceptions are taken care of by overriding the inherited default values with explicitly stated ones. In this section, we take a closer look at the kind of reasoning that goes into inheritance, specially when there is conflict in the values being inherited from different ancestors. The question is: Given that a slot (or property) can inherit multiple fillers (or values), which one does one choose to accept? In the discussion that follows, we will adopt the following stylized notation that is commonly used. A node will be referred to by a single word that either names the instance, or the class, or names the filler (or value) being inherited. Further, for the sake of discussion, we will only talk about a property value and its negation. For example, instead of choosing between leaves are green and leaves are orange , we will choose between leaves are green and leaves are not green . This means that the question we are asking is a binary one of the type Is Aa kind of B? or Does A have property P?. The answer is encoded in a directed edge from A to B or P. A positive link signifies yes and a negative link no. Thus, we imagine that the network being displayed has been custom made for the question we are asking. CanF ly Penguin FIGURE 14.20 An inheritance network. The node labelled CanFly represents the class of things that can fly . The edge with a dash across represents the fact that that property is not inherited. Consider the following set of statements: Peppy is a penguin. Penguins are birds. Birds can fly. Penguins cannot fly. We represent the sentences as the graph in Figure 14.20. We adopt the notation of representing the edges by the two nodes separated by a dot. If the relation is a negative one, a