 how rapidly the search tree grows. At depth 13, there are 1013 leaves and about 1.1 x 1012 internal nodes. An interesting point to note is that the number of internal nodes is significantly smaller than the number of leaves. This means that most of the work by the search is done on the deepest level. This is, of course, a characteristic of an exponentially growing space. Table 2.1 The number of leaves and internal nodes in a search tree Depth Leaves Internal nodes 0 1 0 1 10 1 2 100 11 3 1000 lll 4 10000 ul 5 100000 lil 6 1000000 111111 7 10000000 M1111 8 100000000 1111111 9 1000000000 WAL 10 10000000000 1111111111 11 100000000000 WML 12 1000000000000 ULLLL111111 13 10000000000000 ULLDADI11111 Let us now compare the time taken by our two search methods to find a goal node at the depth d. The time is estimated by looking at the size of the CLOSED list, which is the number of nodes examined before finding the goal. This assumes that the algorithms take constant time to examine each node. This is strictly not true. Remember that just to check whether a node has been seen earlier, one has to look into the CLOSED list. And for that, one has to look into CLOSED which grows as more and more nodes are added to it. This is likely to become costlier as the search progresses. Nevertheless, we are only interested in relative estimates, and will adopt the simpler approach of counting the nodes examined before termination. Also, in practice, one might use a hash table to store the nodes in CLOSED, and then checking for existence could in fact be done in constant time. DFS If the goal is on the extreme left then DFS finds it after examining d nodes. These are the ancestors of the goal node. If the goal is on the extreme right, it has to examine the entire search tree, which is b nodes. Thus, on the average, it will examine Nps nodes given by, Nprs ((d 1) 07" - 1-1) 2 (b ! bd b-d 2)2(b-1) b42 for large d BFS The search arrives at level d after examining the entire subtree above it