that initiate fluents and the corresponding fluents. Thus if nitiates(e, f t) is true then e and f can only take one of the following pairs of values. Observe that the e, f and t are universally quantified variables of the EC, and their arguments variables from the domain. Initiates(e, f, t) (e fillAir(P, B) Af inflated(B)) Vv (e planToRide(P, B, S, D) af worksPlanRide(P, B, S, D)) Vv (e ride(P, B, S, D) Af loc(P, D)) Vv (e planToEat(P, R) a f worksPlanEat(P, R)) The above formula states that if an event e is initiating a fluent f then it must be the fillAir event that results in the inflated fluent becoming true, or the planToRide event that results in worksPlanRide fluent, the ride event that results in the loc fluent, or the planToEat event that results in the worksPlanEat fluent with appropriate values. No other effect of any action can happen. Likewise the only case we know when an event terminates a fluent is Terminates(e, f, t) (e ride(P, B, S, D) A F loc(P, S), T) When we talk of the Happens predicate, we have to be a bit more specific about the actual instances. We want to eliminate event instances that no one has said have happened, without eliminating the event (type) itself. The only (instances) of events that have been stated explicitly to happen are, Happens(e, t) e fillAir(nikhil53, bicvcle39) a t t, ve planToRide(nikhil53, bicycle39, home86, restaurant66) a t tz ve planToEat(nikhil53, restaurant66) a t ts ve planToRide(nikhil53, bicvcle39, restaurant66, cricketPracticell) a t ty However, the above restriction will not fit the bill because along with events that no one has stated to happen it also throws out events that happen due to their trigger conditions becoming true. One needs to allow those actions that are logically consistent with the set of formulas that we have. This is a little bit trickier. What we really want to say is that only those events happened that are either explicitly stated or that follow logically from what is stated. This kap