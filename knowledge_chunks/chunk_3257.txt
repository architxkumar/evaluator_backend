ible match is found or failure, occurs. For example, when the query ?.grandf ather(X sam) is given, a search is made until the grandfather predicate is found in the data base. In this case, it is the head of the above grandfather rule. The constant Sam is substituted for Z, and an attempt is then made to satisfy the body of the rule. This requires that the three conditions (subgoals) in the body are satisfied. Attempts to satisfy these conditions are made from left to right in the body by searching and finding matching predicates and making consistent variable substitutions by (I) substituting Joe for X in the first subgoal parent(X.Y)and later in the third subgoal male(X. (2) substituting Sam for Z in the second subgoal.parenfl Y.Z). and (3) substituting Ann for Y in the first two subgoals parent(X.Y) and parent(Y.Z). Since consistent variable substitutions can be made in this case, PROLOG returns X = Joe, in response to the unknown X in the query. PROLOG will continue searching through the database until a consistent set of substitutions is found. If all substitutions cannot be found, failure is reported with the printout no. 42 LISP and Other Al Programming Languages Chap. 3 Lists in PROLOG are similar to list data structures in LISP. A PROLOG list is written as a sequence of items separated by commas, and enclosed in square brackets. For example, a list of the students Tom. Sue, Joe, Mary, and Bill is written as l Iom.sue.loe,mary.bi HI A list is either empty (J or nonempty. If nonempty, a list is considered as an object with a head and a tail, corresponding to the car and cdr of a list in LISP. Thus, the head of the above list is Tom, and the tail is the remaining sublist (sue,joe.mary,bi Il. Since the tail is a list, it too is either empty or it has a head and tail. This suggests a binary tree representation similar to linked LISP cons cells. itt PROLOG provides a notation to separate the head and tail, the vertical bar as in IHeadi Taill. This permits one to 