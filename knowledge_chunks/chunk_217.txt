 1) B Cr ) because both are on the optimal path OPEN Optimal path to 7 fo) o q Oo O 9 . ro) Start o o oO Path to node n bd - e P,eeeeeececece FIGURE 5.19 A is just about to pick node n with cost g(n). By transitivity of s, the above property holds true for any two nodes on the optimal path. In particular, it holds for n 4, and node n. That is, A(z) BF (por) S h(n) B (n) (5.10) That is, S041) h(n) g (n) because n;,, is on the optimal path to n But since A is about to pick node n instead, Stn) Sfp.) That is, h(n) g() fz) or h(n) gn) S h(nz.1) B (Mp1) (8.11) Combining (5.10) and (5.11) we get, h(n) gm) h(n) g (m) a(n) Sg (n) g(n) g (n) because g(n) cannot be less than g (n) the optimal cost. Therefore, whenever A expands any node, it does so after finding an optimal path to it. q.e.d. That means that nodes that are in CLOSED cannot have better paths to them, and consequently need not be updated. 5.6.2 Performance of Algorithm A The algorithm A is complete and admissible. The results have been proven in the previous section. Both space complexity and time complexity of A are directly dependent on the heuristic function. With a perfect heuristic function, the algorithm will home in onto the goal in linear time with linear space requirement. In practice, heuristic functions are less than perfect, and the space and time requirements can be exponential, though with a lower branching factor than the actual one, as was discussed in the case of Best First Search earlier. Figure 5.18 above also illustrates the point that more accurate heuristic functions require lesser space, and, therefore, lesser time (since the size of CLOSED can be seen to be a measure of time). Incidentally, the figure can be visually misleading since we tend to see the search space as area inside the curve that grows only as quadratic. The reader must keep in mind that in many search spaces, the sizes of successive layers are multiples of preceding layers, leading to exponential growth. However, figures l