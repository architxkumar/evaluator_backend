 tree at each level. The number of nodes kept is known as the beam width b. At each stage of expansion, all b nodes are expanded; and from the successors, the best b are retained. The memory requirement thus increases by a constant amount. The search tree explored by Beam Search of width 2 is illustrated in Figure 3.17. FIGURE 3.17 Beam Search with beam width 2. Beam Search is often used in situations where backtracking is not feasible because of other reasons. One of the places where it has been used often is in speech processing. The idea is to combine simpler units of sounds, syllables or phonemes, into bigger units. There are various rules for combining sounds to get meaningful words, and the process has to be done in a continuous (online) mode, producing candidate words as the smaller sound units come in. Since most languages have words that sound similar, where similar symbols that can combine into different word units, a speech processing system benefits by keeping more than one option open. A complete description of various techniques used in speech processing is given in (Huang et al., 2001). We look at an illustration of Beam Search on the instance of SAT discussed earlier in the chapter, reproduced below. (b V -0c) A ( V -d) A (Ab) A (Fra V re) A ( V a0) A (0 V md) The candidate solutions can be represented as five-bit strings, one bit for the truth value of each variable. Let us choose the starting candidate string as 11111. For the objective function, we choose the number of clauses satisfied by the string. For the instance of the SAT problem given above, this value can range from 0 to 6. Note that this is an example of a maximization problem, because the value of the objective function is maximum for the goal node. We observe that e(11111) 3. Figure 3.18 below shows the progress of Beam Search of width 2. For each node in the search space, the candidate string and the heuristic (objective) value are depicted. At each level, the best two nodes are chose