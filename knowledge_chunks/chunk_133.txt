 with beam widths of 3 and 4, Variable Neighbourhood Descent with 3 neighbourhood functions, and Tabu Search with neighbourhood functions changing up to 2 bits at a time. (It has been shown that for a given n when the number of clauses is small, the problems are underconstrained trivially solvable; when m is large they are not likely to have a solution; and around m 4.24n there is sudden drop in the probability of solving them (Mitchell et al., 1992).) 1 http. en.wikipedia.org wiki Eureka (word) 2 IIT Madras is in Chennai (formerly Madras) and IIT Bombay, in Mumbai (formerly Bombay). Randomized Search and Emergent Systems Chapter 4 Escaping Local Maxima We have seen that most real world problems create search spaces that are too huge to explore fully. The most studied problems with large solution spaces are SAT and TSP.A SAT problem on a hundred variables has 210 candidate assignments. If we had a machine inspecting a thousand of these per second, and if the machine was started at the time of the Big Bang, fourteen billion years ago when the (current) universe came into being, it would have finished less than one percent of its task by now. Clearly, inspecting all the candidates is not a viable option. Similar search spaces crop up with most problems we formulate. With optimization problems like the TSP, the difficulty is compounded by the fact that we would usually not recognize that a solution is optimal, even if we were to find it. Observe that we also see the SAT problem as an optimization problem during search, in which we attempt to optimize the heuristic value of a candidate solution. Only, in this case, the optimal value is recognized easily; for example when the number of unsatisfied clauses is zero, and we can terminate the search. Complete search not being a viable option for large problems, search methods like Hill Climbing and Tabu Search work with bounded memories. While Hill Climbing is conceptually simple, it can get stuck on a local optimum. In Tabu