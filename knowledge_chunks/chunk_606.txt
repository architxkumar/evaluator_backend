val during which the block A is on block B. As we saw that in the description of the Remote Agent, both states and actions become values of the corresponding attributes. Thus, Arm, can be doing the action of stacking A on B, or it could be in a state described as dle. Both are represented identically using intervals over which the fluent or action is true. Every such attribute is associated with a timeline, and the timeline must account for the attribute at all times during the plan horizon. Thus, state of Arm; may be represented as a sequence of intervals, for example (Hold(Arm,, 0, 4, Idle), Hold(Arm,, 5, 9, Moving(A)), Hold(Arm,, 10, 12, Stacking(A, B)), Hold(Arm,, 13, 18, Idle)). This description is extremely precise. CA P does allow flexibility while inserting such actions (intervals) into the plan. One might assert a lifted version of an interval, for example, Holds(Arm,, t1, t2, Moving(A)) where t1 and 2 are variables. Then one could add constraints on the values that f1 and f2 take. For example, one could say that t2 should not be later than some deadline, or that 1 should begin during a certain time interval. One can also have the value of the attribute as a variable, for example Holds(LocationRobot,, 10, to, Going(room,, X), which could be used if one wanted the robot to leave room, without specifying where it goes. Constraints may be placed on intervals in the same timeline or across different timelines. We have seen an example in Figure 10.28 in which the PointingTo interval of Attitude must contain the TakePhoto action interval of the Camera. If we have a LocationRobot, attribute, then we might specify that an interval specifying Going(Source, Destination) must be met-by an At(Source) interval, and should meet an At(Destination) interval. Representation of such constraints in CA P is done using the notion of Compatibilities. Compatibilities allow the expression of constraints in the form of rules. For example, if a robot arm has to be tucked in while it