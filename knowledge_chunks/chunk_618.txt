e alignment, styles, and spelling checks. A media player may enable a user to create, organize and access movies and music in various formats. In each of these cases, the connection between input and output is fixed. And each program is disconnected; oblivious of the others, using its own internal representation, even for data that may be common to different programs. Furthermore, it is the user who has to choose the appropriate program given a problem to solve, and tailor the data to execute it successfully to generate the answers. Sometimes, the answers themselves may have to be interpreted. As we move away from a matrix multiplier to a system like Matlab or Scilab or R2, the user gets to establish more and more connections between input and output using the same piece of software. The endeavour in creating an artificial intelligence is to extend this diversity to a wider set, perhaps including connections that have not been hard coded into the algorithms. In addition to expanding the set of possible connections between input and output, the goal is to also make these connections transparently, that is, without the need to user intervention. Figure 11.1 illustrates the difference between traditional programming and the Al approach. In traditional programming, a programmer implements the solution steps for problems in a given domain into a program. The program thus embodies the problem solving knowledge of the programmer. In Al programs, on the other hand, the programmer implements a problem solving strategy in a more domain independent form. The resulting Al program takes a domain description and a given problem and produces the solution steps, based on the strategy it embodies. The reader would recall how planning problems and the domain description are both described using a planning domain description language (see Chapter 7). Both the problem solving strategy and the domain description, call upon knowledge representation approaches. pon Problem Class f Domain 