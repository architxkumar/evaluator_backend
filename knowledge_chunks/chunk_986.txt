 cases belonging to one such interval. Thus, the maximum loss of similarity for choosing a bad case is a. The interval is the one in which the Kt similar case in the SRS lies. Diversity-DCR(q : query, CB : case base, k : retrieval size, alfa parameter) 1 CBsubset Sequential-KNN(g, CB, b k, n) 2 simlast SimK(CBsubset, k) similarity of K case 3 upperBound 1 UB of alfa interval 4 lowerBound 1 - alfa LB of alfa interval 5 while simLast lowerBound G do upperBound lowerbound 7 lowerbound upperbound - alfa 8 retrieve all cases with similarity higher than 9 lowerBound 10 R CandidateCases (CBsubset, lowerBound) 11 casesIN () the ones that are definitely in 12 casesAlfa () the ones available for diversification 13 while R () 14 do nextCase First(R) 15 R Rest (R) 16 sim Second (nextCase) 17 iff sim 2 upperBound 18 then casesIN Cons(nextCase, casesIN) 19 else casesAlfa Cons(nextCase, casesAlfa) 20 R MaxD(casesIN, casesAlfa, k) 21 return R FIGURE 15.33 The Diversity Conscious Retrieval algorithm first retrieves the bK most similar cases. Function SimK should find the similarity of the Kt" case. It then determines the bounds lowerBound, upperBound of the alfa interval in which the Kt case lies. Function CandidateCases extracts all cases with similarity higher than lowerBound from CBsubset. Of these, the ones with similarity higher or equal than upperBound are definitely in. From the remaining cases, the algorithm MaxD from Figure 15.32 chooses the ones that maximize diversity to construct a set of size k. The second algorithm, Diversity-DCR, ensures that the most similar cases are always retrieved. In our version of Diversity-BG, we have ensured that the most similar case is always retrieved. This is because in function MaxD, the first case to be considered always has relative diversity one, because the retrieval set is yet empty. The other cases from CBsubset could still be the ones with the lowest similarity values. The Diversity-BG does K passes over the set CBsubset of size B