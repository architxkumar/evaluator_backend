consistent. It then becomes necessary for the problem solver to retract some assumption. A Truth Maintenance System (TMS) (Doyle, 1979) is a program that does the book keeping and consistency management for a problem solver?5 (Figure 17.18). For every sentence the problem solver accepts or generates, the TMS maintains a node in its network. The sentence, referred to as the datum, is a proposition including statements like C, 3, Culprit(butler), and Man(socrates) ... Mortal(socrates). When the problem solver, which could be a theorem prover, a constraint solver, or a custom made reasoning engine, generates a new piece of datum, it informs the TMS about the new datum along with a justification that names the data items or antecedents that resulted in the derivation as well as the method or rule that was used. A justification is of the form, consequent, informant, antecedent,, ..., antecedent, This representation is reminiscent of the way we write proofs, stating the consequent followed by how it was derived. The TMS itself treats each piece of data simply as a node in its network of justifications, and is not concerned with its semantics. It is only concerned with keeping track of justifications and maintaining consistency. If a special node standing for a contradiction receives justification, it informs the problem solver and triggers a Dependency Directed Backtracking (see also Chapters 6 and 9) routine to identify the source of inconsistency that the problem solver can jump back to. Problem Solver Antecedents, 5 : Response Consequent Truth Maintenance System Figure 17.18 A Truth Maintenance System keeps track of justifications of all beliefs held by the Problem Solver and keeps a watch on the consistency of the beliefs. Consider the following (relevant) excerpts from a fictitious set of facts. Nira spoke either to Prashant or to Barkha. Barkha spoke either to Kapil or to Azad. Vir spoke either to Vinod or to Nira. If Nira spoke to Prashant, the culprit is Nitish. I