 a graph with N vertices and returns a minimum width ordering of the vertices. We assume a function RemoveLowestDegreeNode(G) finds the vertex with the lowest number of edges emanating from it, and removes it from the set V. The function cons is a Lisp like function that adds an element to the head of a list. It was observed by Freuder (1982) that if the constraint graph is a tree then one can always come up with an ordering of width one. The reader should verify that the above algorithm produces such an ordering for the problem in Figure 9.22. If one enforces directional arc consistency on such an ordering, the resulting graph will still have width one. This is due to the fact that each node has exactly one parent in this ordering, and, therefore, the induced graph is the same as the given graph. Hence, constraint networks that are trees can be made backtrack free by choosing a minimum width ordering and enforcing DAC on the resulting graph (Freuder, 1982). In general though, enforcing an appropriate amount of directional consistency on a given ordering may increase the width of the graph. Figure 9.29 shows a graph with a minimum width ordering ABCDEFG with width 2. Enforcing directional path consistency makes the induced width of the graph 4. Width 0 1 2 2 2 2 2 Induced Width 0 1 2 3 4 3 2 FIGURE 9.29 The ordering here is a minimum width ordering. Enforcing higher order consistency on a minimum width graph is likely to increase the width. The width of the example graph here increases from 2 to 4 as shown. While it is hard to find the minimum induced width orderings, one can adapt the MinWidth algorithm to account for connectivity of parents of a node. The two algorithms described below produce good orderings. The algorithm MininducedWidth described in Figure 9.30 chooses a node with the smallest number of neighbours in the constraint graph, and removes it and the edges emanating from it. Before proceeding further, however, it connects the parents of the node just 