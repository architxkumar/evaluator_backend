diticn (and (at start (ccoking-on ?c ?s)) (at start (available ?g)) (at end (cooked ?c)) :effect (at start (applied ghee) ) ) This action has the at-start condition that the chapati must be cooking on the stove and it has an at-start effect that ghee is applied. This at-start effect produces the at-end condition for the Chapati action. The Chapati action has an at-end effect that is the chapati is cooked, which is an atend condition for the SpreadGhee action. As we can see, one can successfully carry out a (making) Chapati operation, only if one also begins the SpreadGhee action before the chapati has finished cooking. In turn, the SpreadGhee action can be successfully applied, only if the action ends when the chapati making action has already completed. This illustrates a situation in which we have two actions that are not independent, and are in fact closely dependent on each other generating preconditions for each other at different time points. The actions have to be done in parallel, but only in a specific way described by the above constraint on their durations2 . The relation between the two actions is shown in Figure 10.22 below. Cooking-On, Cooked SpreadGhee Applied Ghee Sa Applied Ghee 7 or : Chapati Cooking-On -------- aan Cooking-On Cooked --- FIGURE 10.22 The required concurrency for the two actions Chapati and SpreadGhee action. SpreadGhee must start during the Chapati action, and must end after the Chapati action. The dashed arrows show the causal links of producing and consuming fluents. One can imagine other problems where the required concurrency demands a different set of relations. For example, in many situations, an action might make a fluent true only during its duration. This can be done by producing it at the start and deleting it at the end (as illustrated in the Chapati action for fluent cooking-on). There could be other actions that require this fluent as an overall condition. For example, a LightMatch action may produce the fluent light, 