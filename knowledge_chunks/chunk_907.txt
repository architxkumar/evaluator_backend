G by using a monadic relation to create a new concept. For example we can say, Situation: Eat (Agent) Person: Arun x (Instr) Hand: Right (of) (Person: ?x (Object) Samosa 2 (In) Plate: and one could use this elsewhere, for example in the situation is that Arun s mother saw Arun eating two samosas on a plate with his right hand Situation: Mother z (Of) Person: Arun x Mother 22 (See) Situation: Eat - (Agent) Person: Arun ?x (Instr) Hand: Right (Of) Person: 2x (Object) Samosa 2 (In) Plate: Here is another example, The teacher thinks that all students are honest , Teacher: (Expr) Belief (Theme) (Proposition: Student:V (Is) Honest Once a proposition has been created, then one can also create its negation. The following CG states that The teacher thinks that it is not the case that all students are honest Teacher: (Expr) Believe (Theme) Proposition: Student:V (Is) Honest Both Sowa and, before him, Peirce were motivated by having a graphical mechanism for reasoning. There have been several attempts to devise graph manipulation operators (see for example (Peirce, 1909)). It is not entirely clear whether a complete deduction system has emerged, but we refer the reader to (Sowa, 2006; 2009) for more details. Meanwhile, conceptual graph are also semantic networks and we look at an approach for semantic retrieval using CGs below. 14.9.1 Efficient Matching with CGs One of the uses that Conceptual Graphs can be put is for semantic retrieval, in which the query is a CG that needs to be matched to the appropriate subgraph in the knowledge base in the form of a CG. We look at an approach by Galia Angelova (2009) that converts simple conceptual graphs into a minimal finite state automaton. A simple conceptual graph is a subset of FOL that employs only the existential quantifier and the conjunction operator without negation. A Simple Conceptual Graph may be described using the vocabulary or support as follows. Definition A support is a 4-tuple S (T , Tp, , T) where, Tc is a finite, par