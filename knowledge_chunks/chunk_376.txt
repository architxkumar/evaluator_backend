it representation of clusters. Rather, the best node in the cluster is used as a representative of the cluster, in the following format. Search node p J, s, h where J is a node in the game tree Sis the status of p: sis SOLVED if its minimax value is known, else it is LIVE. his the upper bound value on the cluster represented by node J The algorithm, described in Figure 8.33, maintains a list OPEN of search nodes, sorted on the upper bound values, like our earlier algorithms for heuristic search in Chapter 3. That way the best node is always at the head of OPEN. But since the nature of the game tree is like an And Or tree, it needs to treat each node differently based on whether it is a MIN node or a MAX node. The procedure is not recursive in nature, as the one described informally above. Instead, when a MAX node is SOLVED, and another sibling exists, the sibling is inserted in the OPEN list as a LIVE node along with the value from the MAX node. If no such sibling exists then its parent MIN can be labelled SOLVED. Initially, the algorithm begins with the root node inserted with the label root, LIVE, LARGE . When the algorithm removes a nonterminal LIVE node from OPEN, it replaces it with all its children if the removed node was MAX, and one child if it was MIN. This forward phase terminates at the horizon. SSS then applies the evaluation function e(J) to the nodes on the horizon, labels them SOLVED, and arranges them in decreasing order of the h values (which in the first round are the values returned by the evaluation function e(J )). The node with the best h value is removed from OPEN, and its sibling added in Line 21 (for MAX nodes). Its sibling is added to OPEN with the lower of the two values. This is a refinement step in which one more leaf of the strategy is inspected. The reader should recall that each leaf is an upper bound on the value of a strategy. When it has finished with all the MAX siblings then the (MIN) parent is inserted in OPEN with the label SOL