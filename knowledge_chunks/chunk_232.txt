 layers of constant width. Beam Stack Search (Zhou and Hansen, 2005) explores the search space systematically with a beam of width w. Like the Beam Search, it too may prune nodes inadmissibly, but it retains the option to backtrack to explore those nodes later. It does this by sorting the nodes at each level on their Fvalues, and keeping track of the minimum and maximum f values of nodes admitted in the beam, at each stage of the search. It does this by keeping a separate stack, called the Beam Stack, in which it stores the finin aNd finax Values at each level as a pair fmin, fax) aS shown in Figure 5.31 below. Since the algorithm involves sorting of nodes at each level, it is easier to visualise with the search tree it generates. Ferax, Values Yet to be explored nodes a Upper bound U L on f-values Increasing f-values FIGURE 5.31 Beam Stack Search orders nodes on f-values. It slides the fnin, fmax Window on backtracking, but does not go beyond the upper bound U. The beam stack maintains the fin and fax Values at each level. This corresponds to the window in that layer that is exposed to the beam search. The finax Value corresponds to the lowest fvalue node that was pushed out of the beam. When the algorithm backtracks, it slides the corresponding window by setting the new fin to the old fax. It sets the new fmax Value to the upper bound U, updating it to a lower value, only if nodes are generated that cannot be accommodated in the beam width. In this way, it can systematically explore the entire space that A would have explored. Initially, it behaves like Beam Search. When it finds a solution, it sets the upper bound value, if a cheaper solution is found. This updating happens every time BSS finds a better solution. Once it has found a solution, the solution can be called for at any time. Thus, BSS becomes an anytime algorithm, quickly finding a good solution which can be returned on demand, but continuing to explore the rest of the space looking for better solution