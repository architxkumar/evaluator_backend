an describe, like conceptualizations in the CD theory, relations between things, attributes and events. The CGs have a convenient symbolic notation that could be used in computer programs. We represent the concept nodes in square brackets, for example (Person: Sue) or Dog . The relation nodes are enclosed in round brackets, as in (Agent) or (Theme). In general, a concept (node) is made up two entities, a type which is a label that specifies the class of the concept, and a referent that denotes an individual of that class. For example, in the concept Person: Sue the type is Person and the referent is Sue . The special case when the referent is omitted is a short form for a concept with a referent 3 that is like an existential quantifier. Thus Dog is a short form for Dog: 3 and read there exists a dog . One can also say Dog: 3 Snoopy to assert there exists a dog named Snoopy . If one wanted to say for example that all dogs are intelligent then one would have used the concept Dog: V . Other forms of referents are as follows. Dog: is read as the dog Person: she is a pronoun as in she is eating a bun . Other pronouns are it , you , etc. Student: 3 One can also use the with an index, for example the 3 student . Student: arnav,aarti,amrita has as referents a set of named entities of a particular class. Student: refers to a set of entities whose elements are not named. Student: 4 refers to as set of 4 unnamed students. Parent: 2 refers to the 2 parents that a person may have. Boy Abheek x and Boy ?x are a pair of concepts that may occur in different graphs in a context but that refer to the same entity. The marker x establishes the connection. Concepts can stand by themselves, but relations need the concepts that the relations relate. The simplest such graph embodies a dyadic relation, depicted by the star graph shown below, Concept1 (relation) Concept2 The following two graphs are identical and read a cat is on a mat , Cat (On) Mat or Mat (On) Cat The following would be th