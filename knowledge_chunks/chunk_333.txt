ctions are called tasks and the decomposition of operators is done by methods. A SHOP2 method constitutes of a name, the name of the task it decomposes, a set of subtasks that the method generates, and constraints between the subtasks. Planning involves a combination of method selection and task decomposition, until one is left only with primitive tasks and the task network generated is consistent. The advantages of using hierarchical planning methods are that in principle, they allow the planner to start at a high level and work out the details selectively. Secondly, they make it possible for the users to feed in problem solving knowledge in the form of the high level operators, and thus exploit human generated knowledge, in addition to the learning of macros proposed by Korf. The last point, however, is a double edged feature, because to exploit the features of HTN planning, one has to be able to devise appropriate high level operators, and algorithms to efficiently interleave the tasks of search, decomposition and constraint reconciliation, specially in domains where the lower level operators may have to be interleaved. But given the fact that planning by search at the level of domain level operators is hard, hierarchical planning is an approach where the combinatorial explosion can be contained. However, to do so, one has to be able to represent the problem and the operators at different levels of abstraction, and also to establish the relations between them. Preconditions Figure 7.30 Schematic of a high level operator. The operator has its own preconditions and effects, and is refined to a partially ordered network of lower level operators. This is essentially a problem of knowledge representation, and therefore HTN planners have a strong knowledge based flavour. Such knowledge can effectively compress the search space, as we saw in the Eight-puzzle example using macro operators. But in doing so, they may lose the generality and completeness of search. One of t