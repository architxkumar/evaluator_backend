e assertions, then forward chainiiy can match assertions on the left side of a rule and add to the state description the assertions on the right side. But if arbitrary procedures are allowed as the right sides of rules, then the rules will not be reversible. Some production languages allow only reversible rules; others do not. When irreversible rules are used, then a commitment to the direction of the search must be made at the time the rules are written. But, as we suggested above, this is often a useful thing to do anyway because it allows the rule writer to add contro! knowledge to the rules themselves. 138 Artificial Intelligence A NEN NNO 6.4 MATCHING So far. we have described the process of using search to solve problems as the application of appropriate rules io individual problem states to generate new states to which the rules can then be applied, and so forth, until a solution is found. We have suggested that clever search involves choosing from among the rules that can be applied at a particular point, the ones that are most likely to lead to a solution. But we have said little about how we extract from the entire collection of rules those that can be applied at a given point. To do so requires some kind of matching between the current state and the preconditions of the rules. How should this be done? The answer to this question can be critical to the success of a rule-based system. We discuss a few proposals below. 6.4.1 Indexing One way to select applicable rules is to do a simple search through all the rules, comparing each one s preconditions to the current state and extracting all the ones that match. But there are two problems with this simple solution: In order to solve very interesting problems, it will be necessary to use a large number of rules. Scanning through all of them at every step of the search would be hopelessly inefficient. It is not always immediately obvious whether a rule s preconditions are satisfied by a particular state. Sometime