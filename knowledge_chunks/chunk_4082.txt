attributes of attributes, we need to describe attributes (slots) as frames. These frames will be organized into an isa hierarchy, just as any other frames are, and that hierarchy can then be used to support inheritance of values for attributes of slots. Before we can describe such a hierarchy in detail, we need to formalize our notion of a slot. 198 Artificial Intelligence PAS Keane std EGR ORE ict 9 MM ca tea ML-Baseball-Player isa National Leaguer Americanleaguer Pitcher | |Catcher| | Fielder instance instance Three-Finger-Brown ML-Baseball-Player is-covered-by : Pitcher, Catcher, Fielder} {American-Leaguer, National-Leaguer Pitcher isa: ML-Basebaill-Player mutually-disjoint-with - Catcher, Fielder, Catcher isa: ML-Baseball-Piayer mutually-disjoint-with: Pitcher, Fielder Fielder isa: ML-Baseball-Player mutually-disjoint-with + Pitcher, Catcher American-Leaguer isa: mutuaily-disjoint-with : National-Leaguer isa: mutually-disjoint-with : Three-Finger-Brown instance : ML-Baseball-Player National-Leaguen ML-Baseball-Player American-Leaguer Pitcher instance : National-Leaguer Fig. 9.8 Representing Relationships among Classes A slot is a relation. It maps from elements of its domain (the classes for which it makes sense) to elements of its range (its possible values). A relation is a set of ordered pairs. Thus it makes sense to say that one relation (R,) is a subset of another (R,). In that case, R, is a specialization of R2, so in our terminology isa (Rj, R,). Since a slot is a set, the set of all slots, which we will call Slot, is a metaclass. Its instances are slots, which may have subslots. Figures 9.9 and 9.10 illustrate several examples of slots represented as frames. Slot is a metaclass. Its instances are slots (each of which is a set of ordered pairs). Associated with the metaclass are attributes that each instance (i.e., each actual slot) will inherit. Each slot, since it is a relation, has a domain and a range. We represent the domain in the slot labeled domai