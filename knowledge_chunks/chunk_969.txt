ace, there are essentially two types of adjacent regions. The first is (regions 1 and 3), where the nearest point to the query is at a corner. The second of the type labelled 2 is where the nearest point is along a particular dimension. The BOB test needs to compare the lengths of the dotted segments as shown in the figure with the radius. After identifying the point closest to the query in the region, the test requires the computation of the length of the dotted segment and comparing it with the radius of the ball. With each new dimension added, one more type of point will be added. For example, in 3D space, the closest point could be a corner, on an edge, or on a face. The BWB test is simpler. For each dimension, one needs to apply the test on both sides of the query point to check whether the distance to the separator is greater than the radius. The BWB test may be more complex for nonrectangular regions. If there are concave corners on the region boundary then the distance to those corners must also be compared with the radius as shown in Figure 15.22. We assume that suitable BOB and BWB tests are implemented. It must be kept in mind that one is allowed to have error in these functions. The BWB test can be allowed to return false erroneously, and the BOB test can be allowed to return true erroneously. Functions that do that may be simpler to implement. They will not affect the correctness of retrieval. But the cost may be in terms of time taken for retrieval, due to unnecessary exploration of regions that a better function would have excluded. The algorithm for retrieval is described in Figure 15.23. The node structure in the kd-tree is repeated below. FIGURE 15.22 For nonrectangular shapes, the BWB test may be more complex. For example, if there are concave corners like A and B, they must also be compared. Node (attribute-name, : the attribute to be tested attribute-value, : the value of the attribute pointer-to-bucket, : bucket has the cases pointer-to-left-ch