y inside the heads of human experts. One way to get this knowledge into a program is through interaction with the human expert. Another way is to have the program leam expert behavior from raw data. TEIRESIAS [Davis, 1982; Davis, 1977] was the first program to support explanation and knowledge acquisition. TEIRESIAS served as a front-end for the MYCIN expert system. A fragment of a TEIRESIASMYCIN conversation with a user (a doctor) is shown in Fig. 20.1. The program has asked for a piece of information that it needs in order to continue its reasoning. The doctor wants to know why the program wants the information, and later asks how the program arrived at a conclusion that it claimed it had reached. An important premise underlying TEIRESIAS s approach to explanation is that the behavior of a program can be explained simply by referring to a trace of the program s execution. There are ways in which this assumption limits the kinds of explanations that can be produced, but it does minimize the overhead involved in generating each explanation, To understand how TEIRESIAS generates explanations of MYCIN s behavior, we need to know how that behavior is structured. . MYCIN attempts to solve its goal of recommending a therapy for a particular patient by first finding the cause of the patient s illness. It uses its production rules to reason backward from goals to clinical observations. To solve the top-level diagnostic goal, it looks for rules whose right sides suggest diseases. It then uses the left sides of those niles (the preconditions) to set up subgoals whose success would enable the mules to be invoked. These subgoals are again matched against rules, and their preconditions are used to set up additional subgoals. Whenever a precondition describes a specific piece of clinical evidence, MYCIN uses that evidence if it already has access to it. Otherwise, it asks the user to provide the information. In order that MYCIN s requests for information will appear coherent to 