iables and k the size of each domain. For the last variable in the worst case, it has to look at (n 1) (n 2) or O(n?) pairs of variables. Each pair of variables may have at most k? edges, for each of which k values in the domain of the last variable may have to be examined. Thus, for processing the last variable, the complexity is O(n2k ), and processing all the n variable will give us a worst-case performance of O(n k ). Observe that we consider all pairs of variables instead of all edges because the procedure can add more edges during processing. 9.5.3 Adaptive Consistency We can extend the notion of directional consistency for higher orders. If we want to enforce i-consistency, we need to look at combinations of (i - 1) parents of a node. For strong i-consistency, we would need to establish directional j-consistency for all j i as well. Given the fact that directional consistency is enforced from the last to the first variable, when the time comes to process variable x; we already know how many parents it has, and therefore we know what degree of consistency is needed for that node. This leads us to the idea of adaptive consistency, in which a call to an appropriate degree of i-consistency is made for each node. The following algorithm illustrates this idea of adaptive consistency. Observe that the algorithm in Figure 9.26 does not necessarily implement strong consistency. AdaptiveConsistency (X (x1, 2, ..1 Xn), D, C) x,, x; is the scope of some relation 1 initialize (i, 3 2 initialize Cc Cc 3 for k n downto 2 4 S Parents (x,) 5 Rs Revise-I (S, x) EEV (i, j) i, 7 5 7 Ce cu (Ss, R.5) 8 return (X, D, C ) FIGURE 9.26 The algorithm AdaptiveConsistency takes as input a CSP with an ordering on its variables and returns an equivalent CSP after enforcing directional of appropriate degree. It may add new edges to the constraint graph, and therefore new explicit constraints. The function Parents(x,) returns the set of parents of a node and the procedure Revise- (S, x,) is 