 the most successful has been the implementation of Scrabble. In fact, the program Maven, now commercially available, can easily outplay human players (Sheppard, 2002). This is not surprising given that the machine can have access to a large vocabulary. In addition, it can speedily run through different combinations, and pick the one yielding maximum score. One could use a heuristic function that evaluates a board position by the points it yields, along with some measure of the cost of openings it creates for the opponent. A game that is met with less success is Contract Bridge. Though there have been several attempts at implementing the game (see: Throop, Frank, Khemani, Smith, Ginsberg, Sterling and Nygate), a truly world class player is yet to emerge. 8.1.1 Game Trees We now look at some well known, search based algorithms to play complete information games. Our focus will be on alternate move games. In some games, players are allowed to move again in certain situations. For example, multiple captures in checkers, or potting a ball in snooker. We will assume that the move sequence can be modelled as a single (macro) move. We also assume the games to be two-player games. But the ideas presented can easily be extended to multi-player games. Finally, we assume that the game is a zero sum game. Our two players are traditionally named MAX and MIN, indicating that their goals are opposite of each other. The algorithms we study could be adapted to players whose goals are not diametrically opposite each other. A game is represented by a game tree. A game tree is a layered tree in which at each alternating level, one or the other player makes the choices. The layers are called MAX layers and MIN layers as shown in Figure 8.5. Traditionally, we draw MAX nodes as square boxes and MIN nodes as circles in the tree8, and MAX is at the root. A game starts at the root with MAX playing first and ends at a leaf node. OOD ARDWA . ? 2) ? ( QO) ji 5 O orc o 5 me yi IIA Ie he i IAAGAC