y the problem solver. Essentially, an ATMS system works breadth-first, considering all possible contexts at once, while both JTMS and LTMS systems operate depth-first. The ATMS, like the JTMS, is designed to be used in conjunction with a separate problem solver. The problem solver s job is to: Create nodes that correspond to assertions (both those that are given as axioms and those that are derived by the problem solver). Associate with each such node one or more justifications, each of which describes a reasoning chain that led to the node. e Inform the ATMS of inconsistent contexts. Notice that this is identical to the role of the problem solver that uses a JTMS, except that no explicit choices among paths to follow need be made as reasoning proceeds. Some decision may be necessary at the end, though, if more than one possible solution still has a consistent context. The role of the ATMS system is then to: . Propagate inconsistencies, thus ruling out contexts that include subcontexts (sets of assertions) that are known to be inconsistent. Label each problem solver node with the contexts in which it has a valid justification. This is done by combining contexts that correspond to the components of a justification. In particular, given a justification of the form AILAA2A..A\An>~C assign as a context for the node corresponding to C the intersection of the contexts corresponding to the nodes A] through An. Contexts get eliminated as a result of the problem-solver asserting inconsistencies and the ATMS propagating them. Nodes get created by the problem-solver to represent possible components of a problem solution. They may then get pruned from consideration if all their context labels get pruned. Thus a choice among possible solution components gradually evolves in a process very much like the constraint satisfaction procedure that we examined in Section 3.5. One problem with this approach is that given a set of n assumptions, the number of possible contexts that may ha