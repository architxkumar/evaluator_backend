e is less susceptible to noise than is spoken language, noise is still a problem. For example, typing errors are common, particularly if language is being used interactively to communicate with a computer system. Conclusion The point of this section has been twofold. On the one hand, it has attempted to describe the sources of complexity in understanding tasks, in order to help you analyze new understanding tasks for tractability. On the other, it has tried to point out specific understanding tasks that turn out, unfortunately, to be hard (such as natural language understanding) but that are nevertheless important in the sense that ii would be useful if we could perform them. It is to these understanding tasks that we will need to devote substantial research effort. 14.3. UNDERSTANDING AS CONSTRAINT SATISFACTION On the basis of a superficial analysis (such as the one in the last section), many understanding tasks appear impossibly complex. The number of interpretations that can be assigned to individual components of an input is large, and the number of combinations of those components is enormous. But a closer analysis often reveals that many of the combinations cannot actually occur. These natural constraints can be exploited in the understanding process to reduce the complexity from unmanageable to tractable. There are two important steps in the use of constraints in problem-solving: 1. Analyze the problem domain to determine what the constraints are. 2. Solve the problem by applying a constraint satisfaction algorithm that effectively uses the constraints from step 1 to contro! the search. Recall that we presented such an algorithm in Section 3.5. In the rest of this section, we look at one example of the use of this approach, the Waltz algorithm for labeling line drawings. In Chapter 15 we then look in depth at the problem of natural language understanding and see how it too can be viewed as a constraint satisfaction process. Consider the drawing shown in Fig. 